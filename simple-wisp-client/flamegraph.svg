<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1606" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1589.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1589.00"> </text><svg id="frames" x="10" width="1180" total_samples="49872"><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.01%)</title><rect x="0.0040%" y="1525" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="5"/><text x="0.2540%" y="1535.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="0.0261%" y="1493" width="0.0100%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="5"/><text x="0.2761%" y="1503.50"></text></g><g><title>[libc.so.6] (21 samples, 0.04%)</title><rect x="0.0140%" y="1525" width="0.0421%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="21"/><text x="0.2640%" y="1535.50"></text></g><g><title>[libc.so.6] (19 samples, 0.04%)</title><rect x="0.0180%" y="1509" width="0.0381%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="19"/><text x="0.2680%" y="1519.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (9 samples, 0.02%)</title><rect x="0.0381%" y="1493" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1503.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (9 samples, 0.02%)</title><rect x="0.0381%" y="1477" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1487.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (9 samples, 0.02%)</title><rect x="0.0381%" y="1461" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1471.50"></text></g><g><title>pthread_getattr_np (9 samples, 0.02%)</title><rect x="0.0381%" y="1445" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1455.50"></text></g><g><title>malloc (9 samples, 0.02%)</title><rect x="0.0381%" y="1429" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1439.50"></text></g><g><title>[libc.so.6] (9 samples, 0.02%)</title><rect x="0.0381%" y="1413" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1423.50"></text></g><g><title>[libc.so.6] (9 samples, 0.02%)</title><rect x="0.0381%" y="1397" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="9"/><text x="0.2881%" y="1407.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="0.0401%" y="1381" width="0.0160%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="8"/><text x="0.2901%" y="1391.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.0561%" y="1525" width="0.0120%" height="15" fill="rgb(216,20,37)" fg:x="28" fg:w="6"/><text x="0.3061%" y="1535.50"></text></g><g><title>simple-wisp-cli (41 samples, 0.08%)</title><rect x="0.0000%" y="1541" width="0.0822%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="41"/><text x="0.2500%" y="1551.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (7 samples, 0.01%)</title><rect x="0.0882%" y="1525" width="0.0140%" height="15" fill="rgb(217,207,13)" fg:x="44" fg:w="7"/><text x="0.3382%" y="1535.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6 samples, 0.01%)</title><rect x="0.1444%" y="1509" width="0.0120%" height="15" fill="rgb(231,73,38)" fg:x="72" fg:w="6"/><text x="0.3944%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (13 samples, 0.03%)</title><rect x="0.1564%" y="1509" width="0.0261%" height="15" fill="rgb(225,20,46)" fg:x="78" fg:w="13"/><text x="0.4064%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (13 samples, 0.03%)</title><rect x="0.1564%" y="1493" width="0.0261%" height="15" fill="rgb(210,31,41)" fg:x="78" fg:w="13"/><text x="0.4064%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="0.1604%" y="1477" width="0.0221%" height="15" fill="rgb(221,200,47)" fg:x="80" fg:w="11"/><text x="0.4104%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.02%)</title><rect x="0.1604%" y="1461" width="0.0221%" height="15" fill="rgb(226,26,5)" fg:x="80" fg:w="11"/><text x="0.4104%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.02%)</title><rect x="0.1604%" y="1445" width="0.0221%" height="15" fill="rgb(249,33,26)" fg:x="80" fg:w="11"/><text x="0.4104%" y="1455.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.02%)</title><rect x="0.1604%" y="1429" width="0.0221%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="11"/><text x="0.4104%" y="1439.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.02%)</title><rect x="0.1604%" y="1413" width="0.0221%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="11"/><text x="0.4104%" y="1423.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (43 samples, 0.09%)</title><rect x="0.1043%" y="1525" width="0.0862%" height="15" fill="rgb(247,18,42)" fg:x="52" fg:w="43"/><text x="0.3543%" y="1535.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (6 samples, 0.01%)</title><rect x="0.1905%" y="1525" width="0.0120%" height="15" fill="rgb(241,131,45)" fg:x="95" fg:w="6"/><text x="0.4405%" y="1535.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="0.2025%" y="1509" width="0.0221%" height="15" fill="rgb(249,31,29)" fg:x="101" fg:w="11"/><text x="0.4525%" y="1519.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.08%)</title><rect x="0.2246%" y="1509" width="0.0822%" height="15" fill="rgb(225,111,53)" fg:x="112" fg:w="41"/><text x="0.4746%" y="1519.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (6 samples, 0.01%)</title><rect x="0.2948%" y="1493" width="0.0120%" height="15" fill="rgb(238,160,17)" fg:x="147" fg:w="6"/><text x="0.5448%" y="1503.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (6 samples, 0.01%)</title><rect x="0.2948%" y="1477" width="0.0120%" height="15" fill="rgb(214,148,48)" fg:x="147" fg:w="6"/><text x="0.5448%" y="1487.50"></text></g><g><title>event_listener::TaskRef::into_task (6 samples, 0.01%)</title><rect x="0.2948%" y="1461" width="0.0120%" height="15" fill="rgb(232,36,49)" fg:x="147" fg:w="6"/><text x="0.5448%" y="1471.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (6 samples, 0.01%)</title><rect x="0.2948%" y="1445" width="0.0120%" height="15" fill="rgb(209,103,24)" fg:x="147" fg:w="6"/><text x="0.5448%" y="1455.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.04%)</title><rect x="0.3068%" y="1509" width="0.0361%" height="15" fill="rgb(229,88,8)" fg:x="153" fg:w="18"/><text x="0.5568%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (25 samples, 0.05%)</title><rect x="0.3449%" y="1509" width="0.0501%" height="15" fill="rgb(213,181,19)" fg:x="172" fg:w="25"/><text x="0.5949%" y="1519.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (25 samples, 0.05%)</title><rect x="0.4171%" y="1509" width="0.0501%" height="15" fill="rgb(254,191,54)" fg:x="208" fg:w="25"/><text x="0.6671%" y="1519.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (25 samples, 0.05%)</title><rect x="0.4171%" y="1493" width="0.0501%" height="15" fill="rgb(241,83,37)" fg:x="208" fg:w="25"/><text x="0.6671%" y="1503.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (25 samples, 0.05%)</title><rect x="0.4171%" y="1477" width="0.0501%" height="15" fill="rgb(233,36,39)" fg:x="208" fg:w="25"/><text x="0.6671%" y="1487.50"></text></g><g><title>bytes::bytes_mut::release_shared (11 samples, 0.02%)</title><rect x="0.4451%" y="1461" width="0.0221%" height="15" fill="rgb(226,3,54)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1471.50"></text></g><g><title>core::mem::drop (11 samples, 0.02%)</title><rect x="0.4451%" y="1445" width="0.0221%" height="15" fill="rgb(245,192,40)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (11 samples, 0.02%)</title><rect x="0.4451%" y="1429" width="0.0221%" height="15" fill="rgb(238,167,29)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (11 samples, 0.02%)</title><rect x="0.4451%" y="1413" width="0.0221%" height="15" fill="rgb(232,182,51)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="0.4451%" y="1397" width="0.0221%" height="15" fill="rgb(231,60,39)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="0.4451%" y="1381" width="0.0221%" height="15" fill="rgb(208,69,12)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1391.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="0.4451%" y="1365" width="0.0221%" height="15" fill="rgb(235,93,37)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.02%)</title><rect x="0.4451%" y="1349" width="0.0221%" height="15" fill="rgb(213,116,39)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1359.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.02%)</title><rect x="0.4451%" y="1333" width="0.0221%" height="15" fill="rgb(222,207,29)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1343.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.02%)</title><rect x="0.4451%" y="1317" width="0.0221%" height="15" fill="rgb(206,96,30)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1327.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.02%)</title><rect x="0.4451%" y="1301" width="0.0221%" height="15" fill="rgb(218,138,4)" fg:x="222" fg:w="11"/><text x="0.6951%" y="1311.50"></text></g><g><title>cfree (7 samples, 0.01%)</title><rect x="0.4672%" y="1509" width="0.0140%" height="15" fill="rgb(250,191,14)" fg:x="233" fg:w="7"/><text x="0.7172%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::{{closure}}&gt; (121 samples, 0.24%)</title><rect x="0.4812%" y="1509" width="0.2426%" height="15" fill="rgb(239,60,40)" fg:x="240" fg:w="121"/><text x="0.7312%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::State&lt;()&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="0.7519%" y="1413" width="0.0120%" height="15" fill="rgb(206,27,48)" fg:x="375" fg:w="6"/><text x="1.0019%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&lt;()&gt;&gt; (6 samples, 0.01%)</title><rect x="0.7519%" y="1397" width="0.0120%" height="15" fill="rgb(225,35,8)" fg:x="375" fg:w="6"/><text x="1.0019%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::Task&gt; (6 samples, 0.01%)</title><rect x="0.7519%" y="1381" width="0.0120%" height="15" fill="rgb(250,213,24)" fg:x="375" fg:w="6"/><text x="1.0019%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (6 samples, 0.01%)</title><rect x="0.7519%" y="1365" width="0.0120%" height="15" fill="rgb(247,123,22)" fg:x="375" fg:w="6"/><text x="1.0019%" y="1375.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="0.7519%" y="1349" width="0.0120%" height="15" fill="rgb(231,138,38)" fg:x="375" fg:w="6"/><text x="1.0019%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (21 samples, 0.04%)</title><rect x="0.7239%" y="1509" width="0.0421%" height="15" fill="rgb(231,145,46)" fg:x="361" fg:w="21"/><text x="0.9739%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.7519%" y="1493" width="0.0140%" height="15" fill="rgb(251,118,11)" fg:x="375" fg:w="7"/><text x="1.0019%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.7519%" y="1477" width="0.0140%" height="15" fill="rgb(217,147,25)" fg:x="375" fg:w="7"/><text x="1.0019%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.7519%" y="1461" width="0.0140%" height="15" fill="rgb(247,81,37)" fg:x="375" fg:w="7"/><text x="1.0019%" y="1471.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop (7 samples, 0.01%)</title><rect x="0.7519%" y="1445" width="0.0140%" height="15" fill="rgb(209,12,38)" fg:x="375" fg:w="7"/><text x="1.0019%" y="1455.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop::__drop_inner (7 samples, 0.01%)</title><rect x="0.7519%" y="1429" width="0.0140%" height="15" fill="rgb(227,1,9)" fg:x="375" fg:w="7"/><text x="1.0019%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (20 samples, 0.04%)</title><rect x="0.7660%" y="1509" width="0.0401%" height="15" fill="rgb(248,47,43)" fg:x="382" fg:w="20"/><text x="1.0160%" y="1519.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="0.7900%" y="1493" width="0.0160%" height="15" fill="rgb(221,10,30)" fg:x="394" fg:w="8"/><text x="1.0400%" y="1503.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (8 samples, 0.02%)</title><rect x="0.7900%" y="1477" width="0.0160%" height="15" fill="rgb(210,229,1)" fg:x="394" fg:w="8"/><text x="1.0400%" y="1487.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_ref (8 samples, 0.02%)</title><rect x="0.7900%" y="1461" width="0.0160%" height="15" fill="rgb(222,148,37)" fg:x="394" fg:w="8"/><text x="1.0400%" y="1471.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (8 samples, 0.02%)</title><rect x="0.7900%" y="1445" width="0.0160%" height="15" fill="rgb(234,67,33)" fg:x="394" fg:w="8"/><text x="1.0400%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="0.8101%" y="1509" width="0.0100%" height="15" fill="rgb(247,98,35)" fg:x="404" fg:w="5"/><text x="1.0601%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;::wisp_write_split::{{closure}}&gt; (8 samples, 0.02%)</title><rect x="0.8201%" y="1509" width="0.0160%" height="15" fill="rgb(247,138,52)" fg:x="409" fg:w="8"/><text x="1.0701%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="0.8361%" y="1509" width="0.0140%" height="15" fill="rgb(213,79,30)" fg:x="417" fg:w="7"/><text x="1.0861%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::LockedWebSocketWrite::write_split::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="0.8502%" y="1509" width="0.0140%" height="15" fill="rgb(246,177,23)" fg:x="424" fg:w="7"/><text x="1.1002%" y="1519.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (10 samples, 0.02%)</title><rect x="0.8642%" y="1509" width="0.0201%" height="15" fill="rgb(230,62,27)" fg:x="431" fg:w="10"/><text x="1.1142%" y="1519.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (13 samples, 0.03%)</title><rect x="0.8843%" y="1509" width="0.0261%" height="15" fill="rgb(216,154,8)" fg:x="441" fg:w="13"/><text x="1.1343%" y="1519.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (10 samples, 0.02%)</title><rect x="0.8903%" y="1493" width="0.0201%" height="15" fill="rgb(244,35,45)" fg:x="444" fg:w="10"/><text x="1.1403%" y="1503.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (10 samples, 0.02%)</title><rect x="0.8903%" y="1477" width="0.0201%" height="15" fill="rgb(251,115,12)" fg:x="444" fg:w="10"/><text x="1.1403%" y="1487.50"></text></g><g><title>core::sync::atomic::atomic_load (10 samples, 0.02%)</title><rect x="0.8903%" y="1461" width="0.0201%" height="15" fill="rgb(240,54,50)" fg:x="444" fg:w="10"/><text x="1.1403%" y="1471.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (7 samples, 0.01%)</title><rect x="0.9123%" y="1509" width="0.0140%" height="15" fill="rgb(233,84,52)" fg:x="455" fg:w="7"/><text x="1.1623%" y="1519.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (7 samples, 0.01%)</title><rect x="0.9123%" y="1493" width="0.0140%" height="15" fill="rgb(207,117,47)" fg:x="455" fg:w="7"/><text x="1.1623%" y="1503.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (7 samples, 0.01%)</title><rect x="0.9123%" y="1477" width="0.0140%" height="15" fill="rgb(249,43,39)" fg:x="455" fg:w="7"/><text x="1.1623%" y="1487.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (6 samples, 0.01%)</title><rect x="0.9645%" y="1477" width="0.0120%" height="15" fill="rgb(209,38,44)" fg:x="481" fg:w="6"/><text x="1.2145%" y="1487.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.01%)</title><rect x="0.9645%" y="1461" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="481" fg:w="6"/><text x="1.2145%" y="1471.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.01%)</title><rect x="0.9645%" y="1445" width="0.0120%" height="15" fill="rgb(242,79,21)" fg:x="481" fg:w="6"/><text x="1.2145%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (21 samples, 0.04%)</title><rect x="0.9765%" y="1477" width="0.0421%" height="15" fill="rgb(211,96,35)" fg:x="487" fg:w="21"/><text x="1.2265%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (21 samples, 0.04%)</title><rect x="0.9765%" y="1461" width="0.0421%" height="15" fill="rgb(253,215,40)" fg:x="487" fg:w="21"/><text x="1.2265%" y="1471.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (49 samples, 0.10%)</title><rect x="0.9264%" y="1509" width="0.0983%" height="15" fill="rgb(211,81,21)" fg:x="462" fg:w="49"/><text x="1.1764%" y="1519.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (30 samples, 0.06%)</title><rect x="0.9645%" y="1493" width="0.0602%" height="15" fill="rgb(208,190,38)" fg:x="481" fg:w="30"/><text x="1.2145%" y="1503.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (10 samples, 0.02%)</title><rect x="1.0246%" y="1509" width="0.0201%" height="15" fill="rgb(235,213,38)" fg:x="511" fg:w="10"/><text x="1.2746%" y="1519.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (11 samples, 0.02%)</title><rect x="1.0447%" y="1509" width="0.0221%" height="15" fill="rgb(237,122,38)" fg:x="521" fg:w="11"/><text x="1.2947%" y="1519.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (5 samples, 0.01%)</title><rect x="1.0667%" y="1509" width="0.0100%" height="15" fill="rgb(244,218,35)" fg:x="532" fg:w="5"/><text x="1.3167%" y="1519.50"></text></g><g><title>tokio::runtime::task::raw::poll (26 samples, 0.05%)</title><rect x="1.1068%" y="1509" width="0.0521%" height="15" fill="rgb(240,68,47)" fg:x="552" fg:w="26"/><text x="1.3568%" y="1519.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (11 samples, 0.02%)</title><rect x="1.1830%" y="1509" width="0.0221%" height="15" fill="rgb(210,16,53)" fg:x="590" fg:w="11"/><text x="1.4330%" y="1519.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (50 samples, 0.10%)</title><rect x="1.2051%" y="1509" width="0.1003%" height="15" fill="rgb(235,124,12)" fg:x="601" fg:w="50"/><text x="1.4551%" y="1519.50"></text></g><g><title>&lt;wisp_mux::packet::Packet as wisp_mux::packet::Encode&gt;::encode (5 samples, 0.01%)</title><rect x="1.3715%" y="1477" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="684" fg:w="5"/><text x="1.6215%" y="1487.50"></text></g><g><title>&lt;wisp_mux::packet::PacketType as wisp_mux::packet::Encode&gt;::encode (5 samples, 0.01%)</title><rect x="1.3715%" y="1461" width="0.0100%" height="15" fill="rgb(250,166,2)" fg:x="684" fg:w="5"/><text x="1.6215%" y="1471.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (5 samples, 0.01%)</title><rect x="1.3715%" y="1445" width="0.0100%" height="15" fill="rgb(242,216,29)" fg:x="684" fg:w="5"/><text x="1.6215%" y="1455.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="1.3715%" y="1429" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="684" fg:w="5"/><text x="1.6215%" y="1439.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (41 samples, 0.08%)</title><rect x="1.3053%" y="1509" width="0.0822%" height="15" fill="rgb(228,99,48)" fg:x="651" fg:w="41"/><text x="1.5553%" y="1519.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (8 samples, 0.02%)</title><rect x="1.3715%" y="1493" width="0.0160%" height="15" fill="rgb(253,11,6)" fg:x="684" fg:w="8"/><text x="1.6215%" y="1503.50"></text></g><g><title>[[heap]] (621 samples, 1.25%)</title><rect x="0.2025%" y="1525" width="1.2452%" height="15" fill="rgb(247,143,39)" fg:x="101" fg:w="621"/><text x="0.4525%" y="1535.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (30 samples, 0.06%)</title><rect x="1.3876%" y="1509" width="0.0602%" height="15" fill="rgb(236,97,10)" fg:x="692" fg:w="30"/><text x="1.6376%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (6 samples, 0.01%)</title><rect x="1.4577%" y="1509" width="0.0120%" height="15" fill="rgb(233,208,19)" fg:x="727" fg:w="6"/><text x="1.7077%" y="1519.50"></text></g><g><title>[libc.so.6] (117 samples, 0.23%)</title><rect x="1.4698%" y="1509" width="0.2346%" height="15" fill="rgb(216,164,2)" fg:x="733" fg:w="117"/><text x="1.7198%" y="1519.50"></text></g><g><title>__floattidf (14 samples, 0.03%)</title><rect x="1.7044%" y="1509" width="0.0281%" height="15" fill="rgb(220,129,5)" fg:x="850" fg:w="14"/><text x="1.9544%" y="1519.50"></text></g><g><title>__lll_lock_wake_private (20 samples, 0.04%)</title><rect x="1.7344%" y="1509" width="0.0401%" height="15" fill="rgb(242,17,10)" fg:x="865" fg:w="20"/><text x="1.9844%" y="1519.50"></text></g><g><title>__vdso_clock_gettime (20 samples, 0.04%)</title><rect x="1.7745%" y="1509" width="0.0401%" height="15" fill="rgb(242,107,0)" fg:x="885" fg:w="20"/><text x="2.0245%" y="1519.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (9 samples, 0.02%)</title><rect x="1.8146%" y="1509" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="905" fg:w="9"/><text x="2.0646%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.03%)</title><rect x="1.8608%" y="1493" width="0.0281%" height="15" fill="rgb(233,223,10)" fg:x="928" fg:w="14"/><text x="2.1108%" y="1503.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.03%)</title><rect x="1.8608%" y="1477" width="0.0281%" height="15" fill="rgb(215,21,27)" fg:x="928" fg:w="14"/><text x="2.1108%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.03%)</title><rect x="1.8608%" y="1461" width="0.0281%" height="15" fill="rgb(232,23,21)" fg:x="928" fg:w="14"/><text x="2.1108%" y="1471.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.03%)</title><rect x="1.8608%" y="1445" width="0.0281%" height="15" fill="rgb(244,5,23)" fg:x="928" fg:w="14"/><text x="2.1108%" y="1455.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (30 samples, 0.06%)</title><rect x="1.8327%" y="1509" width="0.0602%" height="15" fill="rgb(226,81,46)" fg:x="914" fg:w="30"/><text x="2.0827%" y="1519.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (10 samples, 0.02%)</title><rect x="1.9029%" y="1493" width="0.0201%" height="15" fill="rgb(247,70,30)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1503.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (10 samples, 0.02%)</title><rect x="1.9029%" y="1477" width="0.0201%" height="15" fill="rgb(212,68,19)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1487.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="1.9029%" y="1461" width="0.0201%" height="15" fill="rgb(240,187,13)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1471.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.02%)</title><rect x="1.9029%" y="1445" width="0.0201%" height="15" fill="rgb(223,113,26)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.02%)</title><rect x="1.9029%" y="1429" width="0.0201%" height="15" fill="rgb(206,192,2)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.02%)</title><rect x="1.9029%" y="1413" width="0.0201%" height="15" fill="rgb(241,108,4)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.02%)</title><rect x="1.9029%" y="1397" width="0.0201%" height="15" fill="rgb(247,173,49)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1407.50"></text></g><g><title>__rdl_alloc (10 samples, 0.02%)</title><rect x="1.9029%" y="1381" width="0.0201%" height="15" fill="rgb(224,114,35)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1391.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.02%)</title><rect x="1.9029%" y="1365" width="0.0201%" height="15" fill="rgb(245,159,27)" fg:x="949" fg:w="10"/><text x="2.1529%" y="1375.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (41 samples, 0.08%)</title><rect x="1.8928%" y="1509" width="0.0822%" height="15" fill="rgb(245,172,44)" fg:x="944" fg:w="41"/><text x="2.1428%" y="1519.50"></text></g><g><title>core::fmt::Arguments::new_v1 (26 samples, 0.05%)</title><rect x="1.9229%" y="1493" width="0.0521%" height="15" fill="rgb(236,23,11)" fg:x="959" fg:w="26"/><text x="2.1729%" y="1503.50"></text></g><g><title>cfree (24 samples, 0.05%)</title><rect x="1.9791%" y="1509" width="0.0481%" height="15" fill="rgb(205,117,38)" fg:x="987" fg:w="24"/><text x="2.2291%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (7 samples, 0.01%)</title><rect x="2.0292%" y="1509" width="0.0140%" height="15" fill="rgb(237,72,25)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="2.0292%" y="1493" width="0.0140%" height="15" fill="rgb(244,70,9)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="2.0292%" y="1477" width="0.0140%" height="15" fill="rgb(217,125,39)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1487.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="2.0292%" y="1461" width="0.0140%" height="15" fill="rgb(235,36,10)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1471.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.01%)</title><rect x="2.0292%" y="1445" width="0.0140%" height="15" fill="rgb(251,123,47)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1455.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.01%)</title><rect x="2.0292%" y="1429" width="0.0140%" height="15" fill="rgb(221,13,13)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1439.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.01%)</title><rect x="2.0292%" y="1413" width="0.0140%" height="15" fill="rgb(238,131,9)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1423.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.01%)</title><rect x="2.0292%" y="1397" width="0.0140%" height="15" fill="rgb(211,50,8)" fg:x="1012" fg:w="7"/><text x="2.2792%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;::read_frame&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}::{{closure}},wisp_mux::WispError,wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (20 samples, 0.04%)</title><rect x="2.0432%" y="1509" width="0.0401%" height="15" fill="rgb(245,182,24)" fg:x="1019" fg:w="20"/><text x="2.2932%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;::{{closure}}&gt; (12 samples, 0.02%)</title><rect x="2.0833%" y="1509" width="0.0241%" height="15" fill="rgb(242,14,37)" fg:x="1039" fg:w="12"/><text x="2.3333%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (17 samples, 0.03%)</title><rect x="2.1074%" y="1509" width="0.0341%" height="15" fill="rgb(246,228,12)" fg:x="1051" fg:w="17"/><text x="2.3574%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::wisp_read_split::{{closure}}&gt; (105 samples, 0.21%)</title><rect x="2.1455%" y="1509" width="0.2105%" height="15" fill="rgb(213,55,15)" fg:x="1070" fg:w="105"/><text x="2.3955%" y="1519.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (8 samples, 0.02%)</title><rect x="2.3560%" y="1509" width="0.0160%" height="15" fill="rgb(209,9,3)" fg:x="1175" fg:w="8"/><text x="2.6060%" y="1519.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (9 samples, 0.02%)</title><rect x="2.3721%" y="1509" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="1183" fg:w="9"/><text x="2.6221%" y="1519.50"></text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (28 samples, 0.06%)</title><rect x="2.3901%" y="1509" width="0.0561%" height="15" fill="rgb(209,121,21)" fg:x="1192" fg:w="28"/><text x="2.6401%" y="1519.50"></text></g><g><title>fastwebsockets::ReadHalf::parse_frame_header::_{{closure}} (5 samples, 0.01%)</title><rect x="2.4362%" y="1493" width="0.0100%" height="15" fill="rgb(220,109,13)" fg:x="1215" fg:w="5"/><text x="2.6862%" y="1503.50"></text></g><g><title>fastwebsockets::frame::&lt;impl core::convert::From&lt;fastwebsockets::frame::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (11 samples, 0.02%)</title><rect x="2.4463%" y="1509" width="0.0221%" height="15" fill="rgb(232,18,1)" fg:x="1220" fg:w="11"/><text x="2.6963%" y="1519.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (9 samples, 0.02%)</title><rect x="2.4683%" y="1509" width="0.0180%" height="15" fill="rgb(215,41,42)" fg:x="1231" fg:w="9"/><text x="2.7183%" y="1519.50"></text></g><g><title>malloc (6 samples, 0.01%)</title><rect x="2.4944%" y="1509" width="0.0120%" height="15" fill="rgb(224,123,36)" fg:x="1244" fg:w="6"/><text x="2.7444%" y="1519.50"></text></g><g><title>syscall (34 samples, 0.07%)</title><rect x="2.5365%" y="1509" width="0.0682%" height="15" fill="rgb(240,125,3)" fg:x="1265" fg:w="34"/><text x="2.7865%" y="1519.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (24 samples, 0.05%)</title><rect x="2.6047%" y="1509" width="0.0481%" height="15" fill="rgb(205,98,50)" fg:x="1299" fg:w="24"/><text x="2.8547%" y="1519.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (6 samples, 0.01%)</title><rect x="2.6408%" y="1493" width="0.0120%" height="15" fill="rgb(205,185,37)" fg:x="1317" fg:w="6"/><text x="2.8908%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (20 samples, 0.04%)</title><rect x="2.6528%" y="1509" width="0.0401%" height="15" fill="rgb(238,207,15)" fg:x="1323" fg:w="20"/><text x="2.9028%" y="1519.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (31 samples, 0.06%)</title><rect x="2.6929%" y="1509" width="0.0622%" height="15" fill="rgb(213,199,42)" fg:x="1343" fg:w="31"/><text x="2.9429%" y="1519.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (6 samples, 0.01%)</title><rect x="2.7571%" y="1509" width="0.0120%" height="15" fill="rgb(235,201,11)" fg:x="1375" fg:w="6"/><text x="3.0071%" y="1519.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (5 samples, 0.01%)</title><rect x="2.8072%" y="1493" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1503.50"></text></g><g><title>tokio::runtime::context::budget (5 samples, 0.01%)</title><rect x="2.8072%" y="1477" width="0.0100%" height="15" fill="rgb(241,35,35)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1487.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.01%)</title><rect x="2.8072%" y="1461" width="0.0100%" height="15" fill="rgb(243,32,47)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1471.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (5 samples, 0.01%)</title><rect x="2.8072%" y="1445" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1455.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (5 samples, 0.01%)</title><rect x="2.8072%" y="1429" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1439.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (5 samples, 0.01%)</title><rect x="2.8072%" y="1413" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="1400" fg:w="5"/><text x="3.0572%" y="1423.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (23 samples, 0.05%)</title><rect x="2.7771%" y="1509" width="0.0461%" height="15" fill="rgb(222,74,54)" fg:x="1385" fg:w="23"/><text x="3.0271%" y="1519.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5 samples, 0.01%)</title><rect x="2.8232%" y="1509" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="1408" fg:w="5"/><text x="3.0732%" y="1519.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5 samples, 0.01%)</title><rect x="2.8333%" y="1509" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="1413" fg:w="5"/><text x="3.0833%" y="1519.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (23 samples, 0.05%)</title><rect x="2.8433%" y="1509" width="0.0461%" height="15" fill="rgb(217,163,10)" fg:x="1418" fg:w="23"/><text x="3.0933%" y="1519.50"></text></g><g><title>tokio::runtime::coop::budget (20 samples, 0.04%)</title><rect x="2.8493%" y="1493" width="0.0401%" height="15" fill="rgb(213,25,53)" fg:x="1421" fg:w="20"/><text x="3.0993%" y="1503.50"></text></g><g><title>tokio::runtime::coop::with_budget (20 samples, 0.04%)</title><rect x="2.8493%" y="1477" width="0.0401%" height="15" fill="rgb(252,105,26)" fg:x="1421" fg:w="20"/><text x="3.0993%" y="1487.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (20 samples, 0.04%)</title><rect x="2.8493%" y="1461" width="0.0401%" height="15" fill="rgb(220,39,43)" fg:x="1421" fg:w="20"/><text x="3.0993%" y="1471.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (20 samples, 0.04%)</title><rect x="2.8493%" y="1445" width="0.0401%" height="15" fill="rgb(229,68,48)" fg:x="1421" fg:w="20"/><text x="3.0993%" y="1455.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (20 samples, 0.04%)</title><rect x="2.8493%" y="1429" width="0.0401%" height="15" fill="rgb(252,8,32)" fg:x="1421" fg:w="20"/><text x="3.0993%" y="1439.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.02%)</title><rect x="2.9034%" y="1509" width="0.0160%" height="15" fill="rgb(223,20,43)" fg:x="1448" fg:w="8"/><text x="3.1534%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (8 samples, 0.02%)</title><rect x="2.9034%" y="1493" width="0.0160%" height="15" fill="rgb(229,81,49)" fg:x="1448" fg:w="8"/><text x="3.1534%" y="1503.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (7 samples, 0.01%)</title><rect x="2.9054%" y="1477" width="0.0140%" height="15" fill="rgb(236,28,36)" fg:x="1449" fg:w="7"/><text x="3.1554%" y="1487.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (7 samples, 0.01%)</title><rect x="2.9054%" y="1461" width="0.0140%" height="15" fill="rgb(249,185,26)" fg:x="1449" fg:w="7"/><text x="3.1554%" y="1471.50"></text></g><g><title>tokio::runtime::task::state::State::load (7 samples, 0.01%)</title><rect x="2.9054%" y="1445" width="0.0140%" height="15" fill="rgb(249,174,33)" fg:x="1449" fg:w="7"/><text x="3.1554%" y="1455.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.01%)</title><rect x="2.9054%" y="1429" width="0.0140%" height="15" fill="rgb(233,201,37)" fg:x="1449" fg:w="7"/><text x="3.1554%" y="1439.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.01%)</title><rect x="2.9054%" y="1413" width="0.0140%" height="15" fill="rgb(221,78,26)" fg:x="1449" fg:w="7"/><text x="3.1554%" y="1423.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.01%)</title><rect x="2.9195%" y="1509" width="0.0100%" height="15" fill="rgb(250,127,30)" fg:x="1456" fg:w="5"/><text x="3.1695%" y="1519.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (36 samples, 0.07%)</title><rect x="2.9295%" y="1509" width="0.0722%" height="15" fill="rgb(230,49,44)" fg:x="1461" fg:w="36"/><text x="3.1795%" y="1519.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (29 samples, 0.06%)</title><rect x="3.0017%" y="1509" width="0.0581%" height="15" fill="rgb(229,67,23)" fg:x="1497" fg:w="29"/><text x="3.2517%" y="1519.50"></text></g><g><title>[anon] (895 samples, 1.79%)</title><rect x="1.4477%" y="1525" width="1.7946%" height="15" fill="rgb(249,83,47)" fg:x="722" fg:w="895"/><text x="1.6977%" y="1535.50">[..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (91 samples, 0.18%)</title><rect x="3.0598%" y="1509" width="0.1825%" height="15" fill="rgb(215,43,3)" fg:x="1526" fg:w="91"/><text x="3.3098%" y="1519.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (16 samples, 0.03%)</title><rect x="3.2563%" y="1285" width="0.0321%" height="15" fill="rgb(238,154,13)" fg:x="1624" fg:w="16"/><text x="3.5063%" y="1295.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (16 samples, 0.03%)</title><rect x="3.2563%" y="1269" width="0.0321%" height="15" fill="rgb(219,56,2)" fg:x="1624" fg:w="16"/><text x="3.5063%" y="1279.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (16 samples, 0.03%)</title><rect x="3.2563%" y="1253" width="0.0321%" height="15" fill="rgb(233,0,4)" fg:x="1624" fg:w="16"/><text x="3.5063%" y="1263.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.03%)</title><rect x="3.2583%" y="1237" width="0.0301%" height="15" fill="rgb(235,30,7)" fg:x="1625" fg:w="15"/><text x="3.5083%" y="1247.50"></text></g><g><title>parking_lot_core::parking_lot::park (15 samples, 0.03%)</title><rect x="3.2583%" y="1221" width="0.0301%" height="15" fill="rgb(250,79,13)" fg:x="1625" fg:w="15"/><text x="3.5083%" y="1231.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (15 samples, 0.03%)</title><rect x="3.2583%" y="1205" width="0.0301%" height="15" fill="rgb(211,146,34)" fg:x="1625" fg:w="15"/><text x="3.5083%" y="1215.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (15 samples, 0.03%)</title><rect x="3.2583%" y="1189" width="0.0301%" height="15" fill="rgb(228,22,38)" fg:x="1625" fg:w="15"/><text x="3.5083%" y="1199.50"></text></g><g><title>__floattidf (6 samples, 0.01%)</title><rect x="3.3686%" y="837" width="0.0120%" height="15" fill="rgb(235,168,5)" fg:x="1680" fg:w="6"/><text x="3.6186%" y="847.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (6 samples, 0.01%)</title><rect x="3.3686%" y="821" width="0.0120%" height="15" fill="rgb(221,155,16)" fg:x="1680" fg:w="6"/><text x="3.6186%" y="831.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (6 samples, 0.01%)</title><rect x="3.3686%" y="805" width="0.0120%" height="15" fill="rgb(215,215,53)" fg:x="1680" fg:w="6"/><text x="3.6186%" y="815.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (102 samples, 0.20%)</title><rect x="3.3807%" y="837" width="0.2045%" height="15" fill="rgb(223,4,10)" fg:x="1686" fg:w="102"/><text x="3.6307%" y="847.50"></text></g><g><title>pow (101 samples, 0.20%)</title><rect x="3.3827%" y="821" width="0.2025%" height="15" fill="rgb(234,103,6)" fg:x="1687" fg:w="101"/><text x="3.6327%" y="831.50"></text></g><g><title>[libm.so.6] (71 samples, 0.14%)</title><rect x="3.4428%" y="805" width="0.1424%" height="15" fill="rgb(227,97,0)" fg:x="1717" fg:w="71"/><text x="3.6928%" y="815.50"></text></g><g><title>clock_gettime (33 samples, 0.07%)</title><rect x="3.5892%" y="821" width="0.0662%" height="15" fill="rgb(234,150,53)" fg:x="1790" fg:w="33"/><text x="3.8392%" y="831.50"></text></g><g><title>__vdso_clock_gettime (16 samples, 0.03%)</title><rect x="3.6233%" y="805" width="0.0321%" height="15" fill="rgb(228,201,54)" fg:x="1807" fg:w="16"/><text x="3.8733%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (162 samples, 0.32%)</title><rect x="3.3325%" y="853" width="0.3248%" height="15" fill="rgb(222,22,37)" fg:x="1662" fg:w="162"/><text x="3.5825%" y="863.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (36 samples, 0.07%)</title><rect x="3.5852%" y="837" width="0.0722%" height="15" fill="rgb(237,53,32)" fg:x="1788" fg:w="36"/><text x="3.8352%" y="847.50"></text></g><g><title>clock_gettime (67 samples, 0.13%)</title><rect x="3.6674%" y="821" width="0.1343%" height="15" fill="rgb(233,25,53)" fg:x="1829" fg:w="67"/><text x="3.9174%" y="831.50"></text></g><g><title>__vdso_clock_gettime (41 samples, 0.08%)</title><rect x="3.7195%" y="805" width="0.0822%" height="15" fill="rgb(210,40,34)" fg:x="1855" fg:w="41"/><text x="3.9695%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (75 samples, 0.15%)</title><rect x="3.6574%" y="853" width="0.1504%" height="15" fill="rgb(241,220,44)" fg:x="1824" fg:w="75"/><text x="3.9074%" y="863.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (74 samples, 0.15%)</title><rect x="3.6594%" y="837" width="0.1484%" height="15" fill="rgb(235,28,35)" fg:x="1825" fg:w="74"/><text x="3.9094%" y="847.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.02%)</title><rect x="3.8358%" y="805" width="0.0180%" height="15" fill="rgb(210,56,17)" fg:x="1913" fg:w="9"/><text x="4.0858%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (25 samples, 0.05%)</title><rect x="3.8077%" y="853" width="0.0501%" height="15" fill="rgb(224,130,29)" fg:x="1899" fg:w="25"/><text x="4.0577%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (11 samples, 0.02%)</title><rect x="3.8358%" y="837" width="0.0221%" height="15" fill="rgb(235,212,8)" fg:x="1913" fg:w="11"/><text x="4.0858%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (11 samples, 0.02%)</title><rect x="3.8358%" y="821" width="0.0221%" height="15" fill="rgb(223,33,50)" fg:x="1913" fg:w="11"/><text x="4.0858%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.03%)</title><rect x="4.0283%" y="837" width="0.0281%" height="15" fill="rgb(219,149,13)" fg:x="2009" fg:w="14"/><text x="4.2783%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (14 samples, 0.03%)</title><rect x="4.0283%" y="821" width="0.0281%" height="15" fill="rgb(250,156,29)" fg:x="2009" fg:w="14"/><text x="4.2783%" y="831.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (14 samples, 0.03%)</title><rect x="4.0283%" y="805" width="0.0281%" height="15" fill="rgb(216,193,19)" fg:x="2009" fg:w="14"/><text x="4.2783%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (6 samples, 0.01%)</title><rect x="4.2088%" y="821" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="2099" fg:w="6"/><text x="4.4588%" y="831.50"></text></g><g><title>core::mem::replace (6 samples, 0.01%)</title><rect x="4.2088%" y="805" width="0.0120%" height="15" fill="rgb(241,47,5)" fg:x="2099" fg:w="6"/><text x="4.4588%" y="815.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.01%)</title><rect x="4.2308%" y="805" width="0.0120%" height="15" fill="rgb(233,42,35)" fg:x="2110" fg:w="6"/><text x="4.4808%" y="815.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.01%)</title><rect x="4.2308%" y="789" width="0.0120%" height="15" fill="rgb(231,13,6)" fg:x="2110" fg:w="6"/><text x="4.4808%" y="799.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.01%)</title><rect x="4.2308%" y="773" width="0.0120%" height="15" fill="rgb(207,181,40)" fg:x="2110" fg:w="6"/><text x="4.4808%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::wake (10 samples, 0.02%)</title><rect x="4.2288%" y="821" width="0.0201%" height="15" fill="rgb(254,173,49)" fg:x="2109" fg:w="10"/><text x="4.4788%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.07%)</title><rect x="4.2589%" y="789" width="0.0682%" height="15" fill="rgb(221,1,38)" fg:x="2124" fg:w="34"/><text x="4.5089%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.07%)</title><rect x="4.2589%" y="773" width="0.0682%" height="15" fill="rgb(206,124,46)" fg:x="2124" fg:w="34"/><text x="4.5089%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;()&gt;&gt; (8 samples, 0.02%)</title><rect x="4.3271%" y="773" width="0.0160%" height="15" fill="rgb(249,21,11)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (8 samples, 0.02%)</title><rect x="4.3271%" y="757" width="0.0160%" height="15" fill="rgb(222,201,40)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="4.3271%" y="741" width="0.0160%" height="15" fill="rgb(235,61,29)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.02%)</title><rect x="4.3271%" y="725" width="0.0160%" height="15" fill="rgb(219,207,3)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (8 samples, 0.02%)</title><rect x="4.3271%" y="709" width="0.0160%" height="15" fill="rgb(222,56,46)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.02%)</title><rect x="4.3271%" y="693" width="0.0160%" height="15" fill="rgb(239,76,54)" fg:x="2158" fg:w="8"/><text x="4.5771%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.05%)</title><rect x="4.3431%" y="773" width="0.0461%" height="15" fill="rgb(231,124,27)" fg:x="2166" fg:w="23"/><text x="4.5931%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.05%)</title><rect x="4.3431%" y="757" width="0.0461%" height="15" fill="rgb(249,195,6)" fg:x="2166" fg:w="23"/><text x="4.5931%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (36 samples, 0.07%)</title><rect x="4.3892%" y="725" width="0.0722%" height="15" fill="rgb(237,174,47)" fg:x="2189" fg:w="36"/><text x="4.6392%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (36 samples, 0.07%)</title><rect x="4.3892%" y="709" width="0.0722%" height="15" fill="rgb(206,201,31)" fg:x="2189" fg:w="36"/><text x="4.6392%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (36 samples, 0.07%)</title><rect x="4.3892%" y="693" width="0.0722%" height="15" fill="rgb(231,57,52)" fg:x="2189" fg:w="36"/><text x="4.6392%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (75 samples, 0.15%)</title><rect x="4.5236%" y="661" width="0.1504%" height="15" fill="rgb(248,177,22)" fg:x="2256" fg:w="75"/><text x="4.7736%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (75 samples, 0.15%)</title><rect x="4.5236%" y="645" width="0.1504%" height="15" fill="rgb(215,211,37)" fg:x="2256" fg:w="75"/><text x="4.7736%" y="655.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (128 samples, 0.26%)</title><rect x="4.4815%" y="677" width="0.2567%" height="15" fill="rgb(241,128,51)" fg:x="2235" fg:w="128"/><text x="4.7315%" y="687.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (32 samples, 0.06%)</title><rect x="4.6740%" y="661" width="0.0642%" height="15" fill="rgb(227,165,31)" fg:x="2331" fg:w="32"/><text x="4.9240%" y="671.50"></text></g><g><title>syscall (32 samples, 0.06%)</title><rect x="4.6740%" y="645" width="0.0642%" height="15" fill="rgb(228,167,24)" fg:x="2331" fg:w="32"/><text x="4.9240%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.01%)</title><rect x="4.7421%" y="677" width="0.0100%" height="15" fill="rgb(228,143,12)" fg:x="2365" fg:w="5"/><text x="4.9921%" y="687.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::_{{closure}} (5 samples, 0.01%)</title><rect x="4.7421%" y="661" width="0.0100%" height="15" fill="rgb(249,149,8)" fg:x="2365" fg:w="5"/><text x="4.9921%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (5 samples, 0.01%)</title><rect x="4.7421%" y="645" width="0.0100%" height="15" fill="rgb(243,35,44)" fg:x="2365" fg:w="5"/><text x="4.9921%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (5 samples, 0.01%)</title><rect x="4.7421%" y="629" width="0.0100%" height="15" fill="rgb(246,89,9)" fg:x="2365" fg:w="5"/><text x="4.9921%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.01%)</title><rect x="4.7421%" y="613" width="0.0100%" height="15" fill="rgb(233,213,13)" fg:x="2365" fg:w="5"/><text x="4.9921%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::hash (8 samples, 0.02%)</title><rect x="4.7522%" y="661" width="0.0160%" height="15" fill="rgb(233,141,41)" fg:x="2370" fg:w="8"/><text x="5.0022%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (34 samples, 0.07%)</title><rect x="4.7522%" y="677" width="0.0682%" height="15" fill="rgb(239,167,4)" fg:x="2370" fg:w="34"/><text x="5.0022%" y="687.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (26 samples, 0.05%)</title><rect x="4.7682%" y="661" width="0.0521%" height="15" fill="rgb(209,217,16)" fg:x="2378" fg:w="26"/><text x="5.0182%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (25 samples, 0.05%)</title><rect x="4.7702%" y="645" width="0.0501%" height="15" fill="rgb(219,88,35)" fg:x="2379" fg:w="25"/><text x="5.0202%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.05%)</title><rect x="4.7702%" y="629" width="0.0501%" height="15" fill="rgb(220,193,23)" fg:x="2379" fg:w="25"/><text x="5.0202%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (173 samples, 0.35%)</title><rect x="4.4815%" y="693" width="0.3469%" height="15" fill="rgb(230,90,52)" fg:x="2235" fg:w="173"/><text x="4.7315%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (222 samples, 0.45%)</title><rect x="4.3892%" y="773" width="0.4451%" height="15" fill="rgb(252,106,19)" fg:x="2189" fg:w="222"/><text x="4.6392%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (222 samples, 0.45%)</title><rect x="4.3892%" y="757" width="0.4451%" height="15" fill="rgb(206,74,20)" fg:x="2189" fg:w="222"/><text x="4.6392%" y="767.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (222 samples, 0.45%)</title><rect x="4.3892%" y="741" width="0.4451%" height="15" fill="rgb(230,138,44)" fg:x="2189" fg:w="222"/><text x="4.6392%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::park (186 samples, 0.37%)</title><rect x="4.4614%" y="725" width="0.3730%" height="15" fill="rgb(235,182,43)" fg:x="2225" fg:w="186"/><text x="4.7114%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (186 samples, 0.37%)</title><rect x="4.4614%" y="709" width="0.3730%" height="15" fill="rgb(242,16,51)" fg:x="2225" fg:w="186"/><text x="4.7114%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (260 samples, 0.52%)</title><rect x="4.3271%" y="789" width="0.5213%" height="15" fill="rgb(248,9,4)" fg:x="2158" fg:w="260"/><text x="4.5771%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (7 samples, 0.01%)</title><rect x="4.8344%" y="773" width="0.0140%" height="15" fill="rgb(210,31,22)" fg:x="2411" fg:w="7"/><text x="5.0844%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.01%)</title><rect x="4.8364%" y="757" width="0.0120%" height="15" fill="rgb(239,54,39)" fg:x="2412" fg:w="6"/><text x="5.0864%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.01%)</title><rect x="4.8364%" y="741" width="0.0120%" height="15" fill="rgb(230,99,41)" fg:x="2412" fg:w="6"/><text x="5.0864%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (6 samples, 0.01%)</title><rect x="4.8364%" y="725" width="0.0120%" height="15" fill="rgb(253,106,12)" fg:x="2412" fg:w="6"/><text x="5.0864%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.01%)</title><rect x="4.8364%" y="709" width="0.0120%" height="15" fill="rgb(213,46,41)" fg:x="2412" fg:w="6"/><text x="5.0864%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (24 samples, 0.05%)</title><rect x="4.9547%" y="773" width="0.0481%" height="15" fill="rgb(215,133,35)" fg:x="2471" fg:w="24"/><text x="5.2047%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.05%)</title><rect x="4.9547%" y="757" width="0.0481%" height="15" fill="rgb(213,28,5)" fg:x="2471" fg:w="24"/><text x="5.2047%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (83 samples, 0.17%)</title><rect x="5.0028%" y="773" width="0.1664%" height="15" fill="rgb(215,77,49)" fg:x="2495" fg:w="83"/><text x="5.2528%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (83 samples, 0.17%)</title><rect x="5.0028%" y="757" width="0.1664%" height="15" fill="rgb(248,100,22)" fg:x="2495" fg:w="83"/><text x="5.2528%" y="767.50"></text></g><g><title>tokio::runtime::driver::Driver::park (15 samples, 0.03%)</title><rect x="5.1692%" y="773" width="0.0301%" height="15" fill="rgb(208,67,9)" fg:x="2578" fg:w="15"/><text x="5.4192%" y="783.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (15 samples, 0.03%)</title><rect x="5.1692%" y="757" width="0.0301%" height="15" fill="rgb(219,133,21)" fg:x="2578" fg:w="15"/><text x="5.4192%" y="767.50"></text></g><g><title>tokio::runtime::time::Driver::park (5 samples, 0.01%)</title><rect x="5.1893%" y="741" width="0.0100%" height="15" fill="rgb(246,46,29)" fg:x="2588" fg:w="5"/><text x="5.4393%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.01%)</title><rect x="5.2675%" y="597" width="0.0140%" height="15" fill="rgb(246,185,52)" fg:x="2627" fg:w="7"/><text x="5.5175%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7 samples, 0.01%)</title><rect x="5.2675%" y="581" width="0.0140%" height="15" fill="rgb(252,136,11)" fg:x="2627" fg:w="7"/><text x="5.5175%" y="591.50"></text></g><g><title>core::ptr::write (7 samples, 0.01%)</title><rect x="5.2675%" y="565" width="0.0140%" height="15" fill="rgb(219,138,53)" fg:x="2627" fg:w="7"/><text x="5.5175%" y="575.50"></text></g><g><title>tokio::runtime::driver::Handle::time (8 samples, 0.02%)</title><rect x="5.2815%" y="581" width="0.0160%" height="15" fill="rgb(211,51,23)" fg:x="2634" fg:w="8"/><text x="5.5315%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (8 samples, 0.02%)</title><rect x="5.2815%" y="565" width="0.0160%" height="15" fill="rgb(247,221,28)" fg:x="2634" fg:w="8"/><text x="5.5315%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="5.4239%" y="565" width="0.0100%" height="15" fill="rgb(251,222,45)" fg:x="2705" fg:w="5"/><text x="5.6739%" y="575.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="5.4239%" y="549" width="0.0100%" height="15" fill="rgb(217,162,53)" fg:x="2705" fg:w="5"/><text x="5.6739%" y="559.50"></text></g><g><title>core::slice::index::get_noubcheck (5 samples, 0.01%)</title><rect x="5.4239%" y="533" width="0.0100%" height="15" fill="rgb(229,93,14)" fg:x="2705" fg:w="5"/><text x="5.6739%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (5 samples, 0.01%)</title><rect x="5.4339%" y="517" width="0.0100%" height="15" fill="rgb(209,67,49)" fg:x="2710" fg:w="5"/><text x="5.6839%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (5 samples, 0.01%)</title><rect x="5.4339%" y="501" width="0.0100%" height="15" fill="rgb(213,87,29)" fg:x="2710" fg:w="5"/><text x="5.6839%" y="511.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (475 samples, 0.95%)</title><rect x="5.2675%" y="613" width="0.9524%" height="15" fill="rgb(205,151,52)" fg:x="2627" fg:w="475"/><text x="5.5175%" y="623.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (468 samples, 0.94%)</title><rect x="5.2815%" y="597" width="0.9384%" height="15" fill="rgb(253,215,39)" fg:x="2634" fg:w="468"/><text x="5.5315%" y="607.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (460 samples, 0.92%)</title><rect x="5.2976%" y="581" width="0.9224%" height="15" fill="rgb(221,220,41)" fg:x="2642" fg:w="460"/><text x="5.5476%" y="591.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (392 samples, 0.79%)</title><rect x="5.4339%" y="565" width="0.7860%" height="15" fill="rgb(218,133,21)" fg:x="2710" fg:w="392"/><text x="5.6839%" y="575.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (392 samples, 0.79%)</title><rect x="5.4339%" y="549" width="0.7860%" height="15" fill="rgb(221,193,43)" fg:x="2710" fg:w="392"/><text x="5.6839%" y="559.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (392 samples, 0.79%)</title><rect x="5.4339%" y="533" width="0.7860%" height="15" fill="rgb(240,128,52)" fg:x="2710" fg:w="392"/><text x="5.6839%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (387 samples, 0.78%)</title><rect x="5.4439%" y="517" width="0.7760%" height="15" fill="rgb(253,114,12)" fg:x="2715" fg:w="387"/><text x="5.6939%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (387 samples, 0.78%)</title><rect x="5.4439%" y="501" width="0.7760%" height="15" fill="rgb(215,223,47)" fg:x="2715" fg:w="387"/><text x="5.6939%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (489 samples, 0.98%)</title><rect x="5.2675%" y="693" width="0.9805%" height="15" fill="rgb(248,225,23)" fg:x="2627" fg:w="489"/><text x="5.5175%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (489 samples, 0.98%)</title><rect x="5.2675%" y="677" width="0.9805%" height="15" fill="rgb(250,108,0)" fg:x="2627" fg:w="489"/><text x="5.5175%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (489 samples, 0.98%)</title><rect x="5.2675%" y="661" width="0.9805%" height="15" fill="rgb(228,208,7)" fg:x="2627" fg:w="489"/><text x="5.5175%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (489 samples, 0.98%)</title><rect x="5.2675%" y="645" width="0.9805%" height="15" fill="rgb(244,45,10)" fg:x="2627" fg:w="489"/><text x="5.5175%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (489 samples, 0.98%)</title><rect x="5.2675%" y="629" width="0.9805%" height="15" fill="rgb(207,125,25)" fg:x="2627" fg:w="489"/><text x="5.5175%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.03%)</title><rect x="6.2199%" y="613" width="0.0281%" height="15" fill="rgb(210,195,18)" fg:x="3102" fg:w="14"/><text x="6.4699%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 0.03%)</title><rect x="6.2199%" y="597" width="0.0281%" height="15" fill="rgb(249,80,12)" fg:x="3102" fg:w="14"/><text x="6.4699%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (8 samples, 0.02%)</title><rect x="6.2320%" y="581" width="0.0160%" height="15" fill="rgb(221,65,9)" fg:x="3108" fg:w="8"/><text x="6.4820%" y="591.50"></text></g><g><title>__rdl_alloc (160 samples, 0.32%)</title><rect x="6.2620%" y="581" width="0.3208%" height="15" fill="rgb(235,49,36)" fg:x="3123" fg:w="160"/><text x="6.5120%" y="591.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (160 samples, 0.32%)</title><rect x="6.2620%" y="565" width="0.3208%" height="15" fill="rgb(225,32,20)" fg:x="3123" fg:w="160"/><text x="6.5120%" y="575.50"></text></g><g><title>malloc (160 samples, 0.32%)</title><rect x="6.2620%" y="549" width="0.3208%" height="15" fill="rgb(215,141,46)" fg:x="3123" fg:w="160"/><text x="6.5120%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (665 samples, 1.33%)</title><rect x="5.2555%" y="757" width="1.3334%" height="15" fill="rgb(250,160,47)" fg:x="2621" fg:w="665"/><text x="5.5055%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (665 samples, 1.33%)</title><rect x="5.2555%" y="741" width="1.3334%" height="15" fill="rgb(216,222,40)" fg:x="2621" fg:w="665"/><text x="5.5055%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (665 samples, 1.33%)</title><rect x="5.2555%" y="725" width="1.3334%" height="15" fill="rgb(234,217,39)" fg:x="2621" fg:w="665"/><text x="5.5055%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (665 samples, 1.33%)</title><rect x="5.2555%" y="709" width="1.3334%" height="15" fill="rgb(207,178,40)" fg:x="2621" fg:w="665"/><text x="5.5055%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (170 samples, 0.34%)</title><rect x="6.2480%" y="693" width="0.3409%" height="15" fill="rgb(221,136,13)" fg:x="3116" fg:w="170"/><text x="6.4980%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (170 samples, 0.34%)</title><rect x="6.2480%" y="677" width="0.3409%" height="15" fill="rgb(249,199,10)" fg:x="3116" fg:w="170"/><text x="6.4980%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (170 samples, 0.34%)</title><rect x="6.2480%" y="661" width="0.3409%" height="15" fill="rgb(249,222,13)" fg:x="3116" fg:w="170"/><text x="6.4980%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (170 samples, 0.34%)</title><rect x="6.2480%" y="645" width="0.3409%" height="15" fill="rgb(244,185,38)" fg:x="3116" fg:w="170"/><text x="6.4980%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (163 samples, 0.33%)</title><rect x="6.2620%" y="629" width="0.3268%" height="15" fill="rgb(236,202,9)" fg:x="3123" fg:w="163"/><text x="6.5120%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (163 samples, 0.33%)</title><rect x="6.2620%" y="613" width="0.3268%" height="15" fill="rgb(250,229,37)" fg:x="3123" fg:w="163"/><text x="6.5120%" y="623.50"></text></g><g><title>alloc::alloc::alloc (163 samples, 0.33%)</title><rect x="6.2620%" y="597" width="0.3268%" height="15" fill="rgb(206,174,23)" fg:x="3123" fg:w="163"/><text x="6.5120%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.02%)</title><rect x="6.6771%" y="629" width="0.0201%" height="15" fill="rgb(211,33,43)" fg:x="3330" fg:w="10"/><text x="6.9271%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.09%)</title><rect x="7.1202%" y="613" width="0.0902%" height="15" fill="rgb(245,58,50)" fg:x="3551" fg:w="45"/><text x="7.3702%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.09%)</title><rect x="7.1202%" y="597" width="0.0902%" height="15" fill="rgb(244,68,36)" fg:x="3551" fg:w="45"/><text x="7.3702%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (28 samples, 0.06%)</title><rect x="7.1543%" y="581" width="0.0561%" height="15" fill="rgb(232,229,15)" fg:x="3568" fg:w="28"/><text x="7.4043%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (108 samples, 0.22%)</title><rect x="7.2105%" y="613" width="0.2166%" height="15" fill="rgb(254,30,23)" fg:x="3596" fg:w="108"/><text x="7.4605%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (95 samples, 0.19%)</title><rect x="7.2365%" y="597" width="0.1905%" height="15" fill="rgb(235,160,14)" fg:x="3609" fg:w="95"/><text x="7.4865%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (8 samples, 0.02%)</title><rect x="7.4110%" y="581" width="0.0160%" height="15" fill="rgb(212,155,44)" fg:x="3696" fg:w="8"/><text x="7.6610%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (8 samples, 0.02%)</title><rect x="7.4110%" y="565" width="0.0160%" height="15" fill="rgb(226,2,50)" fg:x="3696" fg:w="8"/><text x="7.6610%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (12 samples, 0.02%)</title><rect x="7.4270%" y="597" width="0.0241%" height="15" fill="rgb(234,177,6)" fg:x="3704" fg:w="12"/><text x="7.6770%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (12 samples, 0.02%)</title><rect x="7.4270%" y="581" width="0.0241%" height="15" fill="rgb(217,24,9)" fg:x="3704" fg:w="12"/><text x="7.6770%" y="591.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (411 samples, 0.82%)</title><rect x="6.6350%" y="677" width="0.8241%" height="15" fill="rgb(220,13,46)" fg:x="3309" fg:w="411"/><text x="6.8850%" y="687.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (397 samples, 0.80%)</title><rect x="6.6631%" y="661" width="0.7960%" height="15" fill="rgb(239,221,27)" fg:x="3323" fg:w="397"/><text x="6.9131%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (393 samples, 0.79%)</title><rect x="6.6711%" y="645" width="0.7880%" height="15" fill="rgb(222,198,25)" fg:x="3327" fg:w="393"/><text x="6.9211%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (380 samples, 0.76%)</title><rect x="6.6971%" y="629" width="0.7620%" height="15" fill="rgb(211,99,13)" fg:x="3340" fg:w="380"/><text x="6.9471%" y="639.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (16 samples, 0.03%)</title><rect x="7.4270%" y="613" width="0.0321%" height="15" fill="rgb(232,111,31)" fg:x="3704" fg:w="16"/><text x="7.6770%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (440 samples, 0.88%)</title><rect x="6.5909%" y="709" width="0.8823%" height="15" fill="rgb(245,82,37)" fg:x="3287" fg:w="440"/><text x="6.8409%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (440 samples, 0.88%)</title><rect x="6.5909%" y="693" width="0.8823%" height="15" fill="rgb(227,149,46)" fg:x="3287" fg:w="440"/><text x="6.8409%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (7 samples, 0.01%)</title><rect x="7.4591%" y="677" width="0.0140%" height="15" fill="rgb(218,36,50)" fg:x="3720" fg:w="7"/><text x="7.7091%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (8 samples, 0.02%)</title><rect x="7.5112%" y="597" width="0.0160%" height="15" fill="rgb(226,80,48)" fg:x="3746" fg:w="8"/><text x="7.7612%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::level_range (6 samples, 0.01%)</title><rect x="7.5273%" y="597" width="0.0120%" height="15" fill="rgb(238,224,15)" fg:x="3754" fg:w="6"/><text x="7.7773%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (6 samples, 0.01%)</title><rect x="7.5273%" y="581" width="0.0120%" height="15" fill="rgb(241,136,10)" fg:x="3754" fg:w="6"/><text x="7.7773%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (6 samples, 0.01%)</title><rect x="7.5273%" y="565" width="0.0120%" height="15" fill="rgb(208,32,45)" fg:x="3754" fg:w="6"/><text x="7.7773%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (481 samples, 0.96%)</title><rect x="6.5889%" y="757" width="0.9645%" height="15" fill="rgb(207,135,9)" fg:x="3286" fg:w="481"/><text x="6.8389%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (481 samples, 0.96%)</title><rect x="6.5889%" y="741" width="0.9645%" height="15" fill="rgb(206,86,44)" fg:x="3286" fg:w="481"/><text x="6.8389%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (481 samples, 0.96%)</title><rect x="6.5889%" y="725" width="0.9645%" height="15" fill="rgb(245,177,15)" fg:x="3286" fg:w="481"/><text x="6.8389%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.08%)</title><rect x="7.4731%" y="709" width="0.0802%" height="15" fill="rgb(206,64,50)" fg:x="3727" fg:w="40"/><text x="7.7231%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (40 samples, 0.08%)</title><rect x="7.4731%" y="693" width="0.0802%" height="15" fill="rgb(234,36,40)" fg:x="3727" fg:w="40"/><text x="7.7231%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (37 samples, 0.07%)</title><rect x="7.4791%" y="677" width="0.0742%" height="15" fill="rgb(213,64,8)" fg:x="3730" fg:w="37"/><text x="7.7291%" y="687.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (37 samples, 0.07%)</title><rect x="7.4791%" y="661" width="0.0742%" height="15" fill="rgb(210,75,36)" fg:x="3730" fg:w="37"/><text x="7.7291%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (37 samples, 0.07%)</title><rect x="7.4791%" y="645" width="0.0742%" height="15" fill="rgb(229,88,21)" fg:x="3730" fg:w="37"/><text x="7.7291%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (36 samples, 0.07%)</title><rect x="7.4812%" y="629" width="0.0722%" height="15" fill="rgb(252,204,47)" fg:x="3731" fg:w="36"/><text x="7.7312%" y="639.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (24 samples, 0.05%)</title><rect x="7.5052%" y="613" width="0.0481%" height="15" fill="rgb(208,77,27)" fg:x="3743" fg:w="24"/><text x="7.7552%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (7 samples, 0.01%)</title><rect x="7.5393%" y="597" width="0.0140%" height="15" fill="rgb(221,76,26)" fg:x="3760" fg:w="7"/><text x="7.7893%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (7 samples, 0.01%)</title><rect x="7.5393%" y="581" width="0.0140%" height="15" fill="rgb(225,139,18)" fg:x="3760" fg:w="7"/><text x="7.7893%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (9 samples, 0.02%)</title><rect x="7.6135%" y="629" width="0.0180%" height="15" fill="rgb(230,137,11)" fg:x="3797" fg:w="9"/><text x="7.8635%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (417 samples, 0.84%)</title><rect x="7.5533%" y="725" width="0.8361%" height="15" fill="rgb(212,28,1)" fg:x="3767" fg:w="417"/><text x="7.8033%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;]&gt; (417 samples, 0.84%)</title><rect x="7.5533%" y="709" width="0.8361%" height="15" fill="rgb(248,164,17)" fg:x="3767" fg:w="417"/><text x="7.8033%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (387 samples, 0.78%)</title><rect x="7.6135%" y="693" width="0.7760%" height="15" fill="rgb(222,171,42)" fg:x="3797" fg:w="387"/><text x="7.8635%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (387 samples, 0.78%)</title><rect x="7.6135%" y="677" width="0.7760%" height="15" fill="rgb(243,84,45)" fg:x="3797" fg:w="387"/><text x="7.8635%" y="687.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (387 samples, 0.78%)</title><rect x="7.6135%" y="661" width="0.7760%" height="15" fill="rgb(252,49,23)" fg:x="3797" fg:w="387"/><text x="7.8635%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (387 samples, 0.78%)</title><rect x="7.6135%" y="645" width="0.7760%" height="15" fill="rgb(215,19,7)" fg:x="3797" fg:w="387"/><text x="7.8635%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (378 samples, 0.76%)</title><rect x="7.6315%" y="629" width="0.7579%" height="15" fill="rgb(238,81,41)" fg:x="3806" fg:w="378"/><text x="7.8815%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (378 samples, 0.76%)</title><rect x="7.6315%" y="613" width="0.7579%" height="15" fill="rgb(210,199,37)" fg:x="3806" fg:w="378"/><text x="7.8815%" y="623.50"></text></g><g><title>core::mem::drop (459 samples, 0.92%)</title><rect x="7.5533%" y="757" width="0.9204%" height="15" fill="rgb(244,192,49)" fg:x="3767" fg:w="459"/><text x="7.8033%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (459 samples, 0.92%)</title><rect x="7.5533%" y="741" width="0.9204%" height="15" fill="rgb(226,211,11)" fg:x="3767" fg:w="459"/><text x="7.8033%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (42 samples, 0.08%)</title><rect x="8.3895%" y="725" width="0.0842%" height="15" fill="rgb(236,162,54)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.08%)</title><rect x="8.3895%" y="709" width="0.0842%" height="15" fill="rgb(220,229,9)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.08%)</title><rect x="8.3895%" y="693" width="0.0842%" height="15" fill="rgb(250,87,22)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.08%)</title><rect x="8.3895%" y="677" width="0.0842%" height="15" fill="rgb(239,43,17)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="687.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.08%)</title><rect x="8.3895%" y="661" width="0.0842%" height="15" fill="rgb(231,177,25)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="671.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.08%)</title><rect x="8.3895%" y="645" width="0.0842%" height="15" fill="rgb(219,179,1)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="655.50"></text></g><g><title>cfree (42 samples, 0.08%)</title><rect x="8.3895%" y="629" width="0.0842%" height="15" fill="rgb(238,219,53)" fg:x="4184" fg:w="42"/><text x="8.6395%" y="639.50"></text></g><g><title>[libc.so.6] (13 samples, 0.03%)</title><rect x="8.4476%" y="613" width="0.0261%" height="15" fill="rgb(232,167,36)" fg:x="4213" fg:w="13"/><text x="8.6976%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (21 samples, 0.04%)</title><rect x="8.4917%" y="725" width="0.0421%" height="15" fill="rgb(244,19,51)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (21 samples, 0.04%)</title><rect x="8.4917%" y="709" width="0.0421%" height="15" fill="rgb(224,6,22)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="719.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.04%)</title><rect x="8.4917%" y="693" width="0.0421%" height="15" fill="rgb(224,145,5)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (21 samples, 0.04%)</title><rect x="8.4917%" y="677" width="0.0421%" height="15" fill="rgb(234,130,49)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (21 samples, 0.04%)</title><rect x="8.4917%" y="661" width="0.0421%" height="15" fill="rgb(254,6,2)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.04%)</title><rect x="8.4917%" y="645" width="0.0421%" height="15" fill="rgb(208,96,46)" fg:x="4235" fg:w="21"/><text x="8.7417%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (23 samples, 0.05%)</title><rect x="8.5338%" y="725" width="0.0461%" height="15" fill="rgb(239,3,39)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (23 samples, 0.05%)</title><rect x="8.5338%" y="709" width="0.0461%" height="15" fill="rgb(233,210,1)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="719.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.05%)</title><rect x="8.5338%" y="693" width="0.0461%" height="15" fill="rgb(244,137,37)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (23 samples, 0.05%)</title><rect x="8.5338%" y="677" width="0.0461%" height="15" fill="rgb(240,136,2)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (23 samples, 0.05%)</title><rect x="8.5338%" y="661" width="0.0461%" height="15" fill="rgb(239,18,37)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.05%)</title><rect x="8.5338%" y="645" width="0.0461%" height="15" fill="rgb(218,185,22)" fg:x="4256" fg:w="23"/><text x="8.7838%" y="655.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (26 samples, 0.05%)</title><rect x="8.5800%" y="725" width="0.0521%" height="15" fill="rgb(225,218,4)" fg:x="4279" fg:w="26"/><text x="8.8300%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (26 samples, 0.05%)</title><rect x="8.5800%" y="709" width="0.0521%" height="15" fill="rgb(230,182,32)" fg:x="4279" fg:w="26"/><text x="8.8300%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (26 samples, 0.05%)</title><rect x="8.5800%" y="693" width="0.0521%" height="15" fill="rgb(242,56,43)" fg:x="4279" fg:w="26"/><text x="8.8300%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (26 samples, 0.05%)</title><rect x="8.5800%" y="677" width="0.0521%" height="15" fill="rgb(233,99,24)" fg:x="4279" fg:w="26"/><text x="8.8300%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (26 samples, 0.05%)</title><rect x="8.5800%" y="661" width="0.0521%" height="15" fill="rgb(234,209,42)" fg:x="4279" fg:w="26"/><text x="8.8300%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (26 samples, 0.05%)</title><rect x="8.6361%" y="677" width="0.0521%" height="15" fill="rgb(227,7,12)" fg:x="4307" fg:w="26"/><text x="8.8861%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (26 samples, 0.05%)</title><rect x="8.6361%" y="661" width="0.0521%" height="15" fill="rgb(245,203,43)" fg:x="4307" fg:w="26"/><text x="8.8861%" y="671.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (123 samples, 0.25%)</title><rect x="8.4817%" y="757" width="0.2466%" height="15" fill="rgb(238,205,33)" fg:x="4230" fg:w="123"/><text x="8.7317%" y="767.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (123 samples, 0.25%)</title><rect x="8.4817%" y="741" width="0.2466%" height="15" fill="rgb(231,56,7)" fg:x="4230" fg:w="123"/><text x="8.7317%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (48 samples, 0.10%)</title><rect x="8.6321%" y="725" width="0.0962%" height="15" fill="rgb(244,186,29)" fg:x="4305" fg:w="48"/><text x="8.8821%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (48 samples, 0.10%)</title><rect x="8.6321%" y="709" width="0.0962%" height="15" fill="rgb(234,111,31)" fg:x="4305" fg:w="48"/><text x="8.8821%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (48 samples, 0.10%)</title><rect x="8.6321%" y="693" width="0.0962%" height="15" fill="rgb(241,149,10)" fg:x="4305" fg:w="48"/><text x="8.8821%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (20 samples, 0.04%)</title><rect x="8.6882%" y="677" width="0.0401%" height="15" fill="rgb(249,206,44)" fg:x="4333" fg:w="20"/><text x="8.9382%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.04%)</title><rect x="8.6882%" y="661" width="0.0401%" height="15" fill="rgb(251,153,30)" fg:x="4333" fg:w="20"/><text x="8.9382%" y="671.50"></text></g><g><title>tokio::runtime::driver::Handle::time (12 samples, 0.02%)</title><rect x="8.7283%" y="757" width="0.0241%" height="15" fill="rgb(239,152,38)" fg:x="4353" fg:w="12"/><text x="8.9783%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12 samples, 0.02%)</title><rect x="8.7283%" y="741" width="0.0241%" height="15" fill="rgb(249,139,47)" fg:x="4353" fg:w="12"/><text x="8.9783%" y="751.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.05%)</title><rect x="8.7805%" y="741" width="0.0461%" height="15" fill="rgb(244,64,35)" fg:x="4379" fg:w="23"/><text x="9.0305%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (22 samples, 0.04%)</title><rect x="8.7825%" y="725" width="0.0441%" height="15" fill="rgb(216,46,15)" fg:x="4380" fg:w="22"/><text x="9.0325%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (22 samples, 0.04%)</title><rect x="8.7825%" y="709" width="0.0441%" height="15" fill="rgb(250,74,19)" fg:x="4380" fg:w="22"/><text x="9.0325%" y="719.50"></text></g><g><title>mio::event::event::Event::token (11 samples, 0.02%)</title><rect x="8.8266%" y="741" width="0.0221%" height="15" fill="rgb(249,42,33)" fg:x="4402" fg:w="11"/><text x="9.0766%" y="751.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::token (11 samples, 0.02%)</title><rect x="8.8266%" y="725" width="0.0221%" height="15" fill="rgb(242,149,17)" fg:x="4402" fg:w="11"/><text x="9.0766%" y="735.50"></text></g><g><title>core::time::Duration::as_millis (5 samples, 0.01%)</title><rect x="9.0853%" y="677" width="0.0100%" height="15" fill="rgb(244,29,21)" fg:x="4531" fg:w="5"/><text x="9.3353%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.03%)</title><rect x="9.0712%" y="709" width="0.0261%" height="15" fill="rgb(220,130,37)" fg:x="4524" fg:w="13"/><text x="9.3212%" y="719.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::_{{closure}} (13 samples, 0.03%)</title><rect x="9.0712%" y="693" width="0.0261%" height="15" fill="rgb(211,67,2)" fg:x="4524" fg:w="13"/><text x="9.3212%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (11 samples, 0.02%)</title><rect x="9.0973%" y="709" width="0.0221%" height="15" fill="rgb(235,68,52)" fg:x="4537" fg:w="11"/><text x="9.3473%" y="719.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::_{{closure}} (11 samples, 0.02%)</title><rect x="9.0973%" y="693" width="0.0221%" height="15" fill="rgb(246,142,3)" fg:x="4537" fg:w="11"/><text x="9.3473%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (10 samples, 0.02%)</title><rect x="9.0993%" y="677" width="0.0201%" height="15" fill="rgb(241,25,7)" fg:x="4538" fg:w="10"/><text x="9.3493%" y="687.50"></text></g><g><title>[libc.so.6] (101 samples, 0.20%)</title><rect x="9.3660%" y="693" width="0.2025%" height="15" fill="rgb(242,119,39)" fg:x="4671" fg:w="101"/><text x="9.6160%" y="703.50"></text></g><g><title>mio::poll::Poll::poll (386 samples, 0.77%)</title><rect x="8.8487%" y="741" width="0.7740%" height="15" fill="rgb(241,98,45)" fg:x="4413" fg:w="386"/><text x="9.0987%" y="751.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (383 samples, 0.77%)</title><rect x="8.8547%" y="725" width="0.7680%" height="15" fill="rgb(254,28,30)" fg:x="4416" fg:w="383"/><text x="9.1047%" y="735.50"></text></g><g><title>epoll_wait (251 samples, 0.50%)</title><rect x="9.1193%" y="709" width="0.5033%" height="15" fill="rgb(241,142,54)" fg:x="4548" fg:w="251"/><text x="9.3693%" y="719.50"></text></g><g><title>[unknown] (27 samples, 0.05%)</title><rect x="9.5685%" y="693" width="0.0541%" height="15" fill="rgb(222,85,15)" fg:x="4772" fg:w="27"/><text x="9.8185%" y="703.50"></text></g><g><title>mio::event::event::Event::is_read_closed (5 samples, 0.01%)</title><rect x="9.6367%" y="725" width="0.0100%" height="15" fill="rgb(210,85,47)" fg:x="4806" fg:w="5"/><text x="9.8867%" y="735.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::is_read_closed (5 samples, 0.01%)</title><rect x="9.6367%" y="709" width="0.0100%" height="15" fill="rgb(224,206,25)" fg:x="4806" fg:w="5"/><text x="9.8867%" y="719.50"></text></g><g><title>tokio::io::ready::Ready::from_mio (16 samples, 0.03%)</title><rect x="9.6226%" y="741" width="0.0321%" height="15" fill="rgb(243,201,19)" fg:x="4799" fg:w="16"/><text x="9.8726%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (160 samples, 0.32%)</title><rect x="9.6627%" y="725" width="0.3208%" height="15" fill="rgb(236,59,4)" fg:x="4819" fg:w="160"/><text x="9.9127%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (160 samples, 0.32%)</title><rect x="9.6627%" y="709" width="0.3208%" height="15" fill="rgb(254,179,45)" fg:x="4819" fg:w="160"/><text x="9.9127%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (120 samples, 0.24%)</title><rect x="9.9836%" y="725" width="0.2406%" height="15" fill="rgb(226,14,10)" fg:x="4979" fg:w="120"/><text x="10.2336%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (120 samples, 0.24%)</title><rect x="9.9836%" y="709" width="0.2406%" height="15" fill="rgb(244,27,41)" fg:x="4979" fg:w="120"/><text x="10.2336%" y="719.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (291 samples, 0.58%)</title><rect x="9.6587%" y="741" width="0.5835%" height="15" fill="rgb(235,35,32)" fg:x="4817" fg:w="291"/><text x="9.9087%" y="751.50"></text></g><g><title>core::mem::drop (139 samples, 0.28%)</title><rect x="10.2603%" y="725" width="0.2787%" height="15" fill="rgb(218,68,31)" fg:x="5117" fg:w="139"/><text x="10.5103%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (139 samples, 0.28%)</title><rect x="10.2603%" y="709" width="0.2787%" height="15" fill="rgb(207,120,37)" fg:x="5117" fg:w="139"/><text x="10.5103%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (139 samples, 0.28%)</title><rect x="10.2603%" y="693" width="0.2787%" height="15" fill="rgb(227,98,0)" fg:x="5117" fg:w="139"/><text x="10.5103%" y="703.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.28%)</title><rect x="10.2603%" y="677" width="0.2787%" height="15" fill="rgb(207,7,3)" fg:x="5117" fg:w="139"/><text x="10.5103%" y="687.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (139 samples, 0.28%)</title><rect x="10.2603%" y="661" width="0.2787%" height="15" fill="rgb(206,98,19)" fg:x="5117" fg:w="139"/><text x="10.5103%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (136 samples, 0.27%)</title><rect x="10.2663%" y="645" width="0.2727%" height="15" fill="rgb(217,5,26)" fg:x="5120" fg:w="136"/><text x="10.5163%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (136 samples, 0.27%)</title><rect x="10.2663%" y="629" width="0.2727%" height="15" fill="rgb(235,190,38)" fg:x="5120" fg:w="136"/><text x="10.5163%" y="639.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (52 samples, 0.10%)</title><rect x="10.5490%" y="725" width="0.1043%" height="15" fill="rgb(247,86,24)" fg:x="5261" fg:w="52"/><text x="10.7990%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (52 samples, 0.10%)</title><rect x="10.5490%" y="709" width="0.1043%" height="15" fill="rgb(205,101,16)" fg:x="5261" fg:w="52"/><text x="10.7990%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (52 samples, 0.10%)</title><rect x="10.5490%" y="693" width="0.1043%" height="15" fill="rgb(246,168,33)" fg:x="5261" fg:w="52"/><text x="10.7990%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (52 samples, 0.10%)</title><rect x="10.5490%" y="677" width="0.1043%" height="15" fill="rgb(231,114,1)" fg:x="5261" fg:w="52"/><text x="10.7990%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (52 samples, 0.10%)</title><rect x="10.5490%" y="661" width="0.1043%" height="15" fill="rgb(207,184,53)" fg:x="5261" fg:w="52"/><text x="10.7990%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (7 samples, 0.01%)</title><rect x="10.6553%" y="645" width="0.0140%" height="15" fill="rgb(224,95,51)" fg:x="5314" fg:w="7"/><text x="10.9053%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (7 samples, 0.01%)</title><rect x="10.6553%" y="629" width="0.0140%" height="15" fill="rgb(212,188,45)" fg:x="5314" fg:w="7"/><text x="10.9053%" y="639.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 0.01%)</title><rect x="10.6553%" y="613" width="0.0140%" height="15" fill="rgb(223,154,38)" fg:x="5314" fg:w="7"/><text x="10.9053%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (6 samples, 0.01%)</title><rect x="10.6573%" y="597" width="0.0120%" height="15" fill="rgb(251,22,52)" fg:x="5315" fg:w="6"/><text x="10.9073%" y="607.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (10 samples, 0.02%)</title><rect x="10.6553%" y="661" width="0.0201%" height="15" fill="rgb(229,209,22)" fg:x="5314" fg:w="10"/><text x="10.9053%" y="671.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (962 samples, 1.93%)</title><rect x="8.7524%" y="757" width="1.9289%" height="15" fill="rgb(234,138,34)" fg:x="4365" fg:w="962"/><text x="9.0024%" y="767.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (219 samples, 0.44%)</title><rect x="10.2422%" y="741" width="0.4391%" height="15" fill="rgb(212,95,11)" fg:x="5108" fg:w="219"/><text x="10.4922%" y="751.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (14 samples, 0.03%)</title><rect x="10.6533%" y="725" width="0.0281%" height="15" fill="rgb(240,179,47)" fg:x="5313" fg:w="14"/><text x="10.9033%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (13 samples, 0.03%)</title><rect x="10.6553%" y="709" width="0.0261%" height="15" fill="rgb(240,163,11)" fg:x="5314" fg:w="13"/><text x="10.9053%" y="719.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 0.03%)</title><rect x="10.6553%" y="693" width="0.0261%" height="15" fill="rgb(236,37,12)" fg:x="5314" fg:w="13"/><text x="10.9053%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (13 samples, 0.03%)</title><rect x="10.6553%" y="677" width="0.0261%" height="15" fill="rgb(232,164,16)" fg:x="5314" fg:w="13"/><text x="10.9053%" y="687.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (10 samples, 0.02%)</title><rect x="10.7134%" y="741" width="0.0201%" height="15" fill="rgb(244,205,15)" fg:x="5343" fg:w="10"/><text x="10.9634%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.02%)</title><rect x="10.7134%" y="725" width="0.0201%" height="15" fill="rgb(223,117,47)" fg:x="5343" fg:w="10"/><text x="10.9634%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.02%)</title><rect x="10.7134%" y="709" width="0.0201%" height="15" fill="rgb(244,107,35)" fg:x="5343" fg:w="10"/><text x="10.9634%" y="719.50"></text></g><g><title>tokio::runtime::context::thread_rng_n::_{{closure}} (6 samples, 0.01%)</title><rect x="10.7214%" y="693" width="0.0120%" height="15" fill="rgb(205,140,8)" fg:x="5347" fg:w="6"/><text x="10.9714%" y="703.50"></text></g><g><title>core::mem::drop (254 samples, 0.51%)</title><rect x="10.9260%" y="597" width="0.5093%" height="15" fill="rgb(228,84,46)" fg:x="5449" fg:w="254"/><text x="11.1760%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (254 samples, 0.51%)</title><rect x="10.9260%" y="581" width="0.5093%" height="15" fill="rgb(254,188,9)" fg:x="5449" fg:w="254"/><text x="11.1760%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (254 samples, 0.51%)</title><rect x="10.9260%" y="565" width="0.5093%" height="15" fill="rgb(206,112,54)" fg:x="5449" fg:w="254"/><text x="11.1760%" y="575.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (254 samples, 0.51%)</title><rect x="10.9260%" y="549" width="0.5093%" height="15" fill="rgb(216,84,49)" fg:x="5449" fg:w="254"/><text x="11.1760%" y="559.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (254 samples, 0.51%)</title><rect x="10.9260%" y="533" width="0.5093%" height="15" fill="rgb(214,194,35)" fg:x="5449" fg:w="254"/><text x="11.1760%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (250 samples, 0.50%)</title><rect x="10.9340%" y="517" width="0.5013%" height="15" fill="rgb(249,28,3)" fg:x="5453" fg:w="250"/><text x="11.1840%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (250 samples, 0.50%)</title><rect x="10.9340%" y="501" width="0.5013%" height="15" fill="rgb(222,56,52)" fg:x="5453" fg:w="250"/><text x="11.1840%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.04%)</title><rect x="11.5034%" y="581" width="0.0381%" height="15" fill="rgb(245,217,50)" fg:x="5737" fg:w="19"/><text x="11.7534%" y="591.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.04%)</title><rect x="11.5034%" y="565" width="0.0381%" height="15" fill="rgb(213,201,24)" fg:x="5737" fg:w="19"/><text x="11.7534%" y="575.50"></text></g><g><title>core::slice::index::get_noubcheck (19 samples, 0.04%)</title><rect x="11.5034%" y="549" width="0.0381%" height="15" fill="rgb(248,116,28)" fg:x="5737" fg:w="19"/><text x="11.7534%" y="559.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (283 samples, 0.57%)</title><rect x="11.4353%" y="597" width="0.5675%" height="15" fill="rgb(219,72,43)" fg:x="5703" fg:w="283"/><text x="11.6853%" y="607.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (230 samples, 0.46%)</title><rect x="11.5415%" y="581" width="0.4612%" height="15" fill="rgb(209,138,14)" fg:x="5756" fg:w="230"/><text x="11.7915%" y="591.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (230 samples, 0.46%)</title><rect x="11.5415%" y="565" width="0.4612%" height="15" fill="rgb(222,18,33)" fg:x="5756" fg:w="230"/><text x="11.7915%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (230 samples, 0.46%)</title><rect x="11.5415%" y="549" width="0.4612%" height="15" fill="rgb(213,199,7)" fg:x="5756" fg:w="230"/><text x="11.7915%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (226 samples, 0.45%)</title><rect x="11.5496%" y="533" width="0.4532%" height="15" fill="rgb(250,110,10)" fg:x="5760" fg:w="226"/><text x="11.7996%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (226 samples, 0.45%)</title><rect x="11.5496%" y="517" width="0.4532%" height="15" fill="rgb(248,123,6)" fg:x="5760" fg:w="226"/><text x="11.7996%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.07%)</title><rect x="12.3977%" y="565" width="0.0722%" height="15" fill="rgb(206,91,31)" fg:x="6183" fg:w="36"/><text x="12.6477%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.07%)</title><rect x="12.3977%" y="549" width="0.0722%" height="15" fill="rgb(211,154,13)" fg:x="6183" fg:w="36"/><text x="12.6477%" y="559.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.03%)</title><rect x="12.4378%" y="533" width="0.0321%" height="15" fill="rgb(225,148,7)" fg:x="6203" fg:w="16"/><text x="12.6878%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (62 samples, 0.12%)</title><rect x="12.4739%" y="549" width="0.1243%" height="15" fill="rgb(220,160,43)" fg:x="6221" fg:w="62"/><text x="12.7239%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (6 samples, 0.01%)</title><rect x="12.5862%" y="533" width="0.0120%" height="15" fill="rgb(213,52,39)" fg:x="6277" fg:w="6"/><text x="12.8362%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (6 samples, 0.01%)</title><rect x="12.5862%" y="517" width="0.0120%" height="15" fill="rgb(243,137,7)" fg:x="6277" fg:w="6"/><text x="12.8362%" y="527.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (70 samples, 0.14%)</title><rect x="12.4699%" y="565" width="0.1404%" height="15" fill="rgb(230,79,13)" fg:x="6219" fg:w="70"/><text x="12.7199%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (308 samples, 0.62%)</title><rect x="12.0148%" y="581" width="0.6176%" height="15" fill="rgb(247,105,23)" fg:x="5992" fg:w="308"/><text x="12.2648%" y="591.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (11 samples, 0.02%)</title><rect x="12.6103%" y="565" width="0.0221%" height="15" fill="rgb(223,179,41)" fg:x="6289" fg:w="11"/><text x="12.8603%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.02%)</title><rect x="12.6103%" y="549" width="0.0221%" height="15" fill="rgb(218,9,34)" fg:x="6289" fg:w="11"/><text x="12.8603%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (328 samples, 0.66%)</title><rect x="12.0067%" y="597" width="0.6577%" height="15" fill="rgb(222,106,8)" fg:x="5988" fg:w="328"/><text x="12.2567%" y="607.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (14 samples, 0.03%)</title><rect x="12.6363%" y="581" width="0.0281%" height="15" fill="rgb(211,220,0)" fg:x="6302" fg:w="14"/><text x="12.8863%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.01%)</title><rect x="12.6504%" y="565" width="0.0140%" height="15" fill="rgb(229,52,16)" fg:x="6309" fg:w="7"/><text x="12.9004%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.03%)</title><rect x="12.6644%" y="581" width="0.0261%" height="15" fill="rgb(212,155,18)" fg:x="6316" fg:w="13"/><text x="12.9144%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.06%)</title><rect x="12.8549%" y="565" width="0.0622%" height="15" fill="rgb(242,21,14)" fg:x="6411" fg:w="31"/><text x="13.1049%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.06%)</title><rect x="12.8549%" y="549" width="0.0622%" height="15" fill="rgb(222,19,48)" fg:x="6411" fg:w="31"/><text x="13.1049%" y="559.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.03%)</title><rect x="12.8910%" y="533" width="0.0261%" height="15" fill="rgb(232,45,27)" fg:x="6429" fg:w="13"/><text x="13.1410%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (71 samples, 0.14%)</title><rect x="12.9271%" y="549" width="0.1424%" height="15" fill="rgb(249,103,42)" fg:x="6447" fg:w="71"/><text x="13.1771%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (89 samples, 0.18%)</title><rect x="12.9171%" y="565" width="0.1785%" height="15" fill="rgb(246,81,33)" fg:x="6442" fg:w="89"/><text x="13.1671%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (9 samples, 0.02%)</title><rect x="13.0775%" y="549" width="0.0180%" height="15" fill="rgb(252,33,42)" fg:x="6522" fg:w="9"/><text x="13.3275%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (9 samples, 0.02%)</title><rect x="13.0775%" y="533" width="0.0180%" height="15" fill="rgb(209,212,41)" fg:x="6522" fg:w="9"/><text x="13.3275%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (222 samples, 0.45%)</title><rect x="12.6644%" y="597" width="0.4451%" height="15" fill="rgb(207,154,6)" fg:x="6316" fg:w="222"/><text x="12.9144%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (209 samples, 0.42%)</title><rect x="12.6905%" y="581" width="0.4191%" height="15" fill="rgb(223,64,47)" fg:x="6329" fg:w="209"/><text x="12.9405%" y="591.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (7 samples, 0.01%)</title><rect x="13.0955%" y="565" width="0.0140%" height="15" fill="rgb(211,161,38)" fg:x="6531" fg:w="7"/><text x="13.3455%" y="575.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (1,201 samples, 2.41%)</title><rect x="10.7415%" y="645" width="2.4082%" height="15" fill="rgb(219,138,40)" fg:x="5357" fg:w="1201"/><text x="10.9915%" y="655.50">co..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (1,169 samples, 2.34%)</title><rect x="10.8057%" y="629" width="2.3440%" height="15" fill="rgb(241,228,46)" fg:x="5389" fg:w="1169"/><text x="11.0557%" y="639.50">t..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (1,160 samples, 2.33%)</title><rect x="10.8237%" y="613" width="2.3260%" height="15" fill="rgb(223,209,38)" fg:x="5398" fg:w="1160"/><text x="11.0737%" y="623.50">t..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (18 samples, 0.04%)</title><rect x="13.1136%" y="597" width="0.0361%" height="15" fill="rgb(236,164,45)" fg:x="6540" fg:w="18"/><text x="13.3636%" y="607.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.01%)</title><rect x="13.1597%" y="613" width="0.0100%" height="15" fill="rgb(231,15,5)" fg:x="6563" fg:w="5"/><text x="13.4097%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (5 samples, 0.01%)</title><rect x="13.1597%" y="597" width="0.0100%" height="15" fill="rgb(252,35,15)" fg:x="6563" fg:w="5"/><text x="13.4097%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,215 samples, 2.44%)</title><rect x="10.7415%" y="677" width="2.4362%" height="15" fill="rgb(248,181,18)" fg:x="5357" fg:w="1215"/><text x="10.9915%" y="687.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,215 samples, 2.44%)</title><rect x="10.7415%" y="661" width="2.4362%" height="15" fill="rgb(233,39,42)" fg:x="5357" fg:w="1215"/><text x="10.9915%" y="671.50">co..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.03%)</title><rect x="13.1497%" y="645" width="0.0281%" height="15" fill="rgb(238,110,33)" fg:x="6558" fg:w="14"/><text x="13.3997%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 0.03%)</title><rect x="13.1497%" y="629" width="0.0281%" height="15" fill="rgb(233,195,10)" fg:x="6558" fg:w="14"/><text x="13.3997%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.02%)</title><rect x="13.2058%" y="629" width="0.0160%" height="15" fill="rgb(254,105,3)" fg:x="6586" fg:w="8"/><text x="13.4558%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.02%)</title><rect x="13.2058%" y="613" width="0.0160%" height="15" fill="rgb(221,225,9)" fg:x="6586" fg:w="8"/><text x="13.4558%" y="623.50"></text></g><g><title>core::mem::drop (128 samples, 0.26%)</title><rect x="13.3101%" y="565" width="0.2567%" height="15" fill="rgb(224,227,45)" fg:x="6638" fg:w="128"/><text x="13.5601%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (128 samples, 0.26%)</title><rect x="13.3101%" y="549" width="0.2567%" height="15" fill="rgb(229,198,43)" fg:x="6638" fg:w="128"/><text x="13.5601%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (128 samples, 0.26%)</title><rect x="13.3101%" y="533" width="0.2567%" height="15" fill="rgb(206,209,35)" fg:x="6638" fg:w="128"/><text x="13.5601%" y="543.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.26%)</title><rect x="13.3101%" y="517" width="0.2567%" height="15" fill="rgb(245,195,53)" fg:x="6638" fg:w="128"/><text x="13.5601%" y="527.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (128 samples, 0.26%)</title><rect x="13.3101%" y="501" width="0.2567%" height="15" fill="rgb(240,92,26)" fg:x="6638" fg:w="128"/><text x="13.5601%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (125 samples, 0.25%)</title><rect x="13.3161%" y="485" width="0.2506%" height="15" fill="rgb(207,40,23)" fg:x="6641" fg:w="125"/><text x="13.5661%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (125 samples, 0.25%)</title><rect x="13.3161%" y="469" width="0.2506%" height="15" fill="rgb(223,111,35)" fg:x="6641" fg:w="125"/><text x="13.5661%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6 samples, 0.01%)</title><rect x="13.6108%" y="549" width="0.0120%" height="15" fill="rgb(229,147,28)" fg:x="6788" fg:w="6"/><text x="13.8608%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.01%)</title><rect x="13.6108%" y="533" width="0.0120%" height="15" fill="rgb(211,29,28)" fg:x="6788" fg:w="6"/><text x="13.8608%" y="543.50"></text></g><g><title>core::slice::index::get_noubcheck (6 samples, 0.01%)</title><rect x="13.6108%" y="517" width="0.0120%" height="15" fill="rgb(228,72,33)" fg:x="6788" fg:w="6"/><text x="13.8608%" y="527.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (203 samples, 0.41%)</title><rect x="13.5667%" y="565" width="0.4070%" height="15" fill="rgb(205,214,31)" fg:x="6766" fg:w="203"/><text x="13.8167%" y="575.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (175 samples, 0.35%)</title><rect x="13.6229%" y="549" width="0.3509%" height="15" fill="rgb(224,111,15)" fg:x="6794" fg:w="175"/><text x="13.8729%" y="559.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (175 samples, 0.35%)</title><rect x="13.6229%" y="533" width="0.3509%" height="15" fill="rgb(253,21,26)" fg:x="6794" fg:w="175"/><text x="13.8729%" y="543.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (175 samples, 0.35%)</title><rect x="13.6229%" y="517" width="0.3509%" height="15" fill="rgb(245,139,43)" fg:x="6794" fg:w="175"/><text x="13.8729%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (175 samples, 0.35%)</title><rect x="13.6229%" y="501" width="0.3509%" height="15" fill="rgb(252,170,7)" fg:x="6794" fg:w="175"/><text x="13.8729%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (175 samples, 0.35%)</title><rect x="13.6229%" y="485" width="0.3509%" height="15" fill="rgb(231,118,14)" fg:x="6794" fg:w="175"/><text x="13.8729%" y="495.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::elapsed (6 samples, 0.01%)</title><rect x="13.9738%" y="565" width="0.0120%" height="15" fill="rgb(238,83,0)" fg:x="6969" fg:w="6"/><text x="14.2238%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.04%)</title><rect x="14.2505%" y="533" width="0.0381%" height="15" fill="rgb(221,39,39)" fg:x="7107" fg:w="19"/><text x="14.5005%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.04%)</title><rect x="14.2505%" y="517" width="0.0381%" height="15" fill="rgb(222,119,46)" fg:x="7107" fg:w="19"/><text x="14.5005%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.03%)</title><rect x="14.2565%" y="501" width="0.0321%" height="15" fill="rgb(222,165,49)" fg:x="7110" fg:w="16"/><text x="14.5065%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (41 samples, 0.08%)</title><rect x="14.2946%" y="517" width="0.0822%" height="15" fill="rgb(219,113,52)" fg:x="7129" fg:w="41"/><text x="14.5446%" y="527.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (6 samples, 0.01%)</title><rect x="14.3648%" y="501" width="0.0120%" height="15" fill="rgb(214,7,15)" fg:x="7164" fg:w="6"/><text x="14.6148%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (6 samples, 0.01%)</title><rect x="14.3648%" y="485" width="0.0120%" height="15" fill="rgb(235,32,4)" fg:x="7164" fg:w="6"/><text x="14.6148%" y="495.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (194 samples, 0.39%)</title><rect x="13.9998%" y="549" width="0.3890%" height="15" fill="rgb(238,90,54)" fg:x="6982" fg:w="194"/><text x="14.2498%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (50 samples, 0.10%)</title><rect x="14.2886%" y="533" width="0.1003%" height="15" fill="rgb(213,208,19)" fg:x="7126" fg:w="50"/><text x="14.5386%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (6 samples, 0.01%)</title><rect x="14.3768%" y="517" width="0.0120%" height="15" fill="rgb(233,156,4)" fg:x="7170" fg:w="6"/><text x="14.6268%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (6 samples, 0.01%)</title><rect x="14.3768%" y="501" width="0.0120%" height="15" fill="rgb(207,194,5)" fg:x="7170" fg:w="6"/><text x="14.6268%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::set_elapsed (10 samples, 0.02%)</title><rect x="14.3908%" y="549" width="0.0201%" height="15" fill="rgb(206,111,30)" fg:x="7177" fg:w="10"/><text x="14.6408%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (223 samples, 0.45%)</title><rect x="13.9858%" y="565" width="0.4471%" height="15" fill="rgb(243,70,54)" fg:x="6975" fg:w="223"/><text x="14.2358%" y="575.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (11 samples, 0.02%)</title><rect x="14.4109%" y="549" width="0.0221%" height="15" fill="rgb(242,28,8)" fg:x="7187" fg:w="11"/><text x="14.6609%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.01%)</title><rect x="14.4209%" y="533" width="0.0120%" height="15" fill="rgb(219,106,18)" fg:x="7192" fg:w="6"/><text x="14.6709%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.05%)</title><rect x="14.5452%" y="533" width="0.0501%" height="15" fill="rgb(244,222,10)" fg:x="7254" fg:w="25"/><text x="14.7952%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.05%)</title><rect x="14.5452%" y="517" width="0.0501%" height="15" fill="rgb(236,179,52)" fg:x="7254" fg:w="25"/><text x="14.7952%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (18 samples, 0.04%)</title><rect x="14.5593%" y="501" width="0.0361%" height="15" fill="rgb(213,23,39)" fg:x="7261" fg:w="18"/><text x="14.8093%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (44 samples, 0.09%)</title><rect x="14.6074%" y="517" width="0.0882%" height="15" fill="rgb(238,48,10)" fg:x="7285" fg:w="44"/><text x="14.8574%" y="527.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (8 samples, 0.02%)</title><rect x="14.6796%" y="501" width="0.0160%" height="15" fill="rgb(251,196,23)" fg:x="7321" fg:w="8"/><text x="14.9296%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (8 samples, 0.02%)</title><rect x="14.6796%" y="485" width="0.0160%" height="15" fill="rgb(250,152,24)" fg:x="7321" fg:w="8"/><text x="14.9296%" y="495.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (53 samples, 0.11%)</title><rect x="14.5954%" y="533" width="0.1063%" height="15" fill="rgb(209,150,17)" fg:x="7279" fg:w="53"/><text x="14.8454%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (6 samples, 0.01%)</title><rect x="14.7016%" y="517" width="0.0120%" height="15" fill="rgb(234,202,34)" fg:x="7332" fg:w="6"/><text x="14.9516%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (6 samples, 0.01%)</title><rect x="14.7016%" y="501" width="0.0120%" height="15" fill="rgb(253,148,53)" fg:x="7332" fg:w="6"/><text x="14.9516%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (141 samples, 0.28%)</title><rect x="14.4329%" y="565" width="0.2827%" height="15" fill="rgb(218,129,16)" fg:x="7198" fg:w="141"/><text x="14.6829%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (137 samples, 0.27%)</title><rect x="14.4410%" y="549" width="0.2747%" height="15" fill="rgb(216,85,19)" fg:x="7202" fg:w="137"/><text x="14.6910%" y="559.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (7 samples, 0.01%)</title><rect x="14.7016%" y="533" width="0.0140%" height="15" fill="rgb(235,228,7)" fg:x="7332" fg:w="7"/><text x="14.9516%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (1,988 samples, 3.99%)</title><rect x="10.7415%" y="725" width="3.9862%" height="15" fill="rgb(245,175,0)" fg:x="5357" fg:w="1988"/><text x="10.9915%" y="735.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1,988 samples, 3.99%)</title><rect x="10.7415%" y="709" width="3.9862%" height="15" fill="rgb(208,168,36)" fg:x="5357" fg:w="1988"/><text x="10.9915%" y="719.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1,988 samples, 3.99%)</title><rect x="10.7415%" y="693" width="3.9862%" height="15" fill="rgb(246,171,24)" fg:x="5357" fg:w="1988"/><text x="10.9915%" y="703.50">core..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (773 samples, 1.55%)</title><rect x="13.1777%" y="677" width="1.5500%" height="15" fill="rgb(215,142,24)" fg:x="6572" fg:w="773"/><text x="13.4277%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (773 samples, 1.55%)</title><rect x="13.1777%" y="661" width="1.5500%" height="15" fill="rgb(250,187,7)" fg:x="6572" fg:w="773"/><text x="13.4277%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (773 samples, 1.55%)</title><rect x="13.1777%" y="645" width="1.5500%" height="15" fill="rgb(228,66,33)" fg:x="6572" fg:w="773"/><text x="13.4277%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (751 samples, 1.51%)</title><rect x="13.2218%" y="629" width="1.5059%" height="15" fill="rgb(234,215,21)" fg:x="6594" fg:w="751"/><text x="13.4718%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (751 samples, 1.51%)</title><rect x="13.2218%" y="613" width="1.5059%" height="15" fill="rgb(222,191,20)" fg:x="6594" fg:w="751"/><text x="13.4718%" y="623.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (745 samples, 1.49%)</title><rect x="13.2339%" y="597" width="1.4938%" height="15" fill="rgb(245,79,54)" fg:x="6600" fg:w="745"/><text x="13.4839%" y="607.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (738 samples, 1.48%)</title><rect x="13.2479%" y="581" width="1.4798%" height="15" fill="rgb(240,10,37)" fg:x="6607" fg:w="738"/><text x="13.4979%" y="591.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (6 samples, 0.01%)</title><rect x="14.7157%" y="565" width="0.0120%" height="15" fill="rgb(214,192,32)" fg:x="7339" fg:w="6"/><text x="14.9657%" y="575.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1,994 samples, 4.00%)</title><rect x="10.7335%" y="741" width="3.9982%" height="15" fill="rgb(209,36,54)" fg:x="5353" fg:w="1994"/><text x="10.9835%" y="751.50">toki..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or (6 samples, 0.01%)</title><rect x="14.7337%" y="709" width="0.0120%" height="15" fill="rgb(220,10,11)" fg:x="7348" fg:w="6"/><text x="14.9837%" y="719.50"></text></g><g><title>core::time::Duration::as_millis (8 samples, 0.02%)</title><rect x="14.7457%" y="709" width="0.0160%" height="15" fill="rgb(221,106,17)" fg:x="7354" fg:w="8"/><text x="14.9957%" y="719.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (23 samples, 0.05%)</title><rect x="14.7317%" y="725" width="0.0461%" height="15" fill="rgb(251,142,44)" fg:x="7347" fg:w="23"/><text x="14.9817%" y="735.50"></text></g><g><title>tokio::time::instant::Instant::saturating_duration_since (8 samples, 0.02%)</title><rect x="14.7618%" y="709" width="0.0160%" height="15" fill="rgb(238,13,15)" fg:x="7362" fg:w="8"/><text x="15.0118%" y="719.50"></text></g><g><title>std::time::Instant::duration_since (8 samples, 0.02%)</title><rect x="14.7618%" y="693" width="0.0160%" height="15" fill="rgb(208,107,27)" fg:x="7362" fg:w="8"/><text x="15.0118%" y="703.50"></text></g><g><title>std::time::Instant::checked_duration_since (7 samples, 0.01%)</title><rect x="14.7638%" y="677" width="0.0140%" height="15" fill="rgb(205,136,37)" fg:x="7363" fg:w="7"/><text x="15.0138%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (7 samples, 0.01%)</title><rect x="14.7638%" y="661" width="0.0140%" height="15" fill="rgb(250,205,27)" fg:x="7363" fg:w="7"/><text x="15.0138%" y="671.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (7 samples, 0.01%)</title><rect x="14.7638%" y="645" width="0.0140%" height="15" fill="rgb(210,80,43)" fg:x="7363" fg:w="7"/><text x="15.0138%" y="655.50"></text></g><g><title>clock_gettime (264 samples, 0.53%)</title><rect x="14.7959%" y="677" width="0.5294%" height="15" fill="rgb(247,160,36)" fg:x="7379" fg:w="264"/><text x="15.0459%" y="687.50"></text></g><g><title>__vdso_clock_gettime (140 samples, 0.28%)</title><rect x="15.0445%" y="661" width="0.2807%" height="15" fill="rgb(234,13,49)" fg:x="7503" fg:w="140"/><text x="15.2945%" y="671.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (2,315 samples, 4.64%)</title><rect x="10.6854%" y="757" width="4.6419%" height="15" fill="rgb(234,122,0)" fg:x="5329" fg:w="2315"/><text x="10.9354%" y="767.50">tokio..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (297 samples, 0.60%)</title><rect x="14.7317%" y="741" width="0.5955%" height="15" fill="rgb(207,146,38)" fg:x="7347" fg:w="297"/><text x="14.9817%" y="751.50"></text></g><g><title>tokio::time::clock::Clock::now (274 samples, 0.55%)</title><rect x="14.7778%" y="725" width="0.5494%" height="15" fill="rgb(207,177,25)" fg:x="7370" fg:w="274"/><text x="15.0278%" y="735.50"></text></g><g><title>tokio::time::clock::now (274 samples, 0.55%)</title><rect x="14.7778%" y="709" width="0.5494%" height="15" fill="rgb(211,178,42)" fg:x="7370" fg:w="274"/><text x="15.0278%" y="719.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (274 samples, 0.55%)</title><rect x="14.7778%" y="693" width="0.5494%" height="15" fill="rgb(230,69,54)" fg:x="7370" fg:w="274"/><text x="15.0278%" y="703.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (7 samples, 0.01%)</title><rect x="15.3312%" y="757" width="0.0140%" height="15" fill="rgb(214,135,41)" fg:x="7646" fg:w="7"/><text x="15.5812%" y="767.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (7 samples, 0.01%)</title><rect x="15.3312%" y="741" width="0.0140%" height="15" fill="rgb(237,67,25)" fg:x="7646" fg:w="7"/><text x="15.5812%" y="751.50"></text></g><g><title>tokio::runtime::process::Driver::park_timeout (5 samples, 0.01%)</title><rect x="15.3353%" y="725" width="0.0100%" height="15" fill="rgb(222,189,50)" fg:x="7648" fg:w="5"/><text x="15.5853%" y="735.50"></text></g><g><title>tokio::runtime::signal::Driver::park_timeout (5 samples, 0.01%)</title><rect x="15.3353%" y="709" width="0.0100%" height="15" fill="rgb(245,148,34)" fg:x="7648" fg:w="5"/><text x="15.5853%" y="719.50"></text></g><g><title>tokio::runtime::io::driver::Driver::park_timeout (5 samples, 0.01%)</title><rect x="15.3353%" y="693" width="0.0100%" height="15" fill="rgb(222,29,6)" fg:x="7648" fg:w="5"/><text x="15.5853%" y="703.50"></text></g><g><title>core::time::Duration::as_millis (8 samples, 0.02%)</title><rect x="15.3593%" y="725" width="0.0160%" height="15" fill="rgb(221,189,43)" fg:x="7660" fg:w="8"/><text x="15.6093%" y="735.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (21 samples, 0.04%)</title><rect x="15.3553%" y="741" width="0.0421%" height="15" fill="rgb(207,36,27)" fg:x="7658" fg:w="21"/><text x="15.6053%" y="751.50"></text></g><g><title>tokio::time::instant::Instant::saturating_duration_since (11 samples, 0.02%)</title><rect x="15.3754%" y="725" width="0.0221%" height="15" fill="rgb(217,90,24)" fg:x="7668" fg:w="11"/><text x="15.6254%" y="735.50"></text></g><g><title>std::time::Instant::duration_since (11 samples, 0.02%)</title><rect x="15.3754%" y="709" width="0.0221%" height="15" fill="rgb(224,66,35)" fg:x="7668" fg:w="11"/><text x="15.6254%" y="719.50"></text></g><g><title>std::time::Instant::checked_duration_since (10 samples, 0.02%)</title><rect x="15.3774%" y="693" width="0.0201%" height="15" fill="rgb(221,13,50)" fg:x="7669" fg:w="10"/><text x="15.6274%" y="703.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (10 samples, 0.02%)</title><rect x="15.3774%" y="677" width="0.0201%" height="15" fill="rgb(236,68,49)" fg:x="7669" fg:w="10"/><text x="15.6274%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (9 samples, 0.02%)</title><rect x="15.3794%" y="661" width="0.0180%" height="15" fill="rgb(229,146,28)" fg:x="7670" fg:w="9"/><text x="15.6294%" y="671.50"></text></g><g><title>clock_gettime (86 samples, 0.17%)</title><rect x="15.4074%" y="693" width="0.1724%" height="15" fill="rgb(225,31,38)" fg:x="7684" fg:w="86"/><text x="15.6574%" y="703.50"></text></g><g><title>__vdso_clock_gettime (80 samples, 0.16%)</title><rect x="15.4195%" y="677" width="0.1604%" height="15" fill="rgb(250,208,3)" fg:x="7690" fg:w="80"/><text x="15.6695%" y="687.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (117 samples, 0.23%)</title><rect x="15.3553%" y="757" width="0.2346%" height="15" fill="rgb(246,54,23)" fg:x="7658" fg:w="117"/><text x="15.6053%" y="767.50"></text></g><g><title>tokio::time::clock::Clock::now (96 samples, 0.19%)</title><rect x="15.3974%" y="741" width="0.1925%" height="15" fill="rgb(243,76,11)" fg:x="7679" fg:w="96"/><text x="15.6474%" y="751.50"></text></g><g><title>tokio::time::clock::now (96 samples, 0.19%)</title><rect x="15.3974%" y="725" width="0.1925%" height="15" fill="rgb(245,21,50)" fg:x="7679" fg:w="96"/><text x="15.6474%" y="735.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (95 samples, 0.19%)</title><rect x="15.3994%" y="709" width="0.1905%" height="15" fill="rgb(228,9,43)" fg:x="7680" fg:w="95"/><text x="15.6494%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (5,368 samples, 10.76%)</title><rect x="4.8484%" y="789" width="10.7636%" height="15" fill="rgb(208,100,47)" fg:x="2418" fg:w="5368"/><text x="5.0984%" y="799.50">tokio::runtime::..</text></g><g><title>tokio::runtime::time::Driver::park_internal (5,193 samples, 10.41%)</title><rect x="5.1993%" y="773" width="10.4127%" height="15" fill="rgb(232,26,8)" fg:x="2593" fg:w="5193"/><text x="5.4493%" y="783.50">tokio::runtime:..</text></g><g><title>tokio::runtime::time::source::TimeSource::tick_to_duration (11 samples, 0.02%)</title><rect x="15.5899%" y="757" width="0.0221%" height="15" fill="rgb(216,166,38)" fg:x="7775" fg:w="11"/><text x="15.8399%" y="767.50"></text></g><g><title>core::time::Duration::from_millis (11 samples, 0.02%)</title><rect x="15.5899%" y="741" width="0.0221%" height="15" fill="rgb(251,202,51)" fg:x="7775" fg:w="11"/><text x="15.8399%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (5,700 samples, 11.43%)</title><rect x="4.2489%" y="821" width="11.4293%" height="15" fill="rgb(254,216,34)" fg:x="2119" fg:w="5700"/><text x="4.4989%" y="831.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (5,700 samples, 11.43%)</title><rect x="4.2489%" y="805" width="11.4293%" height="15" fill="rgb(251,32,27)" fg:x="2119" fg:w="5700"/><text x="4.4989%" y="815.50">tokio::runtime::s..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (33 samples, 0.07%)</title><rect x="15.6120%" y="789" width="0.0662%" height="15" fill="rgb(208,127,28)" fg:x="7786" fg:w="33"/><text x="15.8620%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (33 samples, 0.07%)</title><rect x="15.6120%" y="773" width="0.0662%" height="15" fill="rgb(224,137,22)" fg:x="7786" fg:w="33"/><text x="15.8620%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.07%)</title><rect x="15.6120%" y="757" width="0.0662%" height="15" fill="rgb(254,70,32)" fg:x="7786" fg:w="33"/><text x="15.8620%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5,830 samples, 11.69%)</title><rect x="4.0564%" y="837" width="11.6899%" height="15" fill="rgb(229,75,37)" fg:x="2023" fg:w="5830"/><text x="4.3064%" y="847.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::should_notify_others (34 samples, 0.07%)</title><rect x="15.6781%" y="821" width="0.0682%" height="15" fill="rgb(252,64,23)" fg:x="7819" fg:w="34"/><text x="15.9281%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::len (19 samples, 0.04%)</title><rect x="15.7082%" y="805" width="0.0381%" height="15" fill="rgb(232,162,48)" fg:x="7834" fg:w="19"/><text x="15.9582%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (17 samples, 0.03%)</title><rect x="15.7122%" y="789" width="0.0341%" height="15" fill="rgb(246,160,12)" fg:x="7836" fg:w="17"/><text x="15.9622%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (13 samples, 0.03%)</title><rect x="15.7202%" y="773" width="0.0261%" height="15" fill="rgb(247,166,0)" fg:x="7840" fg:w="13"/><text x="15.9702%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.03%)</title><rect x="15.7202%" y="757" width="0.0261%" height="15" fill="rgb(249,219,21)" fg:x="7840" fg:w="13"/><text x="15.9702%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (46 samples, 0.09%)</title><rect x="15.9308%" y="821" width="0.0922%" height="15" fill="rgb(205,209,3)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (46 samples, 0.09%)</title><rect x="15.9308%" y="805" width="0.0922%" height="15" fill="rgb(243,44,1)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="815.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.09%)</title><rect x="15.9308%" y="789" width="0.0922%" height="15" fill="rgb(206,159,16)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (46 samples, 0.09%)</title><rect x="15.9308%" y="773" width="0.0922%" height="15" fill="rgb(244,77,30)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (46 samples, 0.09%)</title><rect x="15.9308%" y="757" width="0.0922%" height="15" fill="rgb(218,69,12)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.09%)</title><rect x="15.9308%" y="741" width="0.0922%" height="15" fill="rgb(212,87,7)" fg:x="7945" fg:w="46"/><text x="16.1808%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (38 samples, 0.08%)</title><rect x="16.0230%" y="821" width="0.0762%" height="15" fill="rgb(245,114,25)" fg:x="7991" fg:w="38"/><text x="16.2730%" y="831.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (38 samples, 0.08%)</title><rect x="16.0230%" y="805" width="0.0762%" height="15" fill="rgb(210,61,42)" fg:x="7991" fg:w="38"/><text x="16.2730%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (38 samples, 0.08%)</title><rect x="16.0230%" y="789" width="0.0762%" height="15" fill="rgb(211,52,33)" fg:x="7991" fg:w="38"/><text x="16.2730%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (38 samples, 0.08%)</title><rect x="16.0230%" y="773" width="0.0762%" height="15" fill="rgb(234,58,33)" fg:x="7991" fg:w="38"/><text x="16.2730%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (38 samples, 0.08%)</title><rect x="16.0230%" y="757" width="0.0762%" height="15" fill="rgb(220,115,36)" fg:x="7991" fg:w="38"/><text x="16.2730%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (187 samples, 0.37%)</title><rect x="15.7463%" y="837" width="0.3750%" height="15" fill="rgb(243,153,54)" fg:x="7853" fg:w="187"/><text x="15.9963%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::inject::shared::Shared&lt;T&gt;::is_closed (11 samples, 0.02%)</title><rect x="16.0992%" y="821" width="0.0221%" height="15" fill="rgb(251,47,18)" fg:x="8029" fg:w="11"/><text x="16.3492%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (26 samples, 0.05%)</title><rect x="16.1333%" y="805" width="0.0521%" height="15" fill="rgb(242,102,42)" fg:x="8046" fg:w="26"/><text x="16.3833%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (26 samples, 0.05%)</title><rect x="16.1333%" y="789" width="0.0521%" height="15" fill="rgb(234,31,38)" fg:x="8046" fg:w="26"/><text x="16.3833%" y="799.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.05%)</title><rect x="16.1333%" y="773" width="0.0521%" height="15" fill="rgb(221,117,51)" fg:x="8046" fg:w="26"/><text x="16.3833%" y="783.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (26 samples, 0.05%)</title><rect x="16.1333%" y="757" width="0.0521%" height="15" fill="rgb(212,20,18)" fg:x="8046" fg:w="26"/><text x="16.3833%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (25 samples, 0.05%)</title><rect x="16.1353%" y="741" width="0.0501%" height="15" fill="rgb(245,133,36)" fg:x="8047" fg:w="25"/><text x="16.3853%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.05%)</title><rect x="16.1353%" y="725" width="0.0501%" height="15" fill="rgb(212,6,19)" fg:x="8047" fg:w="25"/><text x="16.3853%" y="735.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (26 samples, 0.05%)</title><rect x="16.2055%" y="757" width="0.0521%" height="15" fill="rgb(218,1,36)" fg:x="8082" fg:w="26"/><text x="16.4555%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (26 samples, 0.05%)</title><rect x="16.2055%" y="741" width="0.0521%" height="15" fill="rgb(246,84,54)" fg:x="8082" fg:w="26"/><text x="16.4555%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (46 samples, 0.09%)</title><rect x="16.1854%" y="805" width="0.0922%" height="15" fill="rgb(242,110,6)" fg:x="8072" fg:w="46"/><text x="16.4354%" y="815.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (46 samples, 0.09%)</title><rect x="16.1854%" y="789" width="0.0922%" height="15" fill="rgb(214,47,5)" fg:x="8072" fg:w="46"/><text x="16.4354%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (46 samples, 0.09%)</title><rect x="16.1854%" y="773" width="0.0922%" height="15" fill="rgb(218,159,25)" fg:x="8072" fg:w="46"/><text x="16.4354%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="16.2576%" y="757" width="0.0201%" height="15" fill="rgb(215,211,28)" fg:x="8108" fg:w="10"/><text x="16.5076%" y="767.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="16.2676%" y="741" width="0.0100%" height="15" fill="rgb(238,59,32)" fg:x="8113" fg:w="5"/><text x="16.5176%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (116 samples, 0.23%)</title><rect x="16.1333%" y="821" width="0.2326%" height="15" fill="rgb(226,82,3)" fg:x="8046" fg:w="116"/><text x="16.3833%" y="831.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (44 samples, 0.09%)</title><rect x="16.2777%" y="805" width="0.0882%" height="15" fill="rgb(240,164,32)" fg:x="8118" fg:w="44"/><text x="16.5277%" y="815.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (44 samples, 0.09%)</title><rect x="16.2777%" y="789" width="0.0882%" height="15" fill="rgb(232,46,7)" fg:x="8118" fg:w="44"/><text x="16.5277%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (44 samples, 0.09%)</title><rect x="16.2777%" y="773" width="0.0882%" height="15" fill="rgb(229,129,53)" fg:x="8118" fg:w="44"/><text x="16.5277%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (42 samples, 0.08%)</title><rect x="16.2817%" y="757" width="0.0842%" height="15" fill="rgb(234,188,29)" fg:x="8120" fg:w="42"/><text x="16.5317%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (42 samples, 0.08%)</title><rect x="16.2817%" y="741" width="0.0842%" height="15" fill="rgb(246,141,4)" fg:x="8120" fg:w="42"/><text x="16.5317%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (128 samples, 0.26%)</title><rect x="16.1213%" y="837" width="0.2567%" height="15" fill="rgb(229,23,39)" fg:x="8040" fg:w="128"/><text x="16.3713%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.01%)</title><rect x="16.3799%" y="805" width="0.0120%" height="15" fill="rgb(206,12,3)" fg:x="8169" fg:w="6"/><text x="16.6299%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (35 samples, 0.07%)</title><rect x="16.3920%" y="805" width="0.0702%" height="15" fill="rgb(252,226,20)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (35 samples, 0.07%)</title><rect x="16.3920%" y="789" width="0.0702%" height="15" fill="rgb(216,123,35)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="799.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.07%)</title><rect x="16.3920%" y="773" width="0.0702%" height="15" fill="rgb(212,68,40)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="783.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (35 samples, 0.07%)</title><rect x="16.3920%" y="757" width="0.0702%" height="15" fill="rgb(254,125,32)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (35 samples, 0.07%)</title><rect x="16.3920%" y="741" width="0.0702%" height="15" fill="rgb(253,97,22)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.07%)</title><rect x="16.3920%" y="725" width="0.0702%" height="15" fill="rgb(241,101,14)" fg:x="8175" fg:w="35"/><text x="16.6420%" y="735.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.01%)</title><rect x="16.4621%" y="805" width="0.0100%" height="15" fill="rgb(238,103,29)" fg:x="8210" fg:w="5"/><text x="16.7121%" y="815.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.01%)</title><rect x="16.4621%" y="789" width="0.0100%" height="15" fill="rgb(233,195,47)" fg:x="8210" fg:w="5"/><text x="16.7121%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.01%)</title><rect x="16.4621%" y="773" width="0.0100%" height="15" fill="rgb(246,218,30)" fg:x="8210" fg:w="5"/><text x="16.7121%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (49 samples, 0.10%)</title><rect x="16.3799%" y="821" width="0.0983%" height="15" fill="rgb(219,145,47)" fg:x="8169" fg:w="49"/><text x="16.6299%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="16.4922%" y="805" width="0.0120%" height="15" fill="rgb(243,12,26)" fg:x="8225" fg:w="6"/><text x="16.7422%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (17 samples, 0.03%)</title><rect x="16.4782%" y="821" width="0.0341%" height="15" fill="rgb(214,87,16)" fg:x="8218" fg:w="17"/><text x="16.7282%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (6,312 samples, 12.66%)</title><rect x="3.8579%" y="853" width="12.6564%" height="15" fill="rgb(208,99,42)" fg:x="1924" fg:w="6312"/><text x="4.1079%" y="863.50">tokio::runtime::sch..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (68 samples, 0.14%)</title><rect x="16.3779%" y="837" width="0.1363%" height="15" fill="rgb(253,99,2)" fg:x="8168" fg:w="68"/><text x="16.6279%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.02%)</title><rect x="16.5203%" y="773" width="0.0201%" height="15" fill="rgb(220,168,23)" fg:x="8239" fg:w="10"/><text x="16.7703%" y="783.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (10 samples, 0.02%)</title><rect x="16.5203%" y="757" width="0.0201%" height="15" fill="rgb(242,38,24)" fg:x="8239" fg:w="10"/><text x="16.7703%" y="767.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (10 samples, 0.02%)</title><rect x="16.5203%" y="741" width="0.0201%" height="15" fill="rgb(225,182,9)" fg:x="8239" fg:w="10"/><text x="16.7703%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (9 samples, 0.02%)</title><rect x="16.5223%" y="725" width="0.0180%" height="15" fill="rgb(243,178,37)" fg:x="8240" fg:w="9"/><text x="16.7723%" y="735.50"></text></g><g><title>tokio::runtime::context::budget (13 samples, 0.03%)</title><rect x="16.5203%" y="805" width="0.0261%" height="15" fill="rgb(232,139,19)" fg:x="8239" fg:w="13"/><text x="16.7703%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13 samples, 0.03%)</title><rect x="16.5203%" y="789" width="0.0261%" height="15" fill="rgb(225,201,24)" fg:x="8239" fg:w="13"/><text x="16.7703%" y="799.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (11 samples, 0.02%)</title><rect x="16.5464%" y="789" width="0.0221%" height="15" fill="rgb(221,47,46)" fg:x="8252" fg:w="11"/><text x="16.7964%" y="799.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (11 samples, 0.02%)</title><rect x="16.5464%" y="773" width="0.0221%" height="15" fill="rgb(249,23,13)" fg:x="8252" fg:w="11"/><text x="16.7964%" y="783.50"></text></g><g><title>core::cell::BorrowRefMut::new (11 samples, 0.02%)</title><rect x="16.5464%" y="757" width="0.0221%" height="15" fill="rgb(219,9,5)" fg:x="8252" fg:w="11"/><text x="16.7964%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (13 samples, 0.03%)</title><rect x="16.5684%" y="789" width="0.0261%" height="15" fill="rgb(254,171,16)" fg:x="8263" fg:w="13"/><text x="16.8184%" y="799.50"></text></g><g><title>core::mem::replace (13 samples, 0.03%)</title><rect x="16.5684%" y="773" width="0.0261%" height="15" fill="rgb(230,171,20)" fg:x="8263" fg:w="13"/><text x="16.8184%" y="783.50"></text></g><g><title>core::ptr::read (13 samples, 0.03%)</title><rect x="16.5684%" y="757" width="0.0261%" height="15" fill="rgb(210,71,41)" fg:x="8263" fg:w="13"/><text x="16.8184%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (8 samples, 0.02%)</title><rect x="16.6005%" y="789" width="0.0160%" height="15" fill="rgb(206,173,20)" fg:x="8279" fg:w="8"/><text x="16.8505%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.01%)</title><rect x="16.6065%" y="773" width="0.0100%" height="15" fill="rgb(233,88,34)" fg:x="8282" fg:w="5"/><text x="16.8565%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (5 samples, 0.01%)</title><rect x="16.6065%" y="757" width="0.0100%" height="15" fill="rgb(223,209,46)" fg:x="8282" fg:w="5"/><text x="16.8565%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (5 samples, 0.01%)</title><rect x="16.6065%" y="741" width="0.0100%" height="15" fill="rgb(250,43,18)" fg:x="8282" fg:w="5"/><text x="16.8565%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.01%)</title><rect x="16.6386%" y="661" width="0.0100%" height="15" fill="rgb(208,13,10)" fg:x="8298" fg:w="5"/><text x="16.8886%" y="671.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (5 samples, 0.01%)</title><rect x="16.6386%" y="645" width="0.0100%" height="15" fill="rgb(212,200,36)" fg:x="8298" fg:w="5"/><text x="16.8886%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.03%)</title><rect x="16.6546%" y="645" width="0.0261%" height="15" fill="rgb(225,90,30)" fg:x="8306" fg:w="13"/><text x="16.9046%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (13 samples, 0.03%)</title><rect x="16.6546%" y="629" width="0.0261%" height="15" fill="rgb(236,182,39)" fg:x="8306" fg:w="13"/><text x="16.9046%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (13 samples, 0.03%)</title><rect x="16.6546%" y="613" width="0.0261%" height="15" fill="rgb(212,144,35)" fg:x="8306" fg:w="13"/><text x="16.9046%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (10 samples, 0.02%)</title><rect x="16.6987%" y="597" width="0.0201%" height="15" fill="rgb(228,63,44)" fg:x="8328" fg:w="10"/><text x="16.9487%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (10 samples, 0.02%)</title><rect x="16.6987%" y="581" width="0.0201%" height="15" fill="rgb(228,109,6)" fg:x="8328" fg:w="10"/><text x="16.9487%" y="591.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (27 samples, 0.05%)</title><rect x="16.7188%" y="597" width="0.0541%" height="15" fill="rgb(238,117,24)" fg:x="8338" fg:w="27"/><text x="16.9688%" y="607.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (26 samples, 0.05%)</title><rect x="16.7208%" y="581" width="0.0521%" height="15" fill="rgb(242,26,26)" fg:x="8339" fg:w="26"/><text x="16.9708%" y="591.50"></text></g><g><title>clock_gettime (26 samples, 0.05%)</title><rect x="16.7208%" y="565" width="0.0521%" height="15" fill="rgb(221,92,48)" fg:x="8339" fg:w="26"/><text x="16.9708%" y="575.50"></text></g><g><title>__vdso_clock_gettime (12 samples, 0.02%)</title><rect x="16.7489%" y="549" width="0.0241%" height="15" fill="rgb(209,209,32)" fg:x="8353" fg:w="12"/><text x="16.9989%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (13 samples, 0.03%)</title><rect x="16.7729%" y="597" width="0.0261%" height="15" fill="rgb(221,70,22)" fg:x="8365" fg:w="13"/><text x="17.0229%" y="607.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (8 samples, 0.02%)</title><rect x="16.7830%" y="581" width="0.0160%" height="15" fill="rgb(248,145,5)" fg:x="8370" fg:w="8"/><text x="17.0330%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.02%)</title><rect x="16.7830%" y="565" width="0.0160%" height="15" fill="rgb(226,116,26)" fg:x="8370" fg:w="8"/><text x="17.0330%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.02%)</title><rect x="16.7830%" y="549" width="0.0160%" height="15" fill="rgb(244,5,17)" fg:x="8370" fg:w="8"/><text x="17.0330%" y="559.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (55 samples, 0.11%)</title><rect x="16.6927%" y="629" width="0.1103%" height="15" fill="rgb(252,159,33)" fg:x="8325" fg:w="55"/><text x="16.9427%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (55 samples, 0.11%)</title><rect x="16.6927%" y="613" width="0.1103%" height="15" fill="rgb(206,71,0)" fg:x="8325" fg:w="55"/><text x="16.9427%" y="623.50"></text></g><g><title>syscall (7 samples, 0.01%)</title><rect x="16.8030%" y="629" width="0.0140%" height="15" fill="rgb(233,118,54)" fg:x="8380" fg:w="7"/><text x="17.0530%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (10 samples, 0.02%)</title><rect x="16.8331%" y="597" width="0.0201%" height="15" fill="rgb(234,83,48)" fg:x="8395" fg:w="10"/><text x="17.0831%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (10 samples, 0.02%)</title><rect x="16.8331%" y="581" width="0.0201%" height="15" fill="rgb(228,3,54)" fg:x="8395" fg:w="10"/><text x="17.0831%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (19 samples, 0.04%)</title><rect x="16.8191%" y="629" width="0.0381%" height="15" fill="rgb(226,155,13)" fg:x="8388" fg:w="19"/><text x="17.0691%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (19 samples, 0.04%)</title><rect x="16.8191%" y="613" width="0.0381%" height="15" fill="rgb(241,28,37)" fg:x="8388" fg:w="19"/><text x="17.0691%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (9 samples, 0.02%)</title><rect x="16.8572%" y="629" width="0.0180%" height="15" fill="rgb(233,93,10)" fg:x="8407" fg:w="9"/><text x="17.1072%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.01%)</title><rect x="16.8872%" y="597" width="0.0100%" height="15" fill="rgb(225,113,19)" fg:x="8422" fg:w="5"/><text x="17.1372%" y="607.50"></text></g><g><title>core::ptr::read (5 samples, 0.01%)</title><rect x="16.8872%" y="581" width="0.0100%" height="15" fill="rgb(241,2,18)" fg:x="8422" fg:w="5"/><text x="17.1372%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (11 samples, 0.02%)</title><rect x="16.9033%" y="597" width="0.0221%" height="15" fill="rgb(228,207,21)" fg:x="8430" fg:w="11"/><text x="17.1533%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (11 samples, 0.02%)</title><rect x="16.9033%" y="581" width="0.0221%" height="15" fill="rgb(213,211,35)" fg:x="8430" fg:w="11"/><text x="17.1533%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (11 samples, 0.02%)</title><rect x="16.9033%" y="565" width="0.0221%" height="15" fill="rgb(209,83,10)" fg:x="8430" fg:w="11"/><text x="17.1533%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (144 samples, 0.29%)</title><rect x="16.6386%" y="725" width="0.2887%" height="15" fill="rgb(209,164,1)" fg:x="8298" fg:w="144"/><text x="16.8886%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (144 samples, 0.29%)</title><rect x="16.6386%" y="709" width="0.2887%" height="15" fill="rgb(213,184,43)" fg:x="8298" fg:w="144"/><text x="16.8886%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (144 samples, 0.29%)</title><rect x="16.6386%" y="693" width="0.2887%" height="15" fill="rgb(231,61,34)" fg:x="8298" fg:w="144"/><text x="16.8886%" y="703.50"></text></g><g><title>tokio::runtime::context::with_scheduler (144 samples, 0.29%)</title><rect x="16.6386%" y="677" width="0.2887%" height="15" fill="rgb(235,75,3)" fg:x="8298" fg:w="144"/><text x="16.8886%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (139 samples, 0.28%)</title><rect x="16.6486%" y="661" width="0.2787%" height="15" fill="rgb(220,106,47)" fg:x="8303" fg:w="139"/><text x="16.8986%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (119 samples, 0.24%)</title><rect x="16.6887%" y="645" width="0.2386%" height="15" fill="rgb(210,196,33)" fg:x="8323" fg:w="119"/><text x="16.9387%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (26 samples, 0.05%)</title><rect x="16.8752%" y="629" width="0.0521%" height="15" fill="rgb(229,154,42)" fg:x="8416" fg:w="26"/><text x="17.1252%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (20 samples, 0.04%)</title><rect x="16.8872%" y="613" width="0.0401%" height="15" fill="rgb(228,114,26)" fg:x="8422" fg:w="20"/><text x="17.1372%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (21 samples, 0.04%)</title><rect x="16.9915%" y="501" width="0.0421%" height="15" fill="rgb(208,144,1)" fg:x="8474" fg:w="21"/><text x="17.2415%" y="511.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (21 samples, 0.04%)</title><rect x="16.9915%" y="485" width="0.0421%" height="15" fill="rgb(239,112,37)" fg:x="8474" fg:w="21"/><text x="17.2415%" y="495.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (21 samples, 0.04%)</title><rect x="16.9915%" y="469" width="0.0421%" height="15" fill="rgb(210,96,50)" fg:x="8474" fg:w="21"/><text x="17.2415%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (19 samples, 0.04%)</title><rect x="16.9955%" y="453" width="0.0381%" height="15" fill="rgb(222,178,2)" fg:x="8476" fg:w="19"/><text x="17.2455%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (26 samples, 0.05%)</title><rect x="16.9855%" y="565" width="0.0521%" height="15" fill="rgb(226,74,18)" fg:x="8471" fg:w="26"/><text x="17.2355%" y="575.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (26 samples, 0.05%)</title><rect x="16.9855%" y="549" width="0.0521%" height="15" fill="rgb(225,67,54)" fg:x="8471" fg:w="26"/><text x="17.2355%" y="559.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (26 samples, 0.05%)</title><rect x="16.9855%" y="533" width="0.0521%" height="15" fill="rgb(251,92,32)" fg:x="8471" fg:w="26"/><text x="17.2355%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (26 samples, 0.05%)</title><rect x="16.9855%" y="517" width="0.0521%" height="15" fill="rgb(228,149,22)" fg:x="8471" fg:w="26"/><text x="17.2355%" y="527.50"></text></g><g><title>&lt;atomic_counter::RelaxedCounter as atomic_counter::AtomicCounter&gt;::inc (94 samples, 0.19%)</title><rect x="17.1419%" y="549" width="0.1885%" height="15" fill="rgb(243,54,13)" fg:x="8549" fg:w="94"/><text x="17.3919%" y="559.50"></text></g><g><title>&lt;atomic_counter::RelaxedCounter as atomic_counter::AtomicCounter&gt;::add (94 samples, 0.19%)</title><rect x="17.1419%" y="533" width="0.1885%" height="15" fill="rgb(243,180,28)" fg:x="8549" fg:w="94"/><text x="17.3919%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (94 samples, 0.19%)</title><rect x="17.1419%" y="517" width="0.1885%" height="15" fill="rgb(208,167,24)" fg:x="8549" fg:w="94"/><text x="17.3919%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (94 samples, 0.19%)</title><rect x="17.1419%" y="501" width="0.1885%" height="15" fill="rgb(245,73,45)" fg:x="8549" fg:w="94"/><text x="17.3919%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.04%)</title><rect x="17.4066%" y="405" width="0.0381%" height="15" fill="rgb(237,203,48)" fg:x="8681" fg:w="19"/><text x="17.6566%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.04%)</title><rect x="17.4066%" y="389" width="0.0381%" height="15" fill="rgb(211,197,16)" fg:x="8681" fg:w="19"/><text x="17.6566%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.04%)</title><rect x="17.4066%" y="373" width="0.0381%" height="15" fill="rgb(243,99,51)" fg:x="8681" fg:w="19"/><text x="17.6566%" y="383.50"></text></g><g><title>__rdl_dealloc (19 samples, 0.04%)</title><rect x="17.4066%" y="357" width="0.0381%" height="15" fill="rgb(215,123,29)" fg:x="8681" fg:w="19"/><text x="17.6566%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (19 samples, 0.04%)</title><rect x="17.4066%" y="341" width="0.0381%" height="15" fill="rgb(239,186,37)" fg:x="8681" fg:w="19"/><text x="17.6566%" y="351.50"></text></g><g><title>[libc.so.6] (2,100 samples, 4.21%)</title><rect x="19.6503%" y="229" width="4.2108%" height="15" fill="rgb(252,136,39)" fg:x="9800" fg:w="2100"/><text x="19.9003%" y="239.50">[libc..</text></g><g><title>[libc.so.6] (114 samples, 0.23%)</title><rect x="23.6325%" y="213" width="0.2286%" height="15" fill="rgb(223,213,32)" fg:x="11786" fg:w="114"/><text x="23.8825%" y="223.50"></text></g><g><title>[libc.so.6] (2,558 samples, 5.13%)</title><rect x="18.7460%" y="245" width="5.1291%" height="15" fill="rgb(233,115,5)" fg:x="9349" fg:w="2558"/><text x="18.9960%" y="255.50">[libc...</text></g><g><title>__madvise (7 samples, 0.01%)</title><rect x="23.8611%" y="229" width="0.0140%" height="15" fill="rgb(207,226,44)" fg:x="11900" fg:w="7"/><text x="24.1111%" y="239.50"></text></g><g><title>[libc.so.6] (3,183 samples, 6.38%)</title><rect x="17.7976%" y="261" width="6.3823%" height="15" fill="rgb(208,126,0)" fg:x="8876" fg:w="3183"/><text x="18.0476%" y="271.50">[libc.so..</text></g><g><title>__lll_lock_wait_private (152 samples, 0.30%)</title><rect x="23.8751%" y="245" width="0.3048%" height="15" fill="rgb(244,66,21)" fg:x="11907" fg:w="152"/><text x="24.1251%" y="255.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="24.1538%" y="229" width="0.0261%" height="15" fill="rgb(222,97,12)" fg:x="12046" fg:w="13"/><text x="24.4038%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,408 samples, 6.83%)</title><rect x="17.4447%" y="341" width="6.8335%" height="15" fill="rgb(219,213,19)" fg:x="8700" fg:w="3408"/><text x="17.6947%" y="351.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (3,408 samples, 6.83%)</title><rect x="17.4447%" y="325" width="6.8335%" height="15" fill="rgb(252,169,30)" fg:x="8700" fg:w="3408"/><text x="17.6947%" y="335.50">alloc::al..</text></g><g><title>__rdl_dealloc (3,408 samples, 6.83%)</title><rect x="17.4447%" y="309" width="6.8335%" height="15" fill="rgb(206,32,51)" fg:x="8700" fg:w="3408"/><text x="17.6947%" y="319.50">__rdl_dea..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,408 samples, 6.83%)</title><rect x="17.4447%" y="293" width="6.8335%" height="15" fill="rgb(250,172,42)" fg:x="8700" fg:w="3408"/><text x="17.6947%" y="303.50">std::sys:..</text></g><g><title>cfree (3,407 samples, 6.83%)</title><rect x="17.4467%" y="277" width="6.8315%" height="15" fill="rgb(209,34,43)" fg:x="8701" fg:w="3407"/><text x="17.6967%" y="287.50">cfree</text></g><g><title>__lll_lock_wake_private (49 samples, 0.10%)</title><rect x="24.1799%" y="261" width="0.0983%" height="15" fill="rgb(223,11,35)" fg:x="12059" fg:w="49"/><text x="24.4299%" y="271.50"></text></g><g><title>[unknown] (22 samples, 0.04%)</title><rect x="24.2340%" y="245" width="0.0441%" height="15" fill="rgb(251,219,26)" fg:x="12086" fg:w="22"/><text x="24.4840%" y="255.50"></text></g><g><title>core::mem::drop (3,442 samples, 6.90%)</title><rect x="17.4026%" y="437" width="6.9017%" height="15" fill="rgb(231,119,3)" fg:x="8679" fg:w="3442"/><text x="17.6526%" y="447.50">core::mem..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (3,442 samples, 6.90%)</title><rect x="17.4026%" y="421" width="6.9017%" height="15" fill="rgb(216,97,11)" fg:x="8679" fg:w="3442"/><text x="17.6526%" y="431.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (3,421 samples, 6.86%)</title><rect x="17.4447%" y="405" width="6.8596%" height="15" fill="rgb(223,59,9)" fg:x="8700" fg:w="3421"/><text x="17.6947%" y="415.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,421 samples, 6.86%)</title><rect x="17.4447%" y="389" width="6.8596%" height="15" fill="rgb(233,93,31)" fg:x="8700" fg:w="3421"/><text x="17.6947%" y="399.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,421 samples, 6.86%)</title><rect x="17.4447%" y="373" width="6.8596%" height="15" fill="rgb(239,81,33)" fg:x="8700" fg:w="3421"/><text x="17.6947%" y="383.50">core::ptr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,421 samples, 6.86%)</title><rect x="17.4447%" y="357" width="6.8596%" height="15" fill="rgb(213,120,34)" fg:x="8700" fg:w="3421"/><text x="17.6947%" y="367.50">&lt;alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (13 samples, 0.03%)</title><rect x="24.2782%" y="341" width="0.0261%" height="15" fill="rgb(243,49,53)" fg:x="12108" fg:w="13"/><text x="24.5282%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (295 samples, 0.59%)</title><rect x="24.3042%" y="437" width="0.5915%" height="15" fill="rgb(247,216,33)" fg:x="12121" fg:w="295"/><text x="24.5542%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (295 samples, 0.59%)</title><rect x="24.3042%" y="421" width="0.5915%" height="15" fill="rgb(226,26,14)" fg:x="12121" fg:w="295"/><text x="24.5542%" y="431.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (3,763 samples, 7.55%)</title><rect x="17.3845%" y="501" width="7.5453%" height="15" fill="rgb(215,49,53)" fg:x="8670" fg:w="3763"/><text x="17.6345%" y="511.50">bytes::byt..</text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3,763 samples, 7.55%)</title><rect x="17.3845%" y="485" width="7.5453%" height="15" fill="rgb(245,162,40)" fg:x="8670" fg:w="3763"/><text x="17.6345%" y="495.50">&lt;core::syn..</text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (3,763 samples, 7.55%)</title><rect x="17.3845%" y="469" width="7.5453%" height="15" fill="rgb(229,68,17)" fg:x="8670" fg:w="3763"/><text x="17.6345%" y="479.50">bytes::byt..</text></g><g><title>bytes::bytes_mut::release_shared (3,763 samples, 7.55%)</title><rect x="17.3845%" y="453" width="7.5453%" height="15" fill="rgb(213,182,10)" fg:x="8670" fg:w="3763"/><text x="17.6345%" y="463.50">bytes::byt..</text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.03%)</title><rect x="24.8957%" y="437" width="0.0341%" height="15" fill="rgb(245,125,30)" fg:x="12416" fg:w="17"/><text x="25.1457%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.03%)</title><rect x="24.8957%" y="421" width="0.0341%" height="15" fill="rgb(232,202,2)" fg:x="12416" fg:w="17"/><text x="25.1457%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (4,332 samples, 8.69%)</title><rect x="17.3424%" y="549" width="8.6862%" height="15" fill="rgb(237,140,51)" fg:x="8649" fg:w="4332"/><text x="17.5924%" y="559.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (4,331 samples, 8.68%)</title><rect x="17.3444%" y="533" width="8.6842%" height="15" fill="rgb(236,157,25)" fg:x="8650" fg:w="4331"/><text x="17.5944%" y="543.50">core::ptr::d..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (4,331 samples, 8.68%)</title><rect x="17.3444%" y="517" width="8.6842%" height="15" fill="rgb(219,209,0)" fg:x="8650" fg:w="4331"/><text x="17.5944%" y="527.50">&lt;bytes::byte..</text></g><g><title>cfree (548 samples, 1.10%)</title><rect x="24.9298%" y="501" width="1.0988%" height="15" fill="rgb(240,116,54)" fg:x="12433" fg:w="548"/><text x="25.1798%" y="511.50"></text></g><g><title>[libc.so.6] (379 samples, 0.76%)</title><rect x="25.2687%" y="485" width="0.7599%" height="15" fill="rgb(216,10,36)" fg:x="12602" fg:w="379"/><text x="25.5187%" y="495.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as futures_core::future::FusedFuture&gt;::is_terminated (20 samples, 0.04%)</title><rect x="26.5299%" y="453" width="0.0401%" height="15" fill="rgb(222,72,44)" fg:x="13231" fg:w="20"/><text x="26.7799%" y="463.50"></text></g><g><title>flume::Shared&lt;T&gt;::is_disconnected (12 samples, 0.02%)</title><rect x="26.5460%" y="437" width="0.0241%" height="15" fill="rgb(232,159,9)" fg:x="13239" fg:w="12"/><text x="26.7960%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (12 samples, 0.02%)</title><rect x="26.5460%" y="421" width="0.0241%" height="15" fill="rgb(210,39,32)" fg:x="13239" fg:w="12"/><text x="26.7960%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.02%)</title><rect x="26.5460%" y="405" width="0.0241%" height="15" fill="rgb(216,194,45)" fg:x="13239" fg:w="12"/><text x="26.7960%" y="415.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::future::FusedFuture&gt;::is_terminated (21 samples, 0.04%)</title><rect x="26.5299%" y="469" width="0.0421%" height="15" fill="rgb(218,18,35)" fg:x="13231" fg:w="21"/><text x="26.7799%" y="479.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (82 samples, 0.16%)</title><rect x="26.5720%" y="469" width="0.1644%" height="15" fill="rgb(207,83,51)" fg:x="13252" fg:w="82"/><text x="26.8220%" y="479.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (13 samples, 0.03%)</title><rect x="26.7665%" y="405" width="0.0261%" height="15" fill="rgb(225,63,43)" fg:x="13349" fg:w="13"/><text x="27.0165%" y="415.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (13 samples, 0.03%)</title><rect x="26.7665%" y="389" width="0.0261%" height="15" fill="rgb(207,57,36)" fg:x="13349" fg:w="13"/><text x="27.0165%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.03%)</title><rect x="26.7665%" y="373" width="0.0261%" height="15" fill="rgb(216,99,33)" fg:x="13349" fg:w="13"/><text x="27.0165%" y="383.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.01%)</title><rect x="26.8327%" y="389" width="0.0100%" height="15" fill="rgb(225,42,16)" fg:x="13382" fg:w="5"/><text x="27.0827%" y="399.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (5 samples, 0.01%)</title><rect x="26.8327%" y="373" width="0.0100%" height="15" fill="rgb(220,201,45)" fg:x="13382" fg:w="5"/><text x="27.0827%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (23 samples, 0.05%)</title><rect x="26.8708%" y="373" width="0.0461%" height="15" fill="rgb(225,33,4)" fg:x="13401" fg:w="23"/><text x="27.1208%" y="383.50"></text></g><g><title>core::ptr::read (21 samples, 0.04%)</title><rect x="26.8748%" y="357" width="0.0421%" height="15" fill="rgb(224,33,50)" fg:x="13403" fg:w="21"/><text x="27.1248%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (10 samples, 0.02%)</title><rect x="26.9269%" y="341" width="0.0201%" height="15" fill="rgb(246,198,51)" fg:x="13429" fg:w="10"/><text x="27.1769%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (53 samples, 0.11%)</title><rect x="26.8427%" y="389" width="0.1063%" height="15" fill="rgb(205,22,4)" fg:x="13387" fg:w="53"/><text x="27.0927%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (14 samples, 0.03%)</title><rect x="26.9209%" y="373" width="0.0281%" height="15" fill="rgb(206,3,8)" fg:x="13426" fg:w="14"/><text x="27.1709%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (14 samples, 0.03%)</title><rect x="26.9209%" y="357" width="0.0281%" height="15" fill="rgb(251,23,15)" fg:x="13426" fg:w="14"/><text x="27.1709%" y="367.50"></text></g><g><title>std::sync::poison::Flag::done (14 samples, 0.03%)</title><rect x="26.9610%" y="341" width="0.0281%" height="15" fill="rgb(252,88,28)" fg:x="13446" fg:w="14"/><text x="27.2110%" y="351.50"></text></g><g><title>std::thread::panicking (10 samples, 0.02%)</title><rect x="26.9690%" y="325" width="0.0201%" height="15" fill="rgb(212,127,14)" fg:x="13450" fg:w="10"/><text x="27.2190%" y="335.50"></text></g><g><title>std::panicking::panicking (10 samples, 0.02%)</title><rect x="26.9690%" y="309" width="0.0201%" height="15" fill="rgb(247,145,37)" fg:x="13450" fg:w="10"/><text x="27.2190%" y="319.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (10 samples, 0.02%)</title><rect x="26.9690%" y="293" width="0.0201%" height="15" fill="rgb(209,117,53)" fg:x="13450" fg:w="10"/><text x="27.2190%" y="303.50"></text></g><g><title>core::mem::drop (160 samples, 0.32%)</title><rect x="26.9530%" y="389" width="0.3208%" height="15" fill="rgb(212,90,42)" fg:x="13442" fg:w="160"/><text x="27.2030%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (160 samples, 0.32%)</title><rect x="26.9530%" y="373" width="0.3208%" height="15" fill="rgb(218,164,37)" fg:x="13442" fg:w="160"/><text x="27.2030%" y="383.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (160 samples, 0.32%)</title><rect x="26.9530%" y="357" width="0.3208%" height="15" fill="rgb(246,65,34)" fg:x="13442" fg:w="160"/><text x="27.2030%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (142 samples, 0.28%)</title><rect x="26.9891%" y="341" width="0.2847%" height="15" fill="rgb(231,100,33)" fg:x="13460" fg:w="142"/><text x="27.2391%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (139 samples, 0.28%)</title><rect x="26.9951%" y="325" width="0.2787%" height="15" fill="rgb(228,126,14)" fg:x="13463" fg:w="139"/><text x="27.2451%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (139 samples, 0.28%)</title><rect x="26.9951%" y="309" width="0.2787%" height="15" fill="rgb(215,173,21)" fg:x="13463" fg:w="139"/><text x="27.2451%" y="319.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (19 samples, 0.04%)</title><rect x="27.2738%" y="389" width="0.0381%" height="15" fill="rgb(210,6,40)" fg:x="13602" fg:w="19"/><text x="27.5238%" y="399.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (10 samples, 0.02%)</title><rect x="27.3139%" y="373" width="0.0201%" height="15" fill="rgb(212,48,18)" fg:x="13622" fg:w="10"/><text x="27.5639%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="27.3139%" y="357" width="0.0201%" height="15" fill="rgb(230,214,11)" fg:x="13622" fg:w="10"/><text x="27.5639%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="27.3139%" y="341" width="0.0201%" height="15" fill="rgb(254,105,39)" fg:x="13622" fg:w="10"/><text x="27.5639%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.02%)</title><rect x="27.3179%" y="325" width="0.0160%" height="15" fill="rgb(245,158,5)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.02%)</title><rect x="27.3179%" y="309" width="0.0160%" height="15" fill="rgb(249,208,11)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.02%)</title><rect x="27.3179%" y="293" width="0.0160%" height="15" fill="rgb(210,39,28)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="303.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.02%)</title><rect x="27.3179%" y="277" width="0.0160%" height="15" fill="rgb(211,56,53)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="287.50"></text></g><g><title>__rdl_alloc (8 samples, 0.02%)</title><rect x="27.3179%" y="261" width="0.0160%" height="15" fill="rgb(226,201,30)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="271.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.02%)</title><rect x="27.3179%" y="245" width="0.0160%" height="15" fill="rgb(239,101,34)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="255.50"></text></g><g><title>malloc (8 samples, 0.02%)</title><rect x="27.3179%" y="229" width="0.0160%" height="15" fill="rgb(226,209,5)" fg:x="13624" fg:w="8"/><text x="27.5679%" y="239.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (15 samples, 0.03%)</title><rect x="27.3119%" y="389" width="0.0301%" height="15" fill="rgb(250,105,47)" fg:x="13621" fg:w="15"/><text x="27.5619%" y="399.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (8 samples, 0.02%)</title><rect x="27.3440%" y="357" width="0.0160%" height="15" fill="rgb(230,72,3)" fg:x="13637" fg:w="8"/><text x="27.5940%" y="367.50"></text></g><g><title>std::sync::poison::Flag::guard (8 samples, 0.02%)</title><rect x="27.3440%" y="341" width="0.0160%" height="15" fill="rgb(232,218,39)" fg:x="13637" fg:w="8"/><text x="27.5940%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (188 samples, 0.38%)</title><rect x="27.3620%" y="341" width="0.3770%" height="15" fill="rgb(248,166,6)" fg:x="13646" fg:w="188"/><text x="27.6120%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (188 samples, 0.38%)</title><rect x="27.3620%" y="325" width="0.3770%" height="15" fill="rgb(247,89,20)" fg:x="13646" fg:w="188"/><text x="27.6120%" y="335.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (479 samples, 0.96%)</title><rect x="26.7926%" y="405" width="0.9605%" height="15" fill="rgb(248,130,54)" fg:x="13362" fg:w="479"/><text x="27.0426%" y="415.50"></text></g><g><title>flume::wait_lock (205 samples, 0.41%)</title><rect x="27.3420%" y="389" width="0.4111%" height="15" fill="rgb(234,196,4)" fg:x="13636" fg:w="205"/><text x="27.5920%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (204 samples, 0.41%)</title><rect x="27.3440%" y="373" width="0.4090%" height="15" fill="rgb(250,143,31)" fg:x="13637" fg:w="204"/><text x="27.5940%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (196 samples, 0.39%)</title><rect x="27.3600%" y="357" width="0.3930%" height="15" fill="rgb(211,110,34)" fg:x="13645" fg:w="196"/><text x="27.6100%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (7 samples, 0.01%)</title><rect x="27.7390%" y="341" width="0.0140%" height="15" fill="rgb(215,124,48)" fg:x="13834" fg:w="7"/><text x="27.9890%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (6 samples, 0.01%)</title><rect x="27.7410%" y="325" width="0.0120%" height="15" fill="rgb(216,46,13)" fg:x="13835" fg:w="6"/><text x="27.9910%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (5 samples, 0.01%)</title><rect x="27.7430%" y="309" width="0.0100%" height="15" fill="rgb(205,184,25)" fg:x="13836" fg:w="5"/><text x="27.9930%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.01%)</title><rect x="27.7430%" y="293" width="0.0100%" height="15" fill="rgb(228,1,10)" fg:x="13836" fg:w="5"/><text x="27.9930%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (20 samples, 0.04%)</title><rect x="27.7551%" y="357" width="0.0401%" height="15" fill="rgb(213,116,27)" fg:x="13842" fg:w="20"/><text x="28.0051%" y="367.50"></text></g><g><title>core::ptr::read (20 samples, 0.04%)</title><rect x="27.7551%" y="341" width="0.0401%" height="15" fill="rgb(241,95,50)" fg:x="13842" fg:w="20"/><text x="28.0051%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (22 samples, 0.04%)</title><rect x="27.7530%" y="373" width="0.0441%" height="15" fill="rgb(238,48,32)" fg:x="13841" fg:w="22"/><text x="28.0030%" y="383.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (541 samples, 1.08%)</title><rect x="26.7364%" y="437" width="1.0848%" height="15" fill="rgb(235,113,49)" fg:x="13334" fg:w="541"/><text x="26.9864%" y="447.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (541 samples, 1.08%)</title><rect x="26.7364%" y="421" width="1.0848%" height="15" fill="rgb(205,127,43)" fg:x="13334" fg:w="541"/><text x="26.9864%" y="431.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (34 samples, 0.07%)</title><rect x="27.7530%" y="405" width="0.0682%" height="15" fill="rgb(250,162,2)" fg:x="13841" fg:w="34"/><text x="28.0030%" y="415.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (34 samples, 0.07%)</title><rect x="27.7530%" y="389" width="0.0682%" height="15" fill="rgb(220,13,41)" fg:x="13841" fg:w="34"/><text x="28.0030%" y="399.50"></text></g><g><title>flume::wait_lock (6 samples, 0.01%)</title><rect x="27.8092%" y="373" width="0.0120%" height="15" fill="rgb(249,221,25)" fg:x="13869" fg:w="6"/><text x="28.0592%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (6 samples, 0.01%)</title><rect x="27.8092%" y="357" width="0.0120%" height="15" fill="rgb(215,208,19)" fg:x="13869" fg:w="6"/><text x="28.0592%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (5 samples, 0.01%)</title><rect x="27.8112%" y="341" width="0.0100%" height="15" fill="rgb(236,175,2)" fg:x="13870" fg:w="5"/><text x="28.0612%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.01%)</title><rect x="27.8112%" y="325" width="0.0100%" height="15" fill="rgb(241,52,2)" fg:x="13870" fg:w="5"/><text x="28.0612%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.01%)</title><rect x="27.8112%" y="309" width="0.0100%" height="15" fill="rgb(248,140,14)" fg:x="13870" fg:w="5"/><text x="28.0612%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5 samples, 0.01%)</title><rect x="27.8714%" y="373" width="0.0100%" height="15" fill="rgb(253,22,42)" fg:x="13900" fg:w="5"/><text x="28.1214%" y="383.50"></text></g><g><title>core::mem::replace (5 samples, 0.01%)</title><rect x="27.8714%" y="357" width="0.0100%" height="15" fill="rgb(234,61,47)" fg:x="13900" fg:w="5"/><text x="28.1214%" y="367.50"></text></g><g><title>core::ptr::read (5 samples, 0.01%)</title><rect x="27.8714%" y="341" width="0.0100%" height="15" fill="rgb(208,226,15)" fg:x="13900" fg:w="5"/><text x="28.1214%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.01%)</title><rect x="27.8814%" y="357" width="0.0140%" height="15" fill="rgb(217,221,4)" fg:x="13905" fg:w="7"/><text x="28.1314%" y="367.50"></text></g><g><title>core::mem::replace (7 samples, 0.01%)</title><rect x="27.8814%" y="341" width="0.0140%" height="15" fill="rgb(212,174,34)" fg:x="13905" fg:w="7"/><text x="28.1314%" y="351.50"></text></g><g><title>core::ptr::write (7 samples, 0.01%)</title><rect x="27.8814%" y="325" width="0.0140%" height="15" fill="rgb(253,83,4)" fg:x="13905" fg:w="7"/><text x="28.1314%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.02%)</title><rect x="27.8814%" y="373" width="0.0160%" height="15" fill="rgb(250,195,49)" fg:x="13905" fg:w="8"/><text x="28.1314%" y="383.50"></text></g><g><title>&lt;event_listener::sys::ListLock&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="27.9014%" y="357" width="0.0160%" height="15" fill="rgb(241,192,25)" fg:x="13915" fg:w="8"/><text x="28.1514%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (91 samples, 0.18%)</title><rect x="27.9014%" y="373" width="0.1825%" height="15" fill="rgb(208,124,10)" fg:x="13915" fg:w="91"/><text x="28.1514%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (83 samples, 0.17%)</title><rect x="27.9175%" y="357" width="0.1664%" height="15" fill="rgb(222,33,0)" fg:x="13923" fg:w="83"/><text x="28.1675%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.17%)</title><rect x="27.9175%" y="341" width="0.1664%" height="15" fill="rgb(234,209,28)" fg:x="13923" fg:w="83"/><text x="28.1675%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (82 samples, 0.16%)</title><rect x="27.9195%" y="325" width="0.1644%" height="15" fill="rgb(224,11,23)" fg:x="13924" fg:w="82"/><text x="28.1695%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (81 samples, 0.16%)</title><rect x="27.9215%" y="309" width="0.1624%" height="15" fill="rgb(232,99,1)" fg:x="13925" fg:w="81"/><text x="28.1715%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (81 samples, 0.16%)</title><rect x="27.9215%" y="293" width="0.1624%" height="15" fill="rgb(237,95,45)" fg:x="13925" fg:w="81"/><text x="28.1715%" y="303.50"></text></g><g><title>event_listener::TaskRef::into_task (81 samples, 0.16%)</title><rect x="28.0839%" y="373" width="0.1624%" height="15" fill="rgb(208,109,11)" fg:x="14006" fg:w="81"/><text x="28.3339%" y="383.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (81 samples, 0.16%)</title><rect x="28.0839%" y="357" width="0.1624%" height="15" fill="rgb(216,190,48)" fg:x="14006" fg:w="81"/><text x="28.3339%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (76 samples, 0.15%)</title><rect x="28.0939%" y="341" width="0.1524%" height="15" fill="rgb(251,171,36)" fg:x="14011" fg:w="76"/><text x="28.3439%" y="351.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (62 samples, 0.12%)</title><rect x="28.1220%" y="325" width="0.1243%" height="15" fill="rgb(230,62,22)" fg:x="14025" fg:w="62"/><text x="28.3720%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (61 samples, 0.12%)</title><rect x="28.1240%" y="309" width="0.1223%" height="15" fill="rgb(225,114,35)" fg:x="14026" fg:w="61"/><text x="28.3740%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (61 samples, 0.12%)</title><rect x="28.1240%" y="293" width="0.1223%" height="15" fill="rgb(215,118,42)" fg:x="14026" fg:w="61"/><text x="28.3740%" y="303.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="28.2463%" y="341" width="0.0201%" height="15" fill="rgb(243,119,21)" fg:x="14087" fg:w="10"/><text x="28.4963%" y="351.50"></text></g><g><title>std::sync::poison::Flag::guard (10 samples, 0.02%)</title><rect x="28.2463%" y="325" width="0.0201%" height="15" fill="rgb(252,177,53)" fg:x="14087" fg:w="10"/><text x="28.4963%" y="335.50"></text></g><g><title>std::thread::panicking (7 samples, 0.01%)</title><rect x="28.2523%" y="309" width="0.0140%" height="15" fill="rgb(237,209,29)" fg:x="14090" fg:w="7"/><text x="28.5023%" y="319.50"></text></g><g><title>std::panicking::panicking (7 samples, 0.01%)</title><rect x="28.2523%" y="293" width="0.0140%" height="15" fill="rgb(212,65,23)" fg:x="14090" fg:w="7"/><text x="28.5023%" y="303.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (7 samples, 0.01%)</title><rect x="28.2523%" y="277" width="0.0140%" height="15" fill="rgb(230,222,46)" fg:x="14090" fg:w="7"/><text x="28.5023%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (302 samples, 0.61%)</title><rect x="27.8212%" y="421" width="0.6056%" height="15" fill="rgb(215,135,32)" fg:x="13875" fg:w="302"/><text x="28.0712%" y="431.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (300 samples, 0.60%)</title><rect x="27.8252%" y="405" width="0.6015%" height="15" fill="rgb(246,101,22)" fg:x="13877" fg:w="300"/><text x="28.0752%" y="415.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (289 samples, 0.58%)</title><rect x="27.8473%" y="389" width="0.5795%" height="15" fill="rgb(206,107,13)" fg:x="13888" fg:w="289"/><text x="28.0973%" y="399.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (90 samples, 0.18%)</title><rect x="28.2463%" y="373" width="0.1805%" height="15" fill="rgb(250,100,44)" fg:x="14087" fg:w="90"/><text x="28.4963%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (90 samples, 0.18%)</title><rect x="28.2463%" y="357" width="0.1805%" height="15" fill="rgb(231,147,38)" fg:x="14087" fg:w="90"/><text x="28.4963%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (80 samples, 0.16%)</title><rect x="28.2664%" y="341" width="0.1604%" height="15" fill="rgb(229,8,40)" fg:x="14097" fg:w="80"/><text x="28.5164%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (79 samples, 0.16%)</title><rect x="28.2684%" y="325" width="0.1584%" height="15" fill="rgb(221,135,30)" fg:x="14098" fg:w="79"/><text x="28.5184%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (79 samples, 0.16%)</title><rect x="28.2684%" y="309" width="0.1584%" height="15" fill="rgb(249,193,18)" fg:x="14098" fg:w="79"/><text x="28.5184%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,027 samples, 2.06%)</title><rect x="26.3695%" y="501" width="2.0593%" height="15" fill="rgb(209,133,39)" fg:x="13151" fg:w="1027"/><text x="26.6195%" y="511.50">c..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (1,023 samples, 2.05%)</title><rect x="26.3775%" y="485" width="2.0513%" height="15" fill="rgb(232,100,14)" fg:x="13155" fg:w="1023"/><text x="26.6275%" y="495.50">w..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (844 samples, 1.69%)</title><rect x="26.7364%" y="469" width="1.6923%" height="15" fill="rgb(224,185,1)" fg:x="13334" fg:w="844"/><text x="26.9864%" y="479.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (844 samples, 1.69%)</title><rect x="26.7364%" y="453" width="1.6923%" height="15" fill="rgb(223,139,8)" fg:x="13334" fg:w="844"/><text x="26.9864%" y="463.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (303 samples, 0.61%)</title><rect x="27.8212%" y="437" width="0.6076%" height="15" fill="rgb(232,213,38)" fg:x="13875" fg:w="303"/><text x="28.0712%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (130 samples, 0.26%)</title><rect x="28.4288%" y="485" width="0.2607%" height="15" fill="rgb(207,94,22)" fg:x="14178" fg:w="130"/><text x="28.6788%" y="495.50"></text></g><g><title>core::ptr::swap (128 samples, 0.26%)</title><rect x="28.4328%" y="469" width="0.2567%" height="15" fill="rgb(219,183,54)" fg:x="14180" fg:w="128"/><text x="28.6828%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (127 samples, 0.25%)</title><rect x="28.4348%" y="453" width="0.2547%" height="15" fill="rgb(216,185,54)" fg:x="14181" fg:w="127"/><text x="28.6848%" y="463.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::BitXorAssign&gt;::bitxor_assign (5 samples, 0.01%)</title><rect x="28.6955%" y="405" width="0.0100%" height="15" fill="rgb(254,217,39)" fg:x="14311" fg:w="5"/><text x="28.9455%" y="415.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.01%)</title><rect x="28.6955%" y="389" width="0.0100%" height="15" fill="rgb(240,178,23)" fg:x="14311" fg:w="5"/><text x="28.9455%" y="399.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (6 samples, 0.01%)</title><rect x="28.7115%" y="405" width="0.0120%" height="15" fill="rgb(218,11,47)" fg:x="14319" fg:w="6"/><text x="28.9615%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (6 samples, 0.01%)</title><rect x="28.7115%" y="389" width="0.0120%" height="15" fill="rgb(218,51,51)" fg:x="14319" fg:w="6"/><text x="28.9615%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (6 samples, 0.01%)</title><rect x="28.7115%" y="373" width="0.0120%" height="15" fill="rgb(238,126,27)" fg:x="14319" fg:w="6"/><text x="28.9615%" y="383.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,276 samples, 2.56%)</title><rect x="26.1750%" y="533" width="2.5585%" height="15" fill="rgb(249,202,22)" fg:x="13054" fg:w="1276"/><text x="26.4250%" y="543.50">&lt;f..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (1,276 samples, 2.56%)</title><rect x="26.1750%" y="517" width="2.5585%" height="15" fill="rgb(254,195,49)" fg:x="13054" fg:w="1276"/><text x="26.4250%" y="527.50">wi..</text></g><g><title>futures_util::async_await::random::shuffle (152 samples, 0.30%)</title><rect x="28.4288%" y="501" width="0.3048%" height="15" fill="rgb(208,123,14)" fg:x="14178" fg:w="152"/><text x="28.6788%" y="511.50"></text></g><g><title>futures_util::async_await::random::gen_index (22 samples, 0.04%)</title><rect x="28.6894%" y="485" width="0.0441%" height="15" fill="rgb(224,200,8)" fg:x="14308" fg:w="22"/><text x="28.9394%" y="495.50"></text></g><g><title>futures_util::async_await::random::random (21 samples, 0.04%)</title><rect x="28.6915%" y="469" width="0.0421%" height="15" fill="rgb(217,61,36)" fg:x="14309" fg:w="21"/><text x="28.9415%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.04%)</title><rect x="28.6915%" y="453" width="0.0421%" height="15" fill="rgb(206,35,45)" fg:x="14309" fg:w="21"/><text x="28.9415%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.04%)</title><rect x="28.6915%" y="437" width="0.0421%" height="15" fill="rgb(217,65,33)" fg:x="14309" fg:w="21"/><text x="28.9415%" y="447.50"></text></g><g><title>futures_util::async_await::random::random::_{{closure}} (19 samples, 0.04%)</title><rect x="28.6955%" y="421" width="0.0381%" height="15" fill="rgb(222,158,48)" fg:x="14311" fg:w="19"/><text x="28.9455%" y="431.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_ref (22 samples, 0.04%)</title><rect x="28.7556%" y="485" width="0.0441%" height="15" fill="rgb(254,2,54)" fg:x="14341" fg:w="22"/><text x="29.0056%" y="495.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (22 samples, 0.04%)</title><rect x="28.7556%" y="469" width="0.0441%" height="15" fill="rgb(250,143,38)" fg:x="14341" fg:w="22"/><text x="29.0056%" y="479.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (22 samples, 0.04%)</title><rect x="28.7556%" y="453" width="0.0441%" height="15" fill="rgb(248,25,0)" fg:x="14341" fg:w="22"/><text x="29.0056%" y="463.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::as_any (9 samples, 0.02%)</title><rect x="28.7997%" y="485" width="0.0180%" height="15" fill="rgb(206,152,27)" fg:x="14363" fg:w="9"/><text x="29.0497%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.02%)</title><rect x="28.8258%" y="453" width="0.0221%" height="15" fill="rgb(240,77,30)" fg:x="14376" fg:w="11"/><text x="29.0758%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt; (7 samples, 0.01%)</title><rect x="28.8338%" y="437" width="0.0140%" height="15" fill="rgb(231,5,3)" fg:x="14380" fg:w="7"/><text x="29.0838%" y="447.50"></text></g><g><title>cfree (14 samples, 0.03%)</title><rect x="28.8479%" y="453" width="0.0281%" height="15" fill="rgb(207,226,32)" fg:x="14387" fg:w="14"/><text x="29.0979%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt; (31 samples, 0.06%)</title><rect x="28.8258%" y="485" width="0.0622%" height="15" fill="rgb(222,207,47)" fg:x="14376" fg:w="31"/><text x="29.0758%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.06%)</title><rect x="28.8258%" y="469" width="0.0622%" height="15" fill="rgb(229,115,45)" fg:x="14376" fg:w="31"/><text x="29.0758%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.01%)</title><rect x="28.8759%" y="453" width="0.0120%" height="15" fill="rgb(224,191,6)" fg:x="14401" fg:w="6"/><text x="29.1259%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.01%)</title><rect x="28.8759%" y="437" width="0.0120%" height="15" fill="rgb(230,227,24)" fg:x="14401" fg:w="6"/><text x="29.1259%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.03%)</title><rect x="28.8920%" y="485" width="0.0281%" height="15" fill="rgb(228,80,19)" fg:x="14409" fg:w="14"/><text x="29.1420%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.03%)</title><rect x="28.8920%" y="469" width="0.0281%" height="15" fill="rgb(247,229,0)" fg:x="14409" fg:w="14"/><text x="29.1420%" y="479.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.19%)</title><rect x="28.7436%" y="517" width="0.1885%" height="15" fill="rgb(237,194,15)" fg:x="14335" fg:w="94"/><text x="28.9936%" y="527.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (94 samples, 0.19%)</title><rect x="28.7436%" y="501" width="0.1885%" height="15" fill="rgb(219,203,20)" fg:x="14335" fg:w="94"/><text x="28.9936%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,flume::async::AsyncSignal&gt;&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="28.9321%" y="517" width="0.0201%" height="15" fill="rgb(234,128,8)" fg:x="14429" fg:w="10"/><text x="29.1821%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (109 samples, 0.22%)</title><rect x="28.7396%" y="533" width="0.2186%" height="15" fill="rgb(248,202,8)" fg:x="14333" fg:w="109"/><text x="28.9896%" y="543.50"></text></g><g><title>cfree (193 samples, 0.39%)</title><rect x="28.9662%" y="501" width="0.3870%" height="15" fill="rgb(206,104,37)" fg:x="14446" fg:w="193"/><text x="29.2162%" y="511.50"></text></g><g><title>[libc.so.6] (90 samples, 0.18%)</title><rect x="29.1727%" y="485" width="0.1805%" height="15" fill="rgb(223,8,27)" fg:x="14549" fg:w="90"/><text x="29.4227%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="29.3531%" y="453" width="0.0100%" height="15" fill="rgb(216,217,28)" fg:x="14639" fg:w="5"/><text x="29.6031%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.01%)</title><rect x="29.3531%" y="437" width="0.0100%" height="15" fill="rgb(249,199,1)" fg:x="14639" fg:w="5"/><text x="29.6031%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.01%)</title><rect x="29.3531%" y="421" width="0.0100%" height="15" fill="rgb(240,85,17)" fg:x="14639" fg:w="5"/><text x="29.6031%" y="431.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.01%)</title><rect x="29.3531%" y="405" width="0.0100%" height="15" fill="rgb(206,108,45)" fg:x="14639" fg:w="5"/><text x="29.6031%" y="415.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.01%)</title><rect x="29.3531%" y="389" width="0.0100%" height="15" fill="rgb(245,210,41)" fg:x="14639" fg:w="5"/><text x="29.6031%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt; (113 samples, 0.23%)</title><rect x="29.3632%" y="437" width="0.2266%" height="15" fill="rgb(206,13,37)" fg:x="14644" fg:w="113"/><text x="29.6132%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (113 samples, 0.23%)</title><rect x="29.3632%" y="421" width="0.2266%" height="15" fill="rgb(250,61,18)" fg:x="14644" fg:w="113"/><text x="29.6132%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (108 samples, 0.22%)</title><rect x="29.3732%" y="405" width="0.2166%" height="15" fill="rgb(235,172,48)" fg:x="14649" fg:w="108"/><text x="29.6232%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (108 samples, 0.22%)</title><rect x="29.3732%" y="389" width="0.2166%" height="15" fill="rgb(249,201,17)" fg:x="14649" fg:w="108"/><text x="29.6232%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::sys::Listener&lt;()&gt;&gt;&gt; (9 samples, 0.02%)</title><rect x="29.5897%" y="437" width="0.0180%" height="15" fill="rgb(219,208,6)" fg:x="14757" fg:w="9"/><text x="29.8397%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::State&lt;()&gt;&gt;&gt; (100 samples, 0.20%)</title><rect x="29.6319%" y="405" width="0.2005%" height="15" fill="rgb(248,31,23)" fg:x="14778" fg:w="100"/><text x="29.8819%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&lt;()&gt;&gt; (94 samples, 0.19%)</title><rect x="29.6439%" y="389" width="0.1885%" height="15" fill="rgb(245,15,42)" fg:x="14784" fg:w="94"/><text x="29.8939%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::Task&gt; (91 samples, 0.18%)</title><rect x="29.6499%" y="373" width="0.1825%" height="15" fill="rgb(222,217,39)" fg:x="14787" fg:w="91"/><text x="29.8999%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (86 samples, 0.17%)</title><rect x="29.6599%" y="357" width="0.1724%" height="15" fill="rgb(210,219,27)" fg:x="14792" fg:w="86"/><text x="29.9099%" y="367.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (86 samples, 0.17%)</title><rect x="29.6599%" y="341" width="0.1724%" height="15" fill="rgb(252,166,36)" fg:x="14792" fg:w="86"/><text x="29.9099%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (86 samples, 0.17%)</title><rect x="29.6599%" y="325" width="0.1724%" height="15" fill="rgb(245,132,34)" fg:x="14792" fg:w="86"/><text x="29.9099%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (79 samples, 0.16%)</title><rect x="29.6740%" y="309" width="0.1584%" height="15" fill="rgb(236,54,3)" fg:x="14799" fg:w="79"/><text x="29.9240%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (79 samples, 0.16%)</title><rect x="29.6740%" y="293" width="0.1584%" height="15" fill="rgb(241,173,43)" fg:x="14799" fg:w="79"/><text x="29.9240%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (76 samples, 0.15%)</title><rect x="29.6800%" y="277" width="0.1524%" height="15" fill="rgb(215,190,9)" fg:x="14802" fg:w="76"/><text x="29.9300%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (76 samples, 0.15%)</title><rect x="29.6800%" y="261" width="0.1524%" height="15" fill="rgb(242,101,16)" fg:x="14802" fg:w="76"/><text x="29.9300%" y="271.50"></text></g><g><title>&lt;event_listener::sys::ListLock&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="29.8464%" y="373" width="0.0120%" height="15" fill="rgb(223,190,21)" fg:x="14885" fg:w="6"/><text x="30.0964%" y="383.50"></text></g><g><title>std::sync::poison::Flag::done (16 samples, 0.03%)</title><rect x="29.8665%" y="341" width="0.0321%" height="15" fill="rgb(215,228,25)" fg:x="14895" fg:w="16"/><text x="30.1165%" y="351.50"></text></g><g><title>std::thread::panicking (8 samples, 0.02%)</title><rect x="29.8825%" y="325" width="0.0160%" height="15" fill="rgb(225,36,22)" fg:x="14903" fg:w="8"/><text x="30.1325%" y="335.50"></text></g><g><title>std::panicking::panicking (8 samples, 0.02%)</title><rect x="29.8825%" y="309" width="0.0160%" height="15" fill="rgb(251,106,46)" fg:x="14903" fg:w="8"/><text x="30.1325%" y="319.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (8 samples, 0.02%)</title><rect x="29.8825%" y="293" width="0.0160%" height="15" fill="rgb(208,90,1)" fg:x="14903" fg:w="8"/><text x="30.1325%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (160 samples, 0.32%)</title><rect x="29.8464%" y="389" width="0.3208%" height="15" fill="rgb(243,10,4)" fg:x="14885" fg:w="160"/><text x="30.0964%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (154 samples, 0.31%)</title><rect x="29.8584%" y="373" width="0.3088%" height="15" fill="rgb(212,137,27)" fg:x="14891" fg:w="154"/><text x="30.1084%" y="383.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.31%)</title><rect x="29.8584%" y="357" width="0.3088%" height="15" fill="rgb(231,220,49)" fg:x="14891" fg:w="154"/><text x="30.1084%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (134 samples, 0.27%)</title><rect x="29.8985%" y="341" width="0.2687%" height="15" fill="rgb(237,96,20)" fg:x="14911" fg:w="134"/><text x="30.1485%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (128 samples, 0.26%)</title><rect x="29.9106%" y="325" width="0.2567%" height="15" fill="rgb(239,229,30)" fg:x="14917" fg:w="128"/><text x="30.1606%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (128 samples, 0.26%)</title><rect x="29.9106%" y="309" width="0.2567%" height="15" fill="rgb(219,65,33)" fg:x="14917" fg:w="128"/><text x="30.1606%" y="319.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (8 samples, 0.02%)</title><rect x="30.1672%" y="357" width="0.0160%" height="15" fill="rgb(243,134,7)" fg:x="15045" fg:w="8"/><text x="30.4172%" y="367.50"></text></g><g><title>std::sync::poison::Flag::guard (8 samples, 0.02%)</title><rect x="30.1672%" y="341" width="0.0160%" height="15" fill="rgb(216,177,54)" fg:x="15045" fg:w="8"/><text x="30.4172%" y="351.50"></text></g><g><title>std::thread::panicking (6 samples, 0.01%)</title><rect x="30.1712%" y="325" width="0.0120%" height="15" fill="rgb(211,160,20)" fg:x="15047" fg:w="6"/><text x="30.4212%" y="335.50"></text></g><g><title>std::panicking::panicking (6 samples, 0.01%)</title><rect x="30.1712%" y="309" width="0.0120%" height="15" fill="rgb(239,85,39)" fg:x="15047" fg:w="6"/><text x="30.4212%" y="319.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (6 samples, 0.01%)</title><rect x="30.1712%" y="293" width="0.0120%" height="15" fill="rgb(232,125,22)" fg:x="15047" fg:w="6"/><text x="30.4212%" y="303.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (150 samples, 0.30%)</title><rect x="30.1672%" y="389" width="0.3008%" height="15" fill="rgb(244,57,34)" fg:x="15045" fg:w="150"/><text x="30.4172%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (150 samples, 0.30%)</title><rect x="30.1672%" y="373" width="0.3008%" height="15" fill="rgb(214,203,32)" fg:x="15045" fg:w="150"/><text x="30.4172%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (142 samples, 0.28%)</title><rect x="30.1833%" y="357" width="0.2847%" height="15" fill="rgb(207,58,43)" fg:x="15053" fg:w="142"/><text x="30.4333%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (142 samples, 0.28%)</title><rect x="30.1833%" y="341" width="0.2847%" height="15" fill="rgb(215,193,15)" fg:x="15053" fg:w="142"/><text x="30.4333%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (142 samples, 0.28%)</title><rect x="30.1833%" y="325" width="0.2847%" height="15" fill="rgb(232,15,44)" fg:x="15053" fg:w="142"/><text x="30.4333%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.01%)</title><rect x="30.5803%" y="373" width="0.0100%" height="15" fill="rgb(212,3,48)" fg:x="15251" fg:w="5"/><text x="30.8303%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.02%)</title><rect x="30.6003%" y="373" width="0.0201%" height="15" fill="rgb(218,128,7)" fg:x="15261" fg:w="10"/><text x="30.8503%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;event_listener::EventListener&gt;&gt; (832 samples, 1.67%)</title><rect x="28.9581%" y="533" width="1.6683%" height="15" fill="rgb(226,216,39)" fg:x="14442" fg:w="832"/><text x="29.2081%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (832 samples, 1.67%)</title><rect x="28.9581%" y="517" width="1.6683%" height="15" fill="rgb(243,47,51)" fg:x="14442" fg:w="832"/><text x="29.2081%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (635 samples, 1.27%)</title><rect x="29.3531%" y="501" width="1.2733%" height="15" fill="rgb(241,183,40)" fg:x="14639" fg:w="635"/><text x="29.6031%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (635 samples, 1.27%)</title><rect x="29.3531%" y="485" width="1.2733%" height="15" fill="rgb(231,217,32)" fg:x="14639" fg:w="635"/><text x="29.6031%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (635 samples, 1.27%)</title><rect x="29.3531%" y="469" width="1.2733%" height="15" fill="rgb(229,61,38)" fg:x="14639" fg:w="635"/><text x="29.6031%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt; (630 samples, 1.26%)</title><rect x="29.3632%" y="453" width="1.2632%" height="15" fill="rgb(225,210,5)" fg:x="14644" fg:w="630"/><text x="29.6132%" y="463.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop (508 samples, 1.02%)</title><rect x="29.6078%" y="437" width="1.0186%" height="15" fill="rgb(231,79,45)" fg:x="14766" fg:w="508"/><text x="29.8578%" y="447.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop::__drop_inner (508 samples, 1.02%)</title><rect x="29.6078%" y="421" width="1.0186%" height="15" fill="rgb(224,100,7)" fg:x="14766" fg:w="508"/><text x="29.8578%" y="431.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::remove (396 samples, 0.79%)</title><rect x="29.8324%" y="405" width="0.7940%" height="15" fill="rgb(241,198,18)" fg:x="14878" fg:w="396"/><text x="30.0824%" y="415.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (79 samples, 0.16%)</title><rect x="30.4680%" y="389" width="0.1584%" height="15" fill="rgb(252,97,53)" fg:x="15195" fg:w="79"/><text x="30.7180%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (16 samples, 0.03%)</title><rect x="30.6264%" y="533" width="0.0321%" height="15" fill="rgb(220,88,7)" fg:x="15274" fg:w="16"/><text x="30.8764%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.03%)</title><rect x="30.6284%" y="517" width="0.0301%" height="15" fill="rgb(213,176,14)" fg:x="15275" fg:w="15"/><text x="30.8784%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (108 samples, 0.22%)</title><rect x="30.6665%" y="517" width="0.2166%" height="15" fill="rgb(246,73,7)" fg:x="15294" fg:w="108"/><text x="30.9165%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (107 samples, 0.21%)</title><rect x="30.6685%" y="501" width="0.2145%" height="15" fill="rgb(245,64,36)" fg:x="15295" fg:w="107"/><text x="30.9185%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (107 samples, 0.21%)</title><rect x="30.6685%" y="485" width="0.2145%" height="15" fill="rgb(245,80,10)" fg:x="15295" fg:w="107"/><text x="30.9185%" y="495.50"></text></g><g><title>__rdl_alloc (75 samples, 0.15%)</title><rect x="30.9252%" y="421" width="0.1504%" height="15" fill="rgb(232,107,50)" fg:x="15423" fg:w="75"/><text x="31.1752%" y="431.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.15%)</title><rect x="30.9252%" y="405" width="0.1504%" height="15" fill="rgb(253,3,0)" fg:x="15423" fg:w="75"/><text x="31.1752%" y="415.50"></text></g><g><title>malloc (70 samples, 0.14%)</title><rect x="30.9352%" y="389" width="0.1404%" height="15" fill="rgb(212,99,53)" fg:x="15428" fg:w="70"/><text x="31.1852%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (97 samples, 0.19%)</title><rect x="30.8831%" y="517" width="0.1945%" height="15" fill="rgb(249,111,54)" fg:x="15402" fg:w="97"/><text x="31.1331%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (97 samples, 0.19%)</title><rect x="30.8831%" y="501" width="0.1945%" height="15" fill="rgb(249,55,30)" fg:x="15402" fg:w="97"/><text x="31.1331%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (78 samples, 0.16%)</title><rect x="30.9212%" y="485" width="0.1564%" height="15" fill="rgb(237,47,42)" fg:x="15421" fg:w="78"/><text x="31.1712%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.15%)</title><rect x="30.9252%" y="469" width="0.1524%" height="15" fill="rgb(211,20,18)" fg:x="15423" fg:w="76"/><text x="31.1752%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.15%)</title><rect x="30.9252%" y="453" width="0.1524%" height="15" fill="rgb(231,203,46)" fg:x="15423" fg:w="76"/><text x="31.1752%" y="463.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.15%)</title><rect x="30.9252%" y="437" width="0.1524%" height="15" fill="rgb(237,142,3)" fg:x="15423" fg:w="76"/><text x="31.1752%" y="447.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (8 samples, 0.02%)</title><rect x="31.0776%" y="517" width="0.0160%" height="15" fill="rgb(241,107,1)" fg:x="15499" fg:w="8"/><text x="31.3276%" y="527.50"></text></g><g><title>core::mem::replace (6 samples, 0.01%)</title><rect x="31.1257%" y="485" width="0.0120%" height="15" fill="rgb(229,83,13)" fg:x="15523" fg:w="6"/><text x="31.3757%" y="495.50"></text></g><g><title>core::ptr::write (5 samples, 0.01%)</title><rect x="31.1277%" y="469" width="0.0100%" height="15" fill="rgb(241,91,40)" fg:x="15524" fg:w="5"/><text x="31.3777%" y="479.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (21 samples, 0.04%)</title><rect x="31.1457%" y="485" width="0.0421%" height="15" fill="rgb(225,3,45)" fg:x="15533" fg:w="21"/><text x="31.3957%" y="495.50"></text></g><g><title>std::sync::poison::Flag::done (9 samples, 0.02%)</title><rect x="31.1939%" y="437" width="0.0180%" height="15" fill="rgb(244,223,14)" fg:x="15557" fg:w="9"/><text x="31.4439%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (147 samples, 0.29%)</title><rect x="31.1878%" y="485" width="0.2948%" height="15" fill="rgb(224,124,37)" fg:x="15554" fg:w="147"/><text x="31.4378%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (146 samples, 0.29%)</title><rect x="31.1898%" y="469" width="0.2927%" height="15" fill="rgb(251,171,30)" fg:x="15555" fg:w="146"/><text x="31.4398%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.29%)</title><rect x="31.1898%" y="453" width="0.2927%" height="15" fill="rgb(236,46,54)" fg:x="15555" fg:w="146"/><text x="31.4398%" y="463.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (135 samples, 0.27%)</title><rect x="31.2119%" y="437" width="0.2707%" height="15" fill="rgb(245,213,5)" fg:x="15566" fg:w="135"/><text x="31.4619%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (133 samples, 0.27%)</title><rect x="31.2159%" y="421" width="0.2667%" height="15" fill="rgb(230,144,27)" fg:x="15568" fg:w="133"/><text x="31.4659%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (133 samples, 0.27%)</title><rect x="31.2159%" y="405" width="0.2667%" height="15" fill="rgb(220,86,6)" fg:x="15568" fg:w="133"/><text x="31.4659%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.02%)</title><rect x="31.4826%" y="453" width="0.0241%" height="15" fill="rgb(240,20,13)" fg:x="15701" fg:w="12"/><text x="31.7326%" y="463.50"></text></g><g><title>std::sync::poison::Flag::guard (12 samples, 0.02%)</title><rect x="31.4826%" y="437" width="0.0241%" height="15" fill="rgb(217,89,34)" fg:x="15701" fg:w="12"/><text x="31.7326%" y="447.50"></text></g><g><title>std::thread::panicking (9 samples, 0.02%)</title><rect x="31.4886%" y="421" width="0.0180%" height="15" fill="rgb(229,13,5)" fg:x="15704" fg:w="9"/><text x="31.7386%" y="431.50"></text></g><g><title>std::panicking::panicking (9 samples, 0.02%)</title><rect x="31.4886%" y="405" width="0.0180%" height="15" fill="rgb(244,67,35)" fg:x="15704" fg:w="9"/><text x="31.7386%" y="415.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (9 samples, 0.02%)</title><rect x="31.4886%" y="389" width="0.0180%" height="15" fill="rgb(221,40,2)" fg:x="15704" fg:w="9"/><text x="31.7386%" y="399.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (573 samples, 1.15%)</title><rect x="30.6585%" y="533" width="1.1489%" height="15" fill="rgb(237,157,21)" fg:x="15290" fg:w="573"/><text x="30.9085%" y="543.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::listen (356 samples, 0.71%)</title><rect x="31.0936%" y="517" width="0.7138%" height="15" fill="rgb(222,94,11)" fg:x="15507" fg:w="356"/><text x="31.3436%" y="527.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::insert (356 samples, 0.71%)</title><rect x="31.0936%" y="501" width="0.7138%" height="15" fill="rgb(249,113,6)" fg:x="15507" fg:w="356"/><text x="31.3436%" y="511.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (162 samples, 0.32%)</title><rect x="31.4826%" y="485" width="0.3248%" height="15" fill="rgb(238,137,36)" fg:x="15701" fg:w="162"/><text x="31.7326%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (162 samples, 0.32%)</title><rect x="31.4826%" y="469" width="0.3248%" height="15" fill="rgb(210,102,26)" fg:x="15701" fg:w="162"/><text x="31.7326%" y="479.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (150 samples, 0.30%)</title><rect x="31.5067%" y="453" width="0.3008%" height="15" fill="rgb(218,30,30)" fg:x="15713" fg:w="150"/><text x="31.7567%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (147 samples, 0.29%)</title><rect x="31.5127%" y="437" width="0.2948%" height="15" fill="rgb(214,67,26)" fg:x="15716" fg:w="147"/><text x="31.7627%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (147 samples, 0.29%)</title><rect x="31.5127%" y="421" width="0.2948%" height="15" fill="rgb(251,9,53)" fg:x="15716" fg:w="147"/><text x="31.7627%" y="431.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (2,883 samples, 5.78%)</title><rect x="26.0346%" y="549" width="5.7808%" height="15" fill="rgb(228,204,25)" fg:x="12984" fg:w="2883"/><text x="26.2846%" y="559.50">wisp_mu..</text></g><g><title>&lt;wisp_mux::ws::Payload as core::ops::deref::Deref&gt;::deref (9 samples, 0.02%)</title><rect x="31.9759%" y="453" width="0.0180%" height="15" fill="rgb(207,153,8)" fg:x="15947" fg:w="9"/><text x="32.2259%" y="463.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (12 samples, 0.02%)</title><rect x="31.9959%" y="437" width="0.0241%" height="15" fill="rgb(242,9,16)" fg:x="15957" fg:w="12"/><text x="32.2459%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (140 samples, 0.28%)</title><rect x="31.9939%" y="453" width="0.2807%" height="15" fill="rgb(217,211,10)" fg:x="15956" fg:w="140"/><text x="32.2439%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (126 samples, 0.25%)</title><rect x="32.0220%" y="437" width="0.2526%" height="15" fill="rgb(219,228,52)" fg:x="15970" fg:w="126"/><text x="32.2720%" y="447.50"></text></g><g><title>[libc.so.6] (126 samples, 0.25%)</title><rect x="32.0220%" y="421" width="0.2526%" height="15" fill="rgb(231,92,29)" fg:x="15970" fg:w="126"/><text x="32.2720%" y="431.50"></text></g><g><title>bytes::bytes_mut::BytesMut::get_vec_pos (15 samples, 0.03%)</title><rect x="32.2786%" y="405" width="0.0301%" height="15" fill="rgb(232,8,23)" fg:x="16098" fg:w="15"/><text x="32.5286%" y="415.50"></text></g><g><title>&lt;wisp_mux::packet::PacketType as wisp_mux::packet::Encode&gt;::encode (171 samples, 0.34%)</title><rect x="31.9718%" y="469" width="0.3429%" height="15" fill="rgb(216,211,34)" fg:x="15945" fg:w="171"/><text x="32.2218%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::Payload&gt; (20 samples, 0.04%)</title><rect x="32.2746%" y="453" width="0.0401%" height="15" fill="rgb(236,151,0)" fg:x="16096" fg:w="20"/><text x="32.5246%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (19 samples, 0.04%)</title><rect x="32.2766%" y="437" width="0.0381%" height="15" fill="rgb(209,168,3)" fg:x="16097" fg:w="19"/><text x="32.5266%" y="447.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (19 samples, 0.04%)</title><rect x="32.2766%" y="421" width="0.0381%" height="15" fill="rgb(208,129,28)" fg:x="16097" fg:w="19"/><text x="32.5266%" y="431.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u32_le (5 samples, 0.01%)</title><rect x="32.3147%" y="469" width="0.0100%" height="15" fill="rgb(229,78,22)" fg:x="16116" fg:w="5"/><text x="32.5647%" y="479.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (5 samples, 0.01%)</title><rect x="32.3147%" y="453" width="0.0100%" height="15" fill="rgb(228,187,13)" fg:x="16116" fg:w="5"/><text x="32.5647%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (5 samples, 0.01%)</title><rect x="32.3147%" y="437" width="0.0100%" height="15" fill="rgb(240,119,24)" fg:x="16116" fg:w="5"/><text x="32.5647%" y="447.50"></text></g><g><title>&lt;wisp_mux::packet::Packet as wisp_mux::packet::Encode&gt;::encode (180 samples, 0.36%)</title><rect x="31.9718%" y="485" width="0.3609%" height="15" fill="rgb(209,194,42)" fg:x="15945" fg:w="180"/><text x="32.2218%" y="495.50"></text></g><g><title>__rdl_alloc (73 samples, 0.15%)</title><rect x="32.3348%" y="357" width="0.1464%" height="15" fill="rgb(247,200,46)" fg:x="16126" fg:w="73"/><text x="32.5848%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73 samples, 0.15%)</title><rect x="32.3348%" y="341" width="0.1464%" height="15" fill="rgb(218,76,16)" fg:x="16126" fg:w="73"/><text x="32.5848%" y="351.50"></text></g><g><title>malloc (73 samples, 0.15%)</title><rect x="32.3348%" y="325" width="0.1464%" height="15" fill="rgb(225,21,48)" fg:x="16126" fg:w="73"/><text x="32.5848%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (76 samples, 0.15%)</title><rect x="32.3328%" y="469" width="0.1524%" height="15" fill="rgb(239,223,50)" fg:x="16125" fg:w="76"/><text x="32.5828%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (76 samples, 0.15%)</title><rect x="32.3328%" y="453" width="0.1524%" height="15" fill="rgb(244,45,21)" fg:x="16125" fg:w="76"/><text x="32.5828%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.15%)</title><rect x="32.3328%" y="437" width="0.1524%" height="15" fill="rgb(232,33,43)" fg:x="16125" fg:w="76"/><text x="32.5828%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (76 samples, 0.15%)</title><rect x="32.3328%" y="421" width="0.1524%" height="15" fill="rgb(209,8,3)" fg:x="16125" fg:w="76"/><text x="32.5828%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.15%)</title><rect x="32.3348%" y="405" width="0.1504%" height="15" fill="rgb(214,25,53)" fg:x="16126" fg:w="75"/><text x="32.5848%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.15%)</title><rect x="32.3348%" y="389" width="0.1504%" height="15" fill="rgb(254,186,54)" fg:x="16126" fg:w="75"/><text x="32.5848%" y="399.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.15%)</title><rect x="32.3348%" y="373" width="0.1504%" height="15" fill="rgb(208,174,49)" fg:x="16126" fg:w="75"/><text x="32.5848%" y="383.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (84 samples, 0.17%)</title><rect x="32.3328%" y="485" width="0.1684%" height="15" fill="rgb(233,191,51)" fg:x="16125" fg:w="84"/><text x="32.5828%" y="495.50"></text></g><g><title>bytes::bytes_mut::BytesMut::from_vec (8 samples, 0.02%)</title><rect x="32.4852%" y="469" width="0.0160%" height="15" fill="rgb(222,134,10)" fg:x="16201" fg:w="8"/><text x="32.7352%" y="479.50"></text></g><g><title>bytes::bytes_mut::original_capacity_to_repr (5 samples, 0.01%)</title><rect x="32.4912%" y="453" width="0.0100%" height="15" fill="rgb(230,226,20)" fg:x="16204" fg:w="5"/><text x="32.7412%" y="463.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (306 samples, 0.61%)</title><rect x="31.9257%" y="501" width="0.6136%" height="15" fill="rgb(251,111,25)" fg:x="15922" fg:w="306"/><text x="32.1757%" y="511.50"></text></g><g><title>wisp_mux::packet::PacketType::get_packet_size (19 samples, 0.04%)</title><rect x="32.5012%" y="485" width="0.0381%" height="15" fill="rgb(224,40,46)" fg:x="16209" fg:w="19"/><text x="32.7512%" y="495.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (315 samples, 0.63%)</title><rect x="31.9257%" y="517" width="0.6316%" height="15" fill="rgb(236,108,47)" fg:x="15922" fg:w="315"/><text x="32.1757%" y="527.50"></text></g><g><title>wisp_mux::ws::Frame::binary (9 samples, 0.02%)</title><rect x="32.5393%" y="501" width="0.0180%" height="15" fill="rgb(234,93,0)" fg:x="16228" fg:w="9"/><text x="32.7893%" y="511.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.03%)</title><rect x="32.8180%" y="501" width="0.0341%" height="15" fill="rgb(224,213,32)" fg:x="16367" fg:w="17"/><text x="33.0680%" y="511.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (17 samples, 0.03%)</title><rect x="32.8180%" y="485" width="0.0341%" height="15" fill="rgb(251,11,48)" fg:x="16367" fg:w="17"/><text x="33.0680%" y="495.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (16 samples, 0.03%)</title><rect x="32.8200%" y="469" width="0.0321%" height="15" fill="rgb(236,173,5)" fg:x="16368" fg:w="16"/><text x="33.0700%" y="479.50"></text></g><g><title>&lt;wisp_mux::Role as core::cmp::PartialEq&gt;::eq (17 samples, 0.03%)</title><rect x="32.8521%" y="501" width="0.0341%" height="15" fill="rgb(230,95,12)" fg:x="16384" fg:w="17"/><text x="33.1021%" y="511.50"></text></g><g><title>&lt;wisp_mux::packet::StreamType as core::cmp::PartialEq&gt;::eq (7 samples, 0.01%)</title><rect x="32.8862%" y="501" width="0.0140%" height="15" fill="rgb(232,209,1)" fg:x="16401" fg:w="7"/><text x="33.1362%" y="511.50"></text></g><g><title>cfree (13 samples, 0.03%)</title><rect x="32.9002%" y="501" width="0.0261%" height="15" fill="rgb(232,6,1)" fg:x="16408" fg:w="13"/><text x="33.1502%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::LockedWebSocketWrite::write_split::{{closure}}&gt; (6 samples, 0.01%)</title><rect x="32.9323%" y="501" width="0.0120%" height="15" fill="rgb(210,224,50)" fg:x="16424" fg:w="6"/><text x="33.1823%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (16 samples, 0.03%)</title><rect x="32.9443%" y="501" width="0.0321%" height="15" fill="rgb(228,127,35)" fg:x="16430" fg:w="16"/><text x="33.1943%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.03%)</title><rect x="32.9463%" y="485" width="0.0301%" height="15" fill="rgb(245,102,45)" fg:x="16431" fg:w="15"/><text x="33.1963%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (62 samples, 0.12%)</title><rect x="32.9764%" y="501" width="0.1243%" height="15" fill="rgb(214,1,49)" fg:x="16446" fg:w="62"/><text x="33.2264%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (62 samples, 0.12%)</title><rect x="32.9764%" y="485" width="0.1243%" height="15" fill="rgb(226,163,40)" fg:x="16446" fg:w="62"/><text x="33.2264%" y="495.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (7 samples, 0.01%)</title><rect x="33.1208%" y="485" width="0.0140%" height="15" fill="rgb(239,212,28)" fg:x="16518" fg:w="7"/><text x="33.3708%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (7 samples, 0.01%)</title><rect x="33.1208%" y="469" width="0.0140%" height="15" fill="rgb(220,20,13)" fg:x="16518" fg:w="7"/><text x="33.3708%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.01%)</title><rect x="33.1208%" y="453" width="0.0140%" height="15" fill="rgb(210,164,35)" fg:x="16518" fg:w="7"/><text x="33.3708%" y="463.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (14 samples, 0.03%)</title><rect x="33.1088%" y="501" width="0.0281%" height="15" fill="rgb(248,109,41)" fg:x="16512" fg:w="14"/><text x="33.3588%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.01%)</title><rect x="34.0432%" y="453" width="0.0140%" height="15" fill="rgb(238,23,50)" fg:x="16978" fg:w="7"/><text x="34.2932%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketWrite&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;::write_frame::{{closure}}&gt; (8 samples, 0.02%)</title><rect x="34.0572%" y="453" width="0.0160%" height="15" fill="rgb(211,48,49)" fg:x="16985" fg:w="8"/><text x="34.3072%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;::{{closure}}&gt; (10 samples, 0.02%)</title><rect x="34.2296%" y="437" width="0.0201%" height="15" fill="rgb(223,36,21)" fg:x="17071" fg:w="10"/><text x="34.4796%" y="447.50"></text></g><g><title>&lt;fastwebsockets::Role as core::cmp::PartialEq&gt;::eq (19 samples, 0.04%)</title><rect x="34.4562%" y="421" width="0.0381%" height="15" fill="rgb(207,123,46)" fg:x="17184" fg:w="19"/><text x="34.7062%" y="431.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (43 samples, 0.09%)</title><rect x="34.4943%" y="421" width="0.0862%" height="15" fill="rgb(240,218,32)" fg:x="17203" fg:w="43"/><text x="34.7443%" y="431.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (9 samples, 0.02%)</title><rect x="34.5805%" y="421" width="0.0180%" height="15" fill="rgb(252,5,43)" fg:x="17246" fg:w="9"/><text x="34.8305%" y="431.50"></text></g><g><title>[libc.so.6] (97 samples, 0.19%)</title><rect x="35.1640%" y="229" width="0.1945%" height="15" fill="rgb(252,84,19)" fg:x="17537" fg:w="97"/><text x="35.4140%" y="239.50"></text></g><g><title>__send (340 samples, 0.68%)</title><rect x="34.7369%" y="245" width="0.6817%" height="15" fill="rgb(243,152,39)" fg:x="17324" fg:w="340"/><text x="34.9869%" y="255.50"></text></g><g><title>[unknown] (30 samples, 0.06%)</title><rect x="35.3585%" y="229" width="0.0602%" height="15" fill="rgb(234,160,15)" fg:x="17634" fg:w="30"/><text x="35.6085%" y="239.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (354 samples, 0.71%)</title><rect x="34.7269%" y="341" width="0.7098%" height="15" fill="rgb(237,34,20)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="351.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (354 samples, 0.71%)</title><rect x="34.7269%" y="325" width="0.7098%" height="15" fill="rgb(229,97,13)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="335.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (354 samples, 0.71%)</title><rect x="34.7269%" y="309" width="0.7098%" height="15" fill="rgb(234,71,50)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="319.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (354 samples, 0.71%)</title><rect x="34.7269%" y="293" width="0.7098%" height="15" fill="rgb(253,155,4)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="303.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (354 samples, 0.71%)</title><rect x="34.7269%" y="277" width="0.7098%" height="15" fill="rgb(222,185,37)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="287.50"></text></g><g><title>std::sys_common::net::TcpStream::write (354 samples, 0.71%)</title><rect x="34.7269%" y="261" width="0.7098%" height="15" fill="rgb(251,177,13)" fg:x="17319" fg:w="354"/><text x="34.9769%" y="271.50"></text></g><g><title>std::sys::pal::unix::cvt (9 samples, 0.02%)</title><rect x="35.4187%" y="245" width="0.0180%" height="15" fill="rgb(250,179,40)" fg:x="17664" fg:w="9"/><text x="35.6687%" y="255.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (9 samples, 0.02%)</title><rect x="35.4187%" y="229" width="0.0180%" height="15" fill="rgb(242,44,2)" fg:x="17664" fg:w="9"/><text x="35.6687%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.01%)</title><rect x="35.4588%" y="261" width="0.0120%" height="15" fill="rgb(216,177,13)" fg:x="17684" fg:w="6"/><text x="35.7088%" y="271.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (6 samples, 0.01%)</title><rect x="35.4588%" y="245" width="0.0120%" height="15" fill="rgb(216,106,43)" fg:x="17684" fg:w="6"/><text x="35.7088%" y="255.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (6 samples, 0.01%)</title><rect x="35.4588%" y="229" width="0.0120%" height="15" fill="rgb(216,183,2)" fg:x="17684" fg:w="6"/><text x="35.7088%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.01%)</title><rect x="35.4708%" y="229" width="0.0100%" height="15" fill="rgb(249,75,3)" fg:x="17690" fg:w="5"/><text x="35.7208%" y="239.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (19 samples, 0.04%)</title><rect x="35.4588%" y="309" width="0.0381%" height="15" fill="rgb(219,67,39)" fg:x="17684" fg:w="19"/><text x="35.7088%" y="319.50"></text></g><g><title>tokio::runtime::context::budget (19 samples, 0.04%)</title><rect x="35.4588%" y="293" width="0.0381%" height="15" fill="rgb(253,228,2)" fg:x="17684" fg:w="19"/><text x="35.7088%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.04%)</title><rect x="35.4588%" y="277" width="0.0381%" height="15" fill="rgb(235,138,27)" fg:x="17684" fg:w="19"/><text x="35.7088%" y="287.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (13 samples, 0.03%)</title><rect x="35.4708%" y="261" width="0.0261%" height="15" fill="rgb(236,97,51)" fg:x="17690" fg:w="13"/><text x="35.7208%" y="271.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (13 samples, 0.03%)</title><rect x="35.4708%" y="245" width="0.0261%" height="15" fill="rgb(240,80,30)" fg:x="17690" fg:w="13"/><text x="35.7208%" y="255.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (5 samples, 0.01%)</title><rect x="35.4868%" y="229" width="0.0100%" height="15" fill="rgb(230,178,19)" fg:x="17698" fg:w="5"/><text x="35.7368%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (55 samples, 0.11%)</title><rect x="35.5169%" y="293" width="0.1103%" height="15" fill="rgb(210,190,27)" fg:x="17713" fg:w="55"/><text x="35.7669%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (55 samples, 0.11%)</title><rect x="35.5169%" y="277" width="0.1103%" height="15" fill="rgb(222,107,31)" fg:x="17713" fg:w="55"/><text x="35.7669%" y="287.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (498 samples, 1.00%)</title><rect x="34.6307%" y="405" width="0.9986%" height="15" fill="rgb(216,127,34)" fg:x="17271" fg:w="498"/><text x="34.8807%" y="415.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (497 samples, 1.00%)</title><rect x="34.6327%" y="389" width="0.9966%" height="15" fill="rgb(234,116,52)" fg:x="17272" fg:w="497"/><text x="34.8827%" y="399.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (494 samples, 0.99%)</title><rect x="34.6387%" y="373" width="0.9905%" height="15" fill="rgb(222,124,15)" fg:x="17275" fg:w="494"/><text x="34.8887%" y="383.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (463 samples, 0.93%)</title><rect x="34.7008%" y="357" width="0.9284%" height="15" fill="rgb(231,179,28)" fg:x="17306" fg:w="463"/><text x="34.9508%" y="367.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (95 samples, 0.19%)</title><rect x="35.4387%" y="341" width="0.1905%" height="15" fill="rgb(226,93,45)" fg:x="17674" fg:w="95"/><text x="35.6887%" y="351.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (95 samples, 0.19%)</title><rect x="35.4387%" y="325" width="0.1905%" height="15" fill="rgb(215,8,51)" fg:x="17674" fg:w="95"/><text x="35.6887%" y="335.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (66 samples, 0.13%)</title><rect x="35.4969%" y="309" width="0.1323%" height="15" fill="rgb(223,106,5)" fg:x="17703" fg:w="66"/><text x="35.7469%" y="319.50"></text></g><g><title>core::ptr::read (10 samples, 0.02%)</title><rect x="35.6332%" y="373" width="0.0201%" height="15" fill="rgb(250,191,5)" fg:x="17771" fg:w="10"/><text x="35.8832%" y="383.50"></text></g><g><title>core::mem::take (15 samples, 0.03%)</title><rect x="35.6332%" y="405" width="0.0301%" height="15" fill="rgb(242,132,44)" fg:x="17771" fg:w="15"/><text x="35.8832%" y="415.50"></text></g><g><title>core::mem::replace (15 samples, 0.03%)</title><rect x="35.6332%" y="389" width="0.0301%" height="15" fill="rgb(251,152,29)" fg:x="17771" fg:w="15"/><text x="35.8832%" y="399.50"></text></g><g><title>core::ptr::write (5 samples, 0.01%)</title><rect x="35.6533%" y="373" width="0.0100%" height="15" fill="rgb(218,179,5)" fg:x="17781" fg:w="5"/><text x="35.9033%" y="383.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (532 samples, 1.07%)</title><rect x="34.5986%" y="421" width="1.0667%" height="15" fill="rgb(227,67,19)" fg:x="17255" fg:w="532"/><text x="34.8486%" y="431.50"></text></g><g><title>cfree (826 samples, 1.66%)</title><rect x="35.7716%" y="389" width="1.6562%" height="15" fill="rgb(233,119,31)" fg:x="17840" fg:w="826"/><text x="36.0216%" y="399.50"></text></g><g><title>[libc.so.6] (394 samples, 0.79%)</title><rect x="36.6378%" y="373" width="0.7900%" height="15" fill="rgb(241,120,22)" fg:x="18272" fg:w="394"/><text x="36.8878%" y="383.50"></text></g><g><title>[libc.so.6] (194 samples, 0.39%)</title><rect x="37.0388%" y="357" width="0.3890%" height="15" fill="rgb(224,102,30)" fg:x="18472" fg:w="194"/><text x="37.2888%" y="367.50"></text></g><g><title>[libc.so.6] (60 samples, 0.12%)</title><rect x="37.3075%" y="341" width="0.1203%" height="15" fill="rgb(210,164,37)" fg:x="18606" fg:w="60"/><text x="37.5575%" y="351.50"></text></g><g><title>[libc.so.6] (15 samples, 0.03%)</title><rect x="37.3977%" y="325" width="0.0301%" height="15" fill="rgb(226,191,16)" fg:x="18651" fg:w="15"/><text x="37.6477%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 0.02%)</title><rect x="37.4278%" y="389" width="0.0180%" height="15" fill="rgb(214,40,45)" fg:x="18666" fg:w="9"/><text x="37.6778%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.02%)</title><rect x="37.4278%" y="373" width="0.0180%" height="15" fill="rgb(244,29,26)" fg:x="18666" fg:w="9"/><text x="37.6778%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="37.4278%" y="357" width="0.0180%" height="15" fill="rgb(216,16,5)" fg:x="18666" fg:w="9"/><text x="37.6778%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.02%)</title><rect x="37.4278%" y="341" width="0.0180%" height="15" fill="rgb(249,76,35)" fg:x="18666" fg:w="9"/><text x="37.6778%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (12 samples, 0.02%)</title><rect x="37.4519%" y="357" width="0.0241%" height="15" fill="rgb(207,11,44)" fg:x="18678" fg:w="12"/><text x="37.7019%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (909 samples, 1.82%)</title><rect x="35.6653%" y="421" width="1.8227%" height="15" fill="rgb(228,190,49)" fg:x="17787" fg:w="909"/><text x="35.9153%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (909 samples, 1.82%)</title><rect x="35.6653%" y="405" width="1.8227%" height="15" fill="rgb(214,173,12)" fg:x="17787" fg:w="909"/><text x="35.9153%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (21 samples, 0.04%)</title><rect x="37.4459%" y="389" width="0.0421%" height="15" fill="rgb(218,26,35)" fg:x="18675" fg:w="21"/><text x="37.6959%" y="399.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (21 samples, 0.04%)</title><rect x="37.4459%" y="373" width="0.0421%" height="15" fill="rgb(220,200,19)" fg:x="18675" fg:w="21"/><text x="37.6959%" y="383.50"></text></g><g><title>__rdl_alloc (360 samples, 0.72%)</title><rect x="37.8168%" y="213" width="0.7218%" height="15" fill="rgb(239,95,49)" fg:x="18860" fg:w="360"/><text x="38.0668%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (360 samples, 0.72%)</title><rect x="37.8168%" y="197" width="0.7218%" height="15" fill="rgb(235,85,53)" fg:x="18860" fg:w="360"/><text x="38.0668%" y="207.50"></text></g><g><title>malloc (360 samples, 0.72%)</title><rect x="37.8168%" y="181" width="0.7218%" height="15" fill="rgb(233,133,31)" fg:x="18860" fg:w="360"/><text x="38.0668%" y="191.50"></text></g><g><title>[libc.so.6] (223 samples, 0.45%)</title><rect x="38.0915%" y="165" width="0.4471%" height="15" fill="rgb(218,25,20)" fg:x="18997" fg:w="223"/><text x="38.3415%" y="175.50"></text></g><g><title>[libc.so.6] (30 samples, 0.06%)</title><rect x="38.4785%" y="149" width="0.0602%" height="15" fill="rgb(252,210,38)" fg:x="19190" fg:w="30"/><text x="38.7285%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (375 samples, 0.75%)</title><rect x="37.8068%" y="309" width="0.7519%" height="15" fill="rgb(242,134,21)" fg:x="18855" fg:w="375"/><text x="38.0568%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (375 samples, 0.75%)</title><rect x="37.8068%" y="293" width="0.7519%" height="15" fill="rgb(213,28,48)" fg:x="18855" fg:w="375"/><text x="38.0568%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (375 samples, 0.75%)</title><rect x="37.8068%" y="277" width="0.7519%" height="15" fill="rgb(250,196,2)" fg:x="18855" fg:w="375"/><text x="38.0568%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (370 samples, 0.74%)</title><rect x="37.8168%" y="261" width="0.7419%" height="15" fill="rgb(227,5,17)" fg:x="18860" fg:w="370"/><text x="38.0668%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (370 samples, 0.74%)</title><rect x="37.8168%" y="245" width="0.7419%" height="15" fill="rgb(221,226,24)" fg:x="18860" fg:w="370"/><text x="38.0668%" y="255.50"></text></g><g><title>alloc::alloc::alloc (370 samples, 0.74%)</title><rect x="37.8168%" y="229" width="0.7419%" height="15" fill="rgb(211,5,48)" fg:x="18860" fg:w="370"/><text x="38.0668%" y="239.50"></text></g><g><title>core::ptr::read_volatile (10 samples, 0.02%)</title><rect x="38.5387%" y="213" width="0.0201%" height="15" fill="rgb(219,150,6)" fg:x="19220" fg:w="10"/><text x="38.7887%" y="223.50"></text></g><g><title>fastwebsockets::frame::Payload::to_mut (8,123 samples, 16.29%)</title><rect x="37.6985%" y="405" width="16.2877%" height="15" fill="rgb(251,46,16)" fg:x="18801" fg:w="8123"/><text x="37.9485%" y="415.50">fastwebsockets::frame::Pa..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8,069 samples, 16.18%)</title><rect x="37.8068%" y="389" width="16.1794%" height="15" fill="rgb(220,204,40)" fg:x="18855" fg:w="8069"/><text x="38.0568%" y="399.50">alloc::slice::&lt;impl alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8,069 samples, 16.18%)</title><rect x="37.8068%" y="373" width="16.1794%" height="15" fill="rgb(211,85,2)" fg:x="18855" fg:w="8069"/><text x="38.0568%" y="383.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,069 samples, 16.18%)</title><rect x="37.8068%" y="357" width="16.1794%" height="15" fill="rgb(229,17,7)" fg:x="18855" fg:w="8069"/><text x="38.0568%" y="367.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>alloc::slice::hack::to_vec (8,069 samples, 16.18%)</title><rect x="37.8068%" y="341" width="16.1794%" height="15" fill="rgb(239,72,28)" fg:x="18855" fg:w="8069"/><text x="38.0568%" y="351.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,069 samples, 16.18%)</title><rect x="37.8068%" y="325" width="16.1794%" height="15" fill="rgb(230,47,54)" fg:x="18855" fg:w="8069"/><text x="38.0568%" y="335.50">&lt;T as alloc::slice::hack:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7,694 samples, 15.43%)</title><rect x="38.5587%" y="309" width="15.4275%" height="15" fill="rgb(214,50,8)" fg:x="19230" fg:w="7694"/><text x="38.8087%" y="319.50">core::ptr::const_ptr::&lt;i..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,694 samples, 15.43%)</title><rect x="38.5587%" y="293" width="15.4275%" height="15" fill="rgb(216,198,43)" fg:x="19230" fg:w="7694"/><text x="38.8087%" y="303.50">core::intrinsics::copy_n..</text></g><g><title>[libc.so.6] (7,694 samples, 15.43%)</title><rect x="38.5587%" y="277" width="15.4275%" height="15" fill="rgb(234,20,35)" fg:x="19230" fg:w="7694"/><text x="38.8087%" y="287.50">[libc.so.6]</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="61.0744%" y="373" width="0.0341%" height="15" fill="rgb(254,45,19)" fg:x="30459" fg:w="17"/><text x="61.3244%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to_offsets (10 samples, 0.02%)</title><rect x="61.1265%" y="357" width="0.0201%" height="15" fill="rgb(219,14,44)" fg:x="30485" fg:w="10"/><text x="61.3765%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to_mut (21 samples, 0.04%)</title><rect x="61.1084%" y="373" width="0.0421%" height="15" fill="rgb(217,220,26)" fg:x="30476" fg:w="21"/><text x="61.3584%" y="383.50"></text></g><g><title>fastwebsockets::mask::unmask (3,576 samples, 7.17%)</title><rect x="53.9862%" y="405" width="7.1704%" height="15" fill="rgb(213,158,28)" fg:x="26924" fg:w="3576"/><text x="54.2362%" y="415.50">fastwebsoc..</text></g><g><title>fastwebsockets::mask::unmask_fallback (3,576 samples, 7.17%)</title><rect x="53.9862%" y="389" width="7.1704%" height="15" fill="rgb(252,51,52)" fg:x="26924" fg:w="3576"/><text x="54.2362%" y="399.50">fastwebsoc..</text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (6 samples, 0.01%)</title><rect x="61.2889%" y="149" width="0.0120%" height="15" fill="rgb(246,89,16)" fg:x="30566" fg:w="6"/><text x="61.5389%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (6 samples, 0.01%)</title><rect x="61.2889%" y="133" width="0.0120%" height="15" fill="rgb(216,158,49)" fg:x="30566" fg:w="6"/><text x="61.5389%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (6 samples, 0.01%)</title><rect x="61.2889%" y="117" width="0.0120%" height="15" fill="rgb(236,107,19)" fg:x="30566" fg:w="6"/><text x="61.5389%" y="127.50"></text></g><g><title>core::ptr::write_unaligned (6 samples, 0.01%)</title><rect x="61.2889%" y="101" width="0.0120%" height="15" fill="rgb(228,185,30)" fg:x="30566" fg:w="6"/><text x="61.5389%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.01%)</title><rect x="61.2889%" y="85" width="0.0120%" height="15" fill="rgb(246,134,8)" fg:x="30566" fg:w="6"/><text x="61.5389%" y="95.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (10 samples, 0.02%)</title><rect x="61.3130%" y="149" width="0.0201%" height="15" fill="rgb(214,143,50)" fg:x="30578" fg:w="10"/><text x="61.5630%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (10 samples, 0.02%)</title><rect x="61.3130%" y="133" width="0.0201%" height="15" fill="rgb(228,75,8)" fg:x="30578" fg:w="10"/><text x="61.5630%" y="143.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (10 samples, 0.02%)</title><rect x="61.3130%" y="117" width="0.0201%" height="15" fill="rgb(207,175,4)" fg:x="30578" fg:w="10"/><text x="61.5630%" y="127.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (10 samples, 0.02%)</title><rect x="61.3130%" y="101" width="0.0201%" height="15" fill="rgb(205,108,24)" fg:x="30578" fg:w="10"/><text x="61.5630%" y="111.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (10 samples, 0.02%)</title><rect x="61.3130%" y="85" width="0.0201%" height="15" fill="rgb(244,120,49)" fg:x="30578" fg:w="10"/><text x="61.5630%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.03%)</title><rect x="61.3410%" y="133" width="0.0281%" height="15" fill="rgb(223,47,38)" fg:x="30592" fg:w="14"/><text x="61.5910%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.03%)</title><rect x="61.3410%" y="117" width="0.0281%" height="15" fill="rgb(229,179,11)" fg:x="30592" fg:w="14"/><text x="61.5910%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (14 samples, 0.03%)</title><rect x="61.3410%" y="101" width="0.0281%" height="15" fill="rgb(231,122,1)" fg:x="30592" fg:w="14"/><text x="61.5910%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (14 samples, 0.03%)</title><rect x="61.3410%" y="85" width="0.0281%" height="15" fill="rgb(245,119,9)" fg:x="30592" fg:w="14"/><text x="61.5910%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.01%)</title><rect x="61.3691%" y="133" width="0.0100%" height="15" fill="rgb(241,163,25)" fg:x="30606" fg:w="5"/><text x="61.6191%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.01%)</title><rect x="61.3691%" y="117" width="0.0100%" height="15" fill="rgb(217,214,3)" fg:x="30606" fg:w="5"/><text x="61.6191%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (5 samples, 0.01%)</title><rect x="61.3691%" y="101" width="0.0100%" height="15" fill="rgb(240,86,28)" fg:x="30606" fg:w="5"/><text x="61.6191%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (8 samples, 0.02%)</title><rect x="61.3791%" y="133" width="0.0160%" height="15" fill="rgb(215,47,9)" fg:x="30611" fg:w="8"/><text x="61.6291%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (8 samples, 0.02%)</title><rect x="61.3791%" y="117" width="0.0160%" height="15" fill="rgb(252,25,45)" fg:x="30611" fg:w="8"/><text x="61.6291%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (8 samples, 0.02%)</title><rect x="61.3791%" y="101" width="0.0160%" height="15" fill="rgb(251,164,9)" fg:x="30611" fg:w="8"/><text x="61.6291%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (23 samples, 0.05%)</title><rect x="61.3952%" y="101" width="0.0461%" height="15" fill="rgb(233,194,0)" fg:x="30619" fg:w="23"/><text x="61.6452%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (24 samples, 0.05%)</title><rect x="61.3952%" y="133" width="0.0481%" height="15" fill="rgb(249,111,24)" fg:x="30619" fg:w="24"/><text x="61.6452%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (24 samples, 0.05%)</title><rect x="61.3952%" y="117" width="0.0481%" height="15" fill="rgb(250,223,3)" fg:x="30619" fg:w="24"/><text x="61.6452%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (10 samples, 0.02%)</title><rect x="61.4433%" y="133" width="0.0201%" height="15" fill="rgb(236,178,37)" fg:x="30643" fg:w="10"/><text x="61.6933%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (10 samples, 0.02%)</title><rect x="61.4433%" y="117" width="0.0201%" height="15" fill="rgb(241,158,50)" fg:x="30643" fg:w="10"/><text x="61.6933%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (10 samples, 0.02%)</title><rect x="61.4433%" y="101" width="0.0201%" height="15" fill="rgb(213,121,41)" fg:x="30643" fg:w="10"/><text x="61.6933%" y="111.50"></text></g><g><title>rand_chacha::guts::round (77 samples, 0.15%)</title><rect x="61.3410%" y="149" width="0.1544%" height="15" fill="rgb(240,92,3)" fg:x="30592" fg:w="77"/><text x="61.5910%" y="159.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (16 samples, 0.03%)</title><rect x="61.4633%" y="133" width="0.0321%" height="15" fill="rgb(205,123,3)" fg:x="30653" fg:w="16"/><text x="61.7133%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (16 samples, 0.03%)</title><rect x="61.4633%" y="117" width="0.0321%" height="15" fill="rgb(205,97,47)" fg:x="30653" fg:w="16"/><text x="61.7133%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (16 samples, 0.03%)</title><rect x="61.4633%" y="101" width="0.0321%" height="15" fill="rgb(247,152,14)" fg:x="30653" fg:w="16"/><text x="61.7133%" y="111.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (107 samples, 0.21%)</title><rect x="61.2889%" y="245" width="0.2145%" height="15" fill="rgb(248,195,53)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="255.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (107 samples, 0.21%)</title><rect x="61.2889%" y="229" width="0.2145%" height="15" fill="rgb(226,201,16)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide (107 samples, 0.21%)</title><rect x="61.2889%" y="213" width="0.2145%" height="15" fill="rgb(205,98,0)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (107 samples, 0.21%)</title><rect x="61.2889%" y="197" width="0.2145%" height="15" fill="rgb(214,191,48)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (107 samples, 0.21%)</title><rect x="61.2889%" y="181" width="0.2145%" height="15" fill="rgb(237,112,39)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (107 samples, 0.21%)</title><rect x="61.2889%" y="165" width="0.2145%" height="15" fill="rgb(247,203,27)" fg:x="30566" fg:w="107"/><text x="61.5389%" y="175.50"></text></g><g><title>rand::rng::Rng::gen (181 samples, 0.36%)</title><rect x="61.1586%" y="389" width="0.3629%" height="15" fill="rgb(235,124,28)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="399.50"></text></g><g><title>rand::distributions::other::_&lt;impl rand::distributions::distribution::Distribution&lt;[T: _]&gt; for rand::distributions::Standard&gt;::sample (181 samples, 0.36%)</title><rect x="61.1586%" y="373" width="0.3629%" height="15" fill="rgb(208,207,46)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (181 samples, 0.36%)</title><rect x="61.1586%" y="357" width="0.3629%" height="15" fill="rgb(234,176,4)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="367.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u8&gt; for rand::distributions::Standard&gt;::sample (181 samples, 0.36%)</title><rect x="61.1586%" y="341" width="0.3629%" height="15" fill="rgb(230,133,28)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="351.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (181 samples, 0.36%)</title><rect x="61.1586%" y="325" width="0.3629%" height="15" fill="rgb(211,137,40)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (181 samples, 0.36%)</title><rect x="61.1586%" y="309" width="0.3629%" height="15" fill="rgb(254,35,13)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="319.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (181 samples, 0.36%)</title><rect x="61.1586%" y="293" width="0.3629%" height="15" fill="rgb(225,49,51)" fg:x="30501" fg:w="181"/><text x="61.4086%" y="303.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (117 samples, 0.23%)</title><rect x="61.2869%" y="277" width="0.2346%" height="15" fill="rgb(251,10,15)" fg:x="30565" fg:w="117"/><text x="61.5369%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (117 samples, 0.23%)</title><rect x="61.2869%" y="261" width="0.2346%" height="15" fill="rgb(228,207,15)" fg:x="30565" fg:w="117"/><text x="61.5369%" y="271.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (7 samples, 0.01%)</title><rect x="61.5075%" y="245" width="0.0140%" height="15" fill="rgb(241,99,19)" fg:x="30675" fg:w="7"/><text x="61.7575%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.01%)</title><rect x="61.5075%" y="229" width="0.0140%" height="15" fill="rgb(207,104,49)" fg:x="30675" fg:w="7"/><text x="61.7575%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.01%)</title><rect x="61.5075%" y="213" width="0.0140%" height="15" fill="rgb(234,99,18)" fg:x="30675" fg:w="7"/><text x="61.7575%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 0.02%)</title><rect x="61.5255%" y="341" width="0.0221%" height="15" fill="rgb(213,191,49)" fg:x="30684" fg:w="11"/><text x="61.7755%" y="351.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::_{{constant}}::_{{closure}} (11 samples, 0.02%)</title><rect x="61.5255%" y="325" width="0.0221%" height="15" fill="rgb(210,226,19)" fg:x="30684" fg:w="11"/><text x="61.7755%" y="335.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (11 samples, 0.02%)</title><rect x="61.5255%" y="309" width="0.0221%" height="15" fill="rgb(229,97,18)" fg:x="30684" fg:w="11"/><text x="61.7755%" y="319.50"></text></g><g><title>fastwebsockets::frame::Frame::mask (12,017 samples, 24.10%)</title><rect x="37.4880%" y="421" width="24.0957%" height="15" fill="rgb(211,167,15)" fg:x="18696" fg:w="12017"/><text x="37.7380%" y="431.50">fastwebsockets::frame::Frame::mask</text></g><g><title>rand::random (213 samples, 0.43%)</title><rect x="61.1566%" y="405" width="0.4271%" height="15" fill="rgb(210,169,34)" fg:x="30500" fg:w="213"/><text x="61.4066%" y="415.50"></text></g><g><title>rand::rngs::thread::thread_rng (31 samples, 0.06%)</title><rect x="61.5215%" y="389" width="0.0622%" height="15" fill="rgb(241,121,31)" fg:x="30682" fg:w="31"/><text x="61.7715%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.06%)</title><rect x="61.5215%" y="373" width="0.0622%" height="15" fill="rgb(232,40,11)" fg:x="30682" fg:w="31"/><text x="61.7715%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (31 samples, 0.06%)</title><rect x="61.5215%" y="357" width="0.0622%" height="15" fill="rgb(205,86,26)" fg:x="30682" fg:w="31"/><text x="61.7715%" y="367.50"></text></g><g><title>rand::rngs::thread::thread_rng::_{{closure}} (18 samples, 0.04%)</title><rect x="61.5476%" y="341" width="0.0361%" height="15" fill="rgb(231,126,28)" fg:x="30695" fg:w="18"/><text x="61.7976%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.04%)</title><rect x="61.5476%" y="325" width="0.0361%" height="15" fill="rgb(219,221,18)" fg:x="30695" fg:w="18"/><text x="61.7976%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (18 samples, 0.04%)</title><rect x="61.5476%" y="309" width="0.0361%" height="15" fill="rgb(211,40,0)" fg:x="30695" fg:w="18"/><text x="61.7976%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (12 samples, 0.02%)</title><rect x="61.5596%" y="293" width="0.0241%" height="15" fill="rgb(239,85,43)" fg:x="30701" fg:w="12"/><text x="61.8096%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (12 samples, 0.02%)</title><rect x="61.5596%" y="277" width="0.0241%" height="15" fill="rgb(231,55,21)" fg:x="30701" fg:w="12"/><text x="61.8096%" y="287.50"></text></g><g><title>core::mem::replace (12 samples, 0.02%)</title><rect x="61.5596%" y="261" width="0.0241%" height="15" fill="rgb(225,184,43)" fg:x="30701" fg:w="12"/><text x="61.8096%" y="271.50"></text></g><g><title>core::ptr::write (12 samples, 0.02%)</title><rect x="61.5596%" y="245" width="0.0241%" height="15" fill="rgb(251,158,41)" fg:x="30701" fg:w="12"/><text x="61.8096%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.02%)</title><rect x="61.5997%" y="405" width="0.0180%" height="15" fill="rgb(234,159,37)" fg:x="30721" fg:w="9"/><text x="61.8497%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.02%)</title><rect x="61.5997%" y="389" width="0.0180%" height="15" fill="rgb(216,204,22)" fg:x="30721" fg:w="9"/><text x="61.8497%" y="399.50"></text></g><g><title>[libc.so.6] (6 samples, 0.01%)</title><rect x="61.6057%" y="373" width="0.0120%" height="15" fill="rgb(214,17,3)" fg:x="30724" fg:w="6"/><text x="61.8557%" y="383.50"></text></g><g><title>fastwebsockets::frame::Frame::write (39 samples, 0.08%)</title><rect x="61.5837%" y="421" width="0.0782%" height="15" fill="rgb(212,111,17)" fg:x="30713" fg:w="39"/><text x="61.8337%" y="431.50"></text></g><g><title>fastwebsockets::frame::Frame::fmt_head (22 samples, 0.04%)</title><rect x="61.6177%" y="405" width="0.0441%" height="15" fill="rgb(221,157,24)" fg:x="30730" fg:w="22"/><text x="61.8677%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.01%)</title><rect x="61.6498%" y="389" width="0.0120%" height="15" fill="rgb(252,16,13)" fg:x="30746" fg:w="6"/><text x="61.8998%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.01%)</title><rect x="61.6498%" y="373" width="0.0120%" height="15" fill="rgb(221,62,2)" fg:x="30746" fg:w="6"/><text x="61.8998%" y="383.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (12 samples, 0.02%)</title><rect x="61.9245%" y="405" width="0.0241%" height="15" fill="rgb(247,87,22)" fg:x="30883" fg:w="12"/><text x="62.1745%" y="415.50"></text></g><g><title>std::sys::pal::unix::cvt (80 samples, 0.16%)</title><rect x="62.0468%" y="165" width="0.1604%" height="15" fill="rgb(215,73,9)" fg:x="30944" fg:w="80"/><text x="62.2968%" y="175.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (80 samples, 0.16%)</title><rect x="62.0468%" y="149" width="0.1604%" height="15" fill="rgb(207,175,33)" fg:x="30944" fg:w="80"/><text x="62.2968%" y="159.50"></text></g><g><title>[libc.so.6] (263 samples, 0.53%)</title><rect x="62.5602%" y="149" width="0.5274%" height="15" fill="rgb(243,129,54)" fg:x="31200" fg:w="263"/><text x="62.8102%" y="159.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (548 samples, 1.10%)</title><rect x="62.0428%" y="277" width="1.0988%" height="15" fill="rgb(227,119,45)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="287.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (548 samples, 1.10%)</title><rect x="62.0428%" y="261" width="1.0988%" height="15" fill="rgb(205,109,36)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="271.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (548 samples, 1.10%)</title><rect x="62.0428%" y="245" width="1.0988%" height="15" fill="rgb(205,6,39)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored::_{{closure}} (548 samples, 1.10%)</title><rect x="62.0428%" y="229" width="1.0988%" height="15" fill="rgb(221,32,16)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="239.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write_vectored (548 samples, 1.10%)</title><rect x="62.0428%" y="213" width="1.0988%" height="15" fill="rgb(228,144,50)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::File::write_vectored (548 samples, 1.10%)</title><rect x="62.0428%" y="197" width="1.0988%" height="15" fill="rgb(229,201,53)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="207.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write_vectored (548 samples, 1.10%)</title><rect x="62.0428%" y="181" width="1.0988%" height="15" fill="rgb(249,153,27)" fg:x="30942" fg:w="548"/><text x="62.2928%" y="191.50"></text></g><g><title>writev (466 samples, 0.93%)</title><rect x="62.2073%" y="165" width="0.9344%" height="15" fill="rgb(227,106,25)" fg:x="31024" fg:w="466"/><text x="62.4573%" y="175.50"></text></g><g><title>[unknown] (27 samples, 0.05%)</title><rect x="63.0875%" y="149" width="0.0541%" height="15" fill="rgb(230,65,29)" fg:x="31463" fg:w="27"/><text x="63.3375%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored::_{{closure}} (549 samples, 1.10%)</title><rect x="62.0428%" y="293" width="1.1008%" height="15" fill="rgb(221,57,46)" fg:x="30942" fg:w="549"/><text x="62.2928%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.02%)</title><rect x="63.1657%" y="229" width="0.0180%" height="15" fill="rgb(229,161,17)" fg:x="31502" fg:w="9"/><text x="63.4157%" y="239.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (9 samples, 0.02%)</title><rect x="63.1657%" y="213" width="0.0180%" height="15" fill="rgb(222,213,11)" fg:x="31502" fg:w="9"/><text x="63.4157%" y="223.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (9 samples, 0.02%)</title><rect x="63.1657%" y="197" width="0.0180%" height="15" fill="rgb(235,35,13)" fg:x="31502" fg:w="9"/><text x="63.4157%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.02%)</title><rect x="63.1677%" y="181" width="0.0160%" height="15" fill="rgb(233,158,34)" fg:x="31503" fg:w="8"/><text x="63.4177%" y="191.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (18 samples, 0.04%)</title><rect x="63.1657%" y="277" width="0.0361%" height="15" fill="rgb(215,151,48)" fg:x="31502" fg:w="18"/><text x="63.4157%" y="287.50"></text></g><g><title>tokio::runtime::context::budget (18 samples, 0.04%)</title><rect x="63.1657%" y="261" width="0.0361%" height="15" fill="rgb(229,84,14)" fg:x="31502" fg:w="18"/><text x="63.4157%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.04%)</title><rect x="63.1657%" y="245" width="0.0361%" height="15" fill="rgb(229,68,14)" fg:x="31502" fg:w="18"/><text x="63.4157%" y="255.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (9 samples, 0.02%)</title><rect x="63.1838%" y="229" width="0.0180%" height="15" fill="rgb(243,106,26)" fg:x="31511" fg:w="9"/><text x="63.4338%" y="239.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (9 samples, 0.02%)</title><rect x="63.1838%" y="213" width="0.0180%" height="15" fill="rgb(206,45,38)" fg:x="31511" fg:w="9"/><text x="63.4338%" y="223.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (5 samples, 0.01%)</title><rect x="63.1918%" y="197" width="0.0100%" height="15" fill="rgb(226,6,15)" fg:x="31515" fg:w="5"/><text x="63.4418%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (64 samples, 0.13%)</title><rect x="63.2138%" y="261" width="0.1283%" height="15" fill="rgb(232,22,54)" fg:x="31526" fg:w="64"/><text x="63.4638%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (64 samples, 0.13%)</title><rect x="63.2138%" y="245" width="0.1283%" height="15" fill="rgb(229,222,32)" fg:x="31526" fg:w="64"/><text x="63.4638%" y="255.50"></text></g><g><title>&lt;tokio::io::util::write_vectored::WriteVectored&lt;W&gt; as core::future::future::Future&gt;::poll (701 samples, 1.41%)</title><rect x="61.9486%" y="405" width="1.4056%" height="15" fill="rgb(228,62,29)" fg:x="30895" fg:w="701"/><text x="62.1986%" y="415.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (701 samples, 1.41%)</title><rect x="61.9486%" y="389" width="1.4056%" height="15" fill="rgb(251,103,34)" fg:x="30895" fg:w="701"/><text x="62.1986%" y="399.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (701 samples, 1.41%)</title><rect x="61.9486%" y="373" width="1.4056%" height="15" fill="rgb(233,12,30)" fg:x="30895" fg:w="701"/><text x="62.1986%" y="383.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (699 samples, 1.40%)</title><rect x="61.9526%" y="357" width="1.4016%" height="15" fill="rgb(238,52,0)" fg:x="30897" fg:w="699"/><text x="62.2026%" y="367.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored (665 samples, 1.33%)</title><rect x="62.0208%" y="341" width="1.3334%" height="15" fill="rgb(223,98,5)" fg:x="30931" fg:w="665"/><text x="62.2708%" y="351.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_io (665 samples, 1.33%)</title><rect x="62.0208%" y="325" width="1.3334%" height="15" fill="rgb(228,75,37)" fg:x="30931" fg:w="665"/><text x="62.2708%" y="335.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (665 samples, 1.33%)</title><rect x="62.0208%" y="309" width="1.3334%" height="15" fill="rgb(205,115,49)" fg:x="30931" fg:w="665"/><text x="62.2708%" y="319.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (105 samples, 0.21%)</title><rect x="63.1436%" y="293" width="0.2105%" height="15" fill="rgb(250,154,43)" fg:x="31491" fg:w="105"/><text x="63.3936%" y="303.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (76 samples, 0.15%)</title><rect x="63.2018%" y="277" width="0.1524%" height="15" fill="rgb(226,43,29)" fg:x="31520" fg:w="76"/><text x="63.4518%" y="287.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (5 samples, 0.01%)</title><rect x="63.3903%" y="389" width="0.0100%" height="15" fill="rgb(249,228,39)" fg:x="31614" fg:w="5"/><text x="63.6403%" y="399.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (14,633 samples, 29.34%)</title><rect x="34.0732%" y="453" width="29.3411%" height="15" fill="rgb(216,79,43)" fg:x="16993" fg:w="14633"/><text x="34.3232%" y="463.50">fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame:..</text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (14,545 samples, 29.16%)</title><rect x="34.2497%" y="437" width="29.1647%" height="15" fill="rgb(228,95,12)" fg:x="17081" fg:w="14545"/><text x="34.4997%" y="447.50">fastwebsockets::WriteHalf::write_frame::_{{clos..</text></g><g><title>fastwebsockets::frame::Frame::writev::_{{closure}} (874 samples, 1.75%)</title><rect x="61.6619%" y="421" width="1.7525%" height="15" fill="rgb(249,221,15)" fg:x="30752" fg:w="874"/><text x="61.9119%" y="431.50"></text></g><g><title>fastwebsockets::frame::Frame::fmt_head (30 samples, 0.06%)</title><rect x="63.3542%" y="405" width="0.0602%" height="15" fill="rgb(233,34,13)" fg:x="31596" fg:w="30"/><text x="63.6042%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (7 samples, 0.01%)</title><rect x="63.4003%" y="389" width="0.0140%" height="15" fill="rgb(214,103,39)" fg:x="31619" fg:w="7"/><text x="63.6503%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="63.4003%" y="373" width="0.0140%" height="15" fill="rgb(251,126,39)" fg:x="31619" fg:w="7"/><text x="63.6503%" y="383.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,896 samples, 29.87%)</title><rect x="33.5739%" y="485" width="29.8685%" height="15" fill="rgb(214,216,36)" fg:x="16744" fg:w="14896"/><text x="33.8239%" y="495.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Futu..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (14,896 samples, 29.87%)</title><rect x="33.5739%" y="469" width="29.8685%" height="15" fill="rgb(220,221,8)" fg:x="16744" fg:w="14896"/><text x="33.8239%" y="479.50">wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::W..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;wisp_mux::ws::Frame&gt; for fastwebsockets::frame::Frame&gt;::from (14 samples, 0.03%)</title><rect x="63.4143%" y="453" width="0.0281%" height="15" fill="rgb(240,216,3)" fg:x="31626" fg:w="14"/><text x="63.6643%" y="463.50"></text></g><g><title>wisp_mux::fastwebsockets::match_payload_reverse (8 samples, 0.02%)</title><rect x="63.4264%" y="437" width="0.0160%" height="15" fill="rgb(232,218,17)" fg:x="31632" fg:w="8"/><text x="63.6764%" y="447.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::try_lock (47 samples, 0.09%)</title><rect x="63.4705%" y="469" width="0.0942%" height="15" fill="rgb(229,163,45)" fg:x="31654" fg:w="47"/><text x="63.7205%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (47 samples, 0.09%)</title><rect x="63.4705%" y="453" width="0.0942%" height="15" fill="rgb(231,110,42)" fg:x="31654" fg:w="47"/><text x="63.7205%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (47 samples, 0.09%)</title><rect x="63.4705%" y="437" width="0.0942%" height="15" fill="rgb(208,170,48)" fg:x="31654" fg:w="47"/><text x="63.7205%" y="447.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (66 samples, 0.13%)</title><rect x="63.4424%" y="485" width="0.1323%" height="15" fill="rgb(239,116,25)" fg:x="31640" fg:w="66"/><text x="63.6924%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.27%)</title><rect x="63.7111%" y="453" width="0.2687%" height="15" fill="rgb(219,200,50)" fg:x="31774" fg:w="134"/><text x="63.9611%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (130 samples, 0.26%)</title><rect x="63.7191%" y="437" width="0.2607%" height="15" fill="rgb(245,200,0)" fg:x="31778" fg:w="130"/><text x="63.9691%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (130 samples, 0.26%)</title><rect x="63.7191%" y="421" width="0.2607%" height="15" fill="rgb(245,119,33)" fg:x="31778" fg:w="130"/><text x="63.9691%" y="431.50"></text></g><g><title>__rdl_dealloc (130 samples, 0.26%)</title><rect x="63.7191%" y="405" width="0.2607%" height="15" fill="rgb(231,125,12)" fg:x="31778" fg:w="130"/><text x="63.9691%" y="415.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (130 samples, 0.26%)</title><rect x="63.7191%" y="389" width="0.2607%" height="15" fill="rgb(216,96,41)" fg:x="31778" fg:w="130"/><text x="63.9691%" y="399.50"></text></g><g><title>cfree (130 samples, 0.26%)</title><rect x="63.7191%" y="373" width="0.2607%" height="15" fill="rgb(248,43,45)" fg:x="31778" fg:w="130"/><text x="63.9691%" y="383.50"></text></g><g><title>[libc.so.6] (31 samples, 0.06%)</title><rect x="63.9176%" y="357" width="0.0622%" height="15" fill="rgb(217,222,7)" fg:x="31877" fg:w="31"/><text x="64.1676%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (211 samples, 0.42%)</title><rect x="63.5748%" y="485" width="0.4231%" height="15" fill="rgb(233,28,6)" fg:x="31706" fg:w="211"/><text x="63.8248%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (211 samples, 0.42%)</title><rect x="63.5748%" y="469" width="0.4231%" height="15" fill="rgb(231,218,15)" fg:x="31706" fg:w="211"/><text x="63.8248%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;::wisp_write_split::{{closure}}&gt; (9 samples, 0.02%)</title><rect x="63.9798%" y="453" width="0.0180%" height="15" fill="rgb(226,171,48)" fg:x="31908" fg:w="9"/><text x="64.2298%" y="463.50"></text></g><g><title>&lt;slab::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="63.9998%" y="437" width="0.0160%" height="15" fill="rgb(235,201,9)" fg:x="31918" fg:w="8"/><text x="64.2498%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;slab::Slab&lt;futures_util::lock::mutex::Waiter&gt;&gt;&gt; (16 samples, 0.03%)</title><rect x="64.0159%" y="437" width="0.0321%" height="15" fill="rgb(217,80,15)" fg:x="31926" fg:w="16"/><text x="64.2659%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="64.0159%" y="421" width="0.0321%" height="15" fill="rgb(219,152,8)" fg:x="31926" fg:w="16"/><text x="64.2659%" y="431.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (16 samples, 0.03%)</title><rect x="64.0159%" y="405" width="0.0321%" height="15" fill="rgb(243,107,38)" fg:x="31926" fg:w="16"/><text x="64.2659%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (16 samples, 0.03%)</title><rect x="64.0159%" y="389" width="0.0321%" height="15" fill="rgb(231,17,5)" fg:x="31926" fg:w="16"/><text x="64.2659%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.03%)</title><rect x="64.0159%" y="373" width="0.0321%" height="15" fill="rgb(209,25,54)" fg:x="31926" fg:w="16"/><text x="64.2659%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (82 samples, 0.16%)</title><rect x="64.0480%" y="437" width="0.1644%" height="15" fill="rgb(219,0,2)" fg:x="31942" fg:w="82"/><text x="64.2980%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_and (82 samples, 0.16%)</title><rect x="64.0480%" y="421" width="0.1644%" height="15" fill="rgb(246,9,5)" fg:x="31942" fg:w="82"/><text x="64.2980%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5 samples, 0.01%)</title><rect x="64.2224%" y="357" width="0.0100%" height="15" fill="rgb(226,159,4)" fg:x="32029" fg:w="5"/><text x="64.4724%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (5 samples, 0.01%)</title><rect x="64.2224%" y="341" width="0.0100%" height="15" fill="rgb(219,175,34)" fg:x="32029" fg:w="5"/><text x="64.4724%" y="351.50"></text></g><g><title>tokio::runtime::context::with_scheduler (5 samples, 0.01%)</title><rect x="64.2224%" y="325" width="0.0100%" height="15" fill="rgb(236,10,46)" fg:x="32029" fg:w="5"/><text x="64.4724%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (5 samples, 0.01%)</title><rect x="64.2224%" y="309" width="0.0100%" height="15" fill="rgb(240,211,16)" fg:x="32029" fg:w="5"/><text x="64.4724%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (7 samples, 0.01%)</title><rect x="64.2224%" y="373" width="0.0140%" height="15" fill="rgb(205,3,43)" fg:x="32029" fg:w="7"/><text x="64.4724%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::load (7 samples, 0.01%)</title><rect x="64.2364%" y="341" width="0.0140%" height="15" fill="rgb(245,7,22)" fg:x="32036" fg:w="7"/><text x="64.4864%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.01%)</title><rect x="64.2364%" y="325" width="0.0140%" height="15" fill="rgb(239,132,32)" fg:x="32036" fg:w="7"/><text x="64.4864%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.01%)</title><rect x="64.2364%" y="309" width="0.0140%" height="15" fill="rgb(228,202,34)" fg:x="32036" fg:w="7"/><text x="64.4864%" y="319.50"></text></g><g><title>futures_util::lock::mutex::Waiter::wake (21 samples, 0.04%)</title><rect x="64.2124%" y="437" width="0.0421%" height="15" fill="rgb(254,200,22)" fg:x="32024" fg:w="21"/><text x="64.4624%" y="447.50"></text></g><g><title>core::task::wake::Waker::wake (19 samples, 0.04%)</title><rect x="64.2164%" y="421" width="0.0381%" height="15" fill="rgb(219,10,39)" fg:x="32026" fg:w="19"/><text x="64.4664%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (19 samples, 0.04%)</title><rect x="64.2164%" y="405" width="0.0381%" height="15" fill="rgb(226,210,39)" fg:x="32026" fg:w="19"/><text x="64.4664%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (19 samples, 0.04%)</title><rect x="64.2164%" y="389" width="0.0381%" height="15" fill="rgb(208,219,16)" fg:x="32026" fg:w="19"/><text x="64.4664%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (9 samples, 0.02%)</title><rect x="64.2364%" y="373" width="0.0180%" height="15" fill="rgb(216,158,51)" fg:x="32036" fg:w="9"/><text x="64.4864%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (9 samples, 0.02%)</title><rect x="64.2364%" y="357" width="0.0180%" height="15" fill="rgb(233,14,44)" fg:x="32036" fg:w="9"/><text x="64.4864%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (143 samples, 0.29%)</title><rect x="63.9978%" y="485" width="0.2867%" height="15" fill="rgb(237,97,39)" fg:x="31917" fg:w="143"/><text x="64.2478%" y="495.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.29%)</title><rect x="63.9978%" y="469" width="0.2867%" height="15" fill="rgb(218,198,43)" fg:x="31917" fg:w="143"/><text x="64.2478%" y="479.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::unlock (143 samples, 0.29%)</title><rect x="63.9978%" y="453" width="0.2867%" height="15" fill="rgb(231,104,20)" fg:x="31917" fg:w="143"/><text x="64.2478%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.03%)</title><rect x="64.2545%" y="437" width="0.0301%" height="15" fill="rgb(254,36,13)" fg:x="32045" fg:w="15"/><text x="64.5045%" y="447.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (13 samples, 0.03%)</title><rect x="64.2585%" y="421" width="0.0261%" height="15" fill="rgb(248,14,50)" fg:x="32047" fg:w="13"/><text x="64.5085%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.03%)</title><rect x="64.2585%" y="405" width="0.0261%" height="15" fill="rgb(217,107,29)" fg:x="32047" fg:w="13"/><text x="64.5085%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.03%)</title><rect x="64.2585%" y="389" width="0.0261%" height="15" fill="rgb(251,169,33)" fg:x="32047" fg:w="13"/><text x="64.5085%" y="399.50"></text></g><g><title>simple_wisp_client::main::_{{closure}}::_{{closure}} (23,607 samples, 47.34%)</title><rect x="17.0376%" y="565" width="47.3352%" height="15" fill="rgb(217,108,32)" fg:x="8497" fg:w="23607"/><text x="17.2876%" y="575.50">simple_wisp_client::main::_{{closure}}::_{{closure}}</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write::_{{closure}} (16,237 samples, 32.56%)</title><rect x="31.8154%" y="549" width="32.5573%" height="15" fill="rgb(219,66,42)" fg:x="15867" fg:w="16237"/><text x="32.0654%" y="559.50">wisp_mux::stream::MuxStreamWrite::write::_{{closure}}</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload::_{{closure}} (16,223 samples, 32.53%)</title><rect x="31.8435%" y="533" width="32.5293%" height="15" fill="rgb(206,180,7)" fg:x="15881" fg:w="16223"/><text x="32.0935%" y="543.50">wisp_mux::stream::MuxStreamWrite::write_payload::_{{c..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload_internal::_{{closure}} (15,866 samples, 31.81%)</title><rect x="32.5594%" y="517" width="31.8134%" height="15" fill="rgb(208,226,31)" fg:x="16238" fg:w="15866"/><text x="32.8094%" y="527.50">wisp_mux::stream::MuxStreamWrite::write_payload_int..</text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_split::_{{closure}} (15,578 samples, 31.24%)</title><rect x="33.1368%" y="501" width="31.2360%" height="15" fill="rgb(218,26,49)" fg:x="16526" fg:w="15578"/><text x="33.3868%" y="511.50">wisp_mux::ws::LockedWebSocketWrite::write_split::_..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (43 samples, 0.09%)</title><rect x="64.2866%" y="485" width="0.0862%" height="15" fill="rgb(233,197,48)" fg:x="32061" fg:w="43"/><text x="64.5366%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (40 samples, 0.08%)</title><rect x="64.2926%" y="469" width="0.0802%" height="15" fill="rgb(252,181,51)" fg:x="32064" fg:w="40"/><text x="64.5426%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (40 samples, 0.08%)</title><rect x="64.2926%" y="453" width="0.0802%" height="15" fill="rgb(253,90,19)" fg:x="32064" fg:w="40"/><text x="64.5426%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.06%)</title><rect x="64.3126%" y="437" width="0.0602%" height="15" fill="rgb(215,171,30)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.06%)</title><rect x="64.3126%" y="421" width="0.0602%" height="15" fill="rgb(214,222,9)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.06%)</title><rect x="64.3126%" y="405" width="0.0602%" height="15" fill="rgb(223,3,22)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="415.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.06%)</title><rect x="64.3126%" y="389" width="0.0602%" height="15" fill="rgb(225,196,46)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="399.50"></text></g><g><title>__rdl_alloc (30 samples, 0.06%)</title><rect x="64.3126%" y="373" width="0.0602%" height="15" fill="rgb(209,110,37)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="383.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (30 samples, 0.06%)</title><rect x="64.3126%" y="357" width="0.0602%" height="15" fill="rgb(249,89,12)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="367.50"></text></g><g><title>malloc (30 samples, 0.06%)</title><rect x="64.3126%" y="341" width="0.0602%" height="15" fill="rgb(226,27,33)" fg:x="32074" fg:w="30"/><text x="64.5626%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.03%)</title><rect x="66.5022%" y="341" width="0.0261%" height="15" fill="rgb(213,82,22)" fg:x="33166" fg:w="13"/><text x="66.7522%" y="351.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;fastwebsockets::frame::OpCode&gt; for wisp_mux::ws::OpCode&gt;::from (13 samples, 0.03%)</title><rect x="66.5022%" y="325" width="0.0261%" height="15" fill="rgb(248,140,0)" fg:x="33166" fg:w="13"/><text x="66.7522%" y="335.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (31 samples, 0.06%)</title><rect x="66.5343%" y="341" width="0.0622%" height="15" fill="rgb(228,106,3)" fg:x="33182" fg:w="31"/><text x="66.7843%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (50 samples, 0.10%)</title><rect x="66.5965%" y="341" width="0.1003%" height="15" fill="rgb(209,23,37)" fg:x="33213" fg:w="50"/><text x="66.8465%" y="351.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (50 samples, 0.10%)</title><rect x="66.5965%" y="325" width="0.1003%" height="15" fill="rgb(241,93,50)" fg:x="33213" fg:w="50"/><text x="66.8465%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.01%)</title><rect x="67.4687%" y="325" width="0.0140%" height="15" fill="rgb(253,46,43)" fg:x="33648" fg:w="7"/><text x="67.7187%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (21 samples, 0.04%)</title><rect x="69.0528%" y="277" width="0.0421%" height="15" fill="rgb(226,206,43)" fg:x="34438" fg:w="21"/><text x="69.3028%" y="287.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (32 samples, 0.06%)</title><rect x="69.0347%" y="293" width="0.0642%" height="15" fill="rgb(217,54,7)" fg:x="34429" fg:w="32"/><text x="69.2847%" y="303.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (78 samples, 0.16%)</title><rect x="69.1049%" y="277" width="0.1564%" height="15" fill="rgb(223,5,52)" fg:x="34464" fg:w="78"/><text x="69.3549%" y="287.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (46 samples, 0.09%)</title><rect x="69.1691%" y="261" width="0.0922%" height="15" fill="rgb(206,52,46)" fg:x="34496" fg:w="46"/><text x="69.4191%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (38 samples, 0.08%)</title><rect x="69.1851%" y="245" width="0.0762%" height="15" fill="rgb(253,136,11)" fg:x="34504" fg:w="38"/><text x="69.4351%" y="255.50"></text></g><g><title>[libc.so.6] (270 samples, 0.54%)</title><rect x="70.1135%" y="69" width="0.5414%" height="15" fill="rgb(208,106,33)" fg:x="34967" fg:w="270"/><text x="70.3635%" y="79.50"></text></g><g><title>recv (680 samples, 1.36%)</title><rect x="69.4358%" y="85" width="1.3635%" height="15" fill="rgb(206,54,4)" fg:x="34629" fg:w="680"/><text x="69.6858%" y="95.50"></text></g><g><title>[unknown] (72 samples, 0.14%)</title><rect x="70.6549%" y="69" width="0.1444%" height="15" fill="rgb(213,3,15)" fg:x="35237" fg:w="72"/><text x="70.9049%" y="79.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (732 samples, 1.47%)</title><rect x="69.4317%" y="213" width="1.4678%" height="15" fill="rgb(252,211,39)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="223.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (732 samples, 1.47%)</title><rect x="69.4317%" y="197" width="1.4678%" height="15" fill="rgb(223,6,36)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="207.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (732 samples, 1.47%)</title><rect x="69.4317%" y="181" width="1.4678%" height="15" fill="rgb(252,169,45)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="191.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (732 samples, 1.47%)</title><rect x="69.4317%" y="165" width="1.4678%" height="15" fill="rgb(212,48,26)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="175.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (732 samples, 1.47%)</title><rect x="69.4317%" y="149" width="1.4678%" height="15" fill="rgb(251,102,48)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="159.50"></text></g><g><title>std::sys_common::net::TcpStream::read (732 samples, 1.47%)</title><rect x="69.4317%" y="133" width="1.4678%" height="15" fill="rgb(243,208,16)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="143.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (732 samples, 1.47%)</title><rect x="69.4317%" y="117" width="1.4678%" height="15" fill="rgb(219,96,24)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="127.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (732 samples, 1.47%)</title><rect x="69.4317%" y="101" width="1.4678%" height="15" fill="rgb(219,33,29)" fg:x="34627" fg:w="732"/><text x="69.6817%" y="111.50"></text></g><g><title>std::sys::pal::unix::cvt (50 samples, 0.10%)</title><rect x="70.7992%" y="85" width="0.1003%" height="15" fill="rgb(223,176,5)" fg:x="35309" fg:w="50"/><text x="71.0492%" y="95.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (48 samples, 0.10%)</title><rect x="70.8033%" y="69" width="0.0962%" height="15" fill="rgb(228,140,14)" fg:x="35311" fg:w="48"/><text x="71.0533%" y="79.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (26 samples, 0.05%)</title><rect x="70.9175%" y="213" width="0.0521%" height="15" fill="rgb(217,179,31)" fg:x="35368" fg:w="26"/><text x="71.1675%" y="223.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (11 samples, 0.02%)</title><rect x="70.9697%" y="213" width="0.0221%" height="15" fill="rgb(230,9,30)" fg:x="35394" fg:w="11"/><text x="71.2197%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.02%)</title><rect x="70.9757%" y="197" width="0.0160%" height="15" fill="rgb(230,136,20)" fg:x="35397" fg:w="8"/><text x="71.2257%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.02%)</title><rect x="70.9757%" y="181" width="0.0160%" height="15" fill="rgb(215,210,22)" fg:x="35397" fg:w="8"/><text x="71.2257%" y="191.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (7 samples, 0.01%)</title><rect x="71.0519%" y="101" width="0.0140%" height="15" fill="rgb(218,43,5)" fg:x="35435" fg:w="7"/><text x="71.3019%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (6 samples, 0.01%)</title><rect x="71.0539%" y="85" width="0.0120%" height="15" fill="rgb(216,11,5)" fg:x="35436" fg:w="6"/><text x="71.3039%" y="95.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (6 samples, 0.01%)</title><rect x="71.0539%" y="69" width="0.0120%" height="15" fill="rgb(209,82,29)" fg:x="35436" fg:w="6"/><text x="71.3039%" y="79.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (6 samples, 0.01%)</title><rect x="71.0539%" y="53" width="0.0120%" height="15" fill="rgb(244,115,12)" fg:x="35436" fg:w="6"/><text x="71.3039%" y="63.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (6 samples, 0.01%)</title><rect x="71.0539%" y="37" width="0.0120%" height="15" fill="rgb(222,82,18)" fg:x="35436" fg:w="6"/><text x="71.3039%" y="47.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (21 samples, 0.04%)</title><rect x="71.0338%" y="181" width="0.0421%" height="15" fill="rgb(249,227,8)" fg:x="35426" fg:w="21"/><text x="71.2838%" y="191.50"></text></g><g><title>tokio::runtime::context::budget (21 samples, 0.04%)</title><rect x="71.0338%" y="165" width="0.0421%" height="15" fill="rgb(253,141,45)" fg:x="35426" fg:w="21"/><text x="71.2838%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.04%)</title><rect x="71.0338%" y="149" width="0.0421%" height="15" fill="rgb(234,184,4)" fg:x="35426" fg:w="21"/><text x="71.2838%" y="159.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (19 samples, 0.04%)</title><rect x="71.0379%" y="133" width="0.0381%" height="15" fill="rgb(218,194,23)" fg:x="35428" fg:w="19"/><text x="71.2879%" y="143.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (19 samples, 0.04%)</title><rect x="71.0379%" y="117" width="0.0381%" height="15" fill="rgb(235,66,41)" fg:x="35428" fg:w="19"/><text x="71.2879%" y="127.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (5 samples, 0.01%)</title><rect x="71.0659%" y="101" width="0.0100%" height="15" fill="rgb(245,217,1)" fg:x="35442" fg:w="5"/><text x="71.3159%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (60 samples, 0.12%)</title><rect x="71.1080%" y="165" width="0.1203%" height="15" fill="rgb(229,91,1)" fg:x="35463" fg:w="60"/><text x="71.3580%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (60 samples, 0.12%)</title><rect x="71.1080%" y="149" width="0.1203%" height="15" fill="rgb(207,101,30)" fg:x="35463" fg:w="60"/><text x="71.3580%" y="159.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (982 samples, 1.97%)</title><rect x="69.2693%" y="277" width="1.9690%" height="15" fill="rgb(223,82,49)" fg:x="34546" fg:w="982"/><text x="69.5193%" y="287.50">&lt;..</text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (981 samples, 1.97%)</title><rect x="69.2713%" y="261" width="1.9670%" height="15" fill="rgb(218,167,17)" fg:x="34547" fg:w="981"/><text x="69.5213%" y="271.50">&lt;..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (941 samples, 1.89%)</title><rect x="69.3515%" y="245" width="1.8868%" height="15" fill="rgb(208,103,14)" fg:x="34587" fg:w="941"/><text x="69.6015%" y="255.50">t..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (923 samples, 1.85%)</title><rect x="69.3876%" y="229" width="1.8507%" height="15" fill="rgb(238,20,8)" fg:x="34605" fg:w="923"/><text x="69.6376%" y="239.50">t..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (120 samples, 0.24%)</title><rect x="70.9978%" y="213" width="0.2406%" height="15" fill="rgb(218,80,54)" fg:x="35408" fg:w="120"/><text x="71.2478%" y="223.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (117 samples, 0.23%)</title><rect x="71.0038%" y="197" width="0.2346%" height="15" fill="rgb(240,144,17)" fg:x="35411" fg:w="117"/><text x="71.2538%" y="207.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (81 samples, 0.16%)</title><rect x="71.0760%" y="181" width="0.1624%" height="15" fill="rgb(245,27,50)" fg:x="35447" fg:w="81"/><text x="71.3260%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (11 samples, 0.02%)</title><rect x="71.2484%" y="277" width="0.0221%" height="15" fill="rgb(251,51,7)" fg:x="35533" fg:w="11"/><text x="71.4984%" y="287.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (15 samples, 0.03%)</title><rect x="71.2705%" y="277" width="0.0301%" height="15" fill="rgb(245,217,29)" fg:x="35544" fg:w="15"/><text x="71.5205%" y="287.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (1,104 samples, 2.21%)</title><rect x="69.0989%" y="293" width="2.2137%" height="15" fill="rgb(221,176,29)" fg:x="34461" fg:w="1104"/><text x="69.3489%" y="303.50">&lt;..</text></g><g><title>tokio::io::read_buf::ReadBuf::uninit (6 samples, 0.01%)</title><rect x="71.3005%" y="277" width="0.0120%" height="15" fill="rgb(212,180,24)" fg:x="35559" fg:w="6"/><text x="71.5505%" y="287.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u16 (11 samples, 0.02%)</title><rect x="71.3126%" y="293" width="0.0221%" height="15" fill="rgb(254,24,2)" fg:x="35565" fg:w="11"/><text x="71.5626%" y="303.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (9 samples, 0.02%)</title><rect x="71.3166%" y="277" width="0.0180%" height="15" fill="rgb(230,100,2)" fg:x="35567" fg:w="9"/><text x="71.5666%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (9 samples, 0.02%)</title><rect x="71.3166%" y="261" width="0.0180%" height="15" fill="rgb(219,142,25)" fg:x="35567" fg:w="9"/><text x="71.5666%" y="271.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (5 samples, 0.01%)</title><rect x="71.4208%" y="261" width="0.0100%" height="15" fill="rgb(240,73,43)" fg:x="35619" fg:w="5"/><text x="71.6708%" y="271.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (5 samples, 0.01%)</title><rect x="71.4208%" y="245" width="0.0100%" height="15" fill="rgb(214,114,15)" fg:x="35619" fg:w="5"/><text x="71.6708%" y="255.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (5 samples, 0.01%)</title><rect x="71.4208%" y="229" width="0.0100%" height="15" fill="rgb(207,130,4)" fg:x="35619" fg:w="5"/><text x="71.6708%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,099 samples, 6.21%)</title><rect x="71.4569%" y="213" width="6.2139%" height="15" fill="rgb(221,25,40)" fg:x="35637" fg:w="3099"/><text x="71.7069%" y="223.50">core::in..</text></g><g><title>[libc.so.6] (3,097 samples, 6.21%)</title><rect x="71.4609%" y="197" width="6.2099%" height="15" fill="rgb(241,184,7)" fg:x="35639" fg:w="3097"/><text x="71.7109%" y="207.50">[libc.so..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,111 samples, 6.24%)</title><rect x="71.4369%" y="261" width="6.2380%" height="15" fill="rgb(235,159,4)" fg:x="35627" fg:w="3111"/><text x="71.6869%" y="271.50">alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,111 samples, 6.24%)</title><rect x="71.4369%" y="245" width="6.2380%" height="15" fill="rgb(214,87,48)" fg:x="35627" fg:w="3111"/><text x="71.6869%" y="255.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,111 samples, 6.24%)</title><rect x="71.4369%" y="229" width="6.2380%" height="15" fill="rgb(246,198,24)" fg:x="35627" fg:w="3111"/><text x="71.6869%" y="239.50">alloc::v..</text></g><g><title>[libc.so.6] (1,261 samples, 2.53%)</title><rect x="79.0203%" y="101" width="2.5285%" height="15" fill="rgb(209,66,40)" fg:x="39409" fg:w="1261"/><text x="79.2703%" y="111.50">[l..</text></g><g><title>[libc.so.6] (600 samples, 1.20%)</title><rect x="80.3457%" y="85" width="1.2031%" height="15" fill="rgb(233,147,39)" fg:x="40070" fg:w="600"/><text x="80.5957%" y="95.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="81.5287%" y="69" width="0.0201%" height="15" fill="rgb(231,145,52)" fg:x="40660" fg:w="10"/><text x="81.7787%" y="79.50"></text></g><g><title>__lll_lock_wait_private (29 samples, 0.06%)</title><rect x="81.5488%" y="101" width="0.0581%" height="15" fill="rgb(206,20,26)" fg:x="40670" fg:w="29"/><text x="81.7988%" y="111.50"></text></g><g><title>__rdl_alloc (1,958 samples, 3.93%)</title><rect x="77.7049%" y="149" width="3.9261%" height="15" fill="rgb(238,220,4)" fg:x="38753" fg:w="1958"/><text x="77.9549%" y="159.50">__rd..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,958 samples, 3.93%)</title><rect x="77.7049%" y="133" width="3.9261%" height="15" fill="rgb(252,195,42)" fg:x="38753" fg:w="1958"/><text x="77.9549%" y="143.50">std:..</text></g><g><title>malloc (1,954 samples, 3.92%)</title><rect x="77.7129%" y="117" width="3.9180%" height="15" fill="rgb(209,10,6)" fg:x="38757" fg:w="1954"/><text x="77.9629%" y="127.50">mall..</text></g><g><title>__lll_lock_wake_private (12 samples, 0.02%)</title><rect x="81.6069%" y="101" width="0.0241%" height="15" fill="rgb(229,3,52)" fg:x="40699" fg:w="12"/><text x="81.8569%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="81.6209%" y="85" width="0.0100%" height="15" fill="rgb(253,49,37)" fg:x="40706" fg:w="5"/><text x="81.8709%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,972 samples, 3.95%)</title><rect x="77.6829%" y="261" width="3.9541%" height="15" fill="rgb(240,103,49)" fg:x="38742" fg:w="1972"/><text x="77.9329%" y="271.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,972 samples, 3.95%)</title><rect x="77.6829%" y="245" width="3.9541%" height="15" fill="rgb(250,182,30)" fg:x="38742" fg:w="1972"/><text x="77.9329%" y="255.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,972 samples, 3.95%)</title><rect x="77.6829%" y="229" width="3.9541%" height="15" fill="rgb(248,8,30)" fg:x="38742" fg:w="1972"/><text x="77.9329%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,972 samples, 3.95%)</title><rect x="77.6829%" y="213" width="3.9541%" height="15" fill="rgb(237,120,30)" fg:x="38742" fg:w="1972"/><text x="77.9329%" y="223.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,961 samples, 3.93%)</title><rect x="77.7049%" y="197" width="3.9321%" height="15" fill="rgb(221,146,34)" fg:x="38753" fg:w="1961"/><text x="77.9549%" y="207.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,961 samples, 3.93%)</title><rect x="77.7049%" y="181" width="3.9321%" height="15" fill="rgb(242,55,13)" fg:x="38753" fg:w="1961"/><text x="77.9549%" y="191.50">allo..</text></g><g><title>alloc::alloc::alloc (1,961 samples, 3.93%)</title><rect x="77.7049%" y="165" width="3.9321%" height="15" fill="rgb(242,112,31)" fg:x="38753" fg:w="1961"/><text x="77.9549%" y="175.50">allo..</text></g><g><title>bytes::bytes_mut::Shared::is_unique (14 samples, 0.03%)</title><rect x="81.6450%" y="261" width="0.0281%" height="15" fill="rgb(249,192,27)" fg:x="40718" fg:w="14"/><text x="81.8950%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.02%)</title><rect x="81.6550%" y="245" width="0.0180%" height="15" fill="rgb(208,204,44)" fg:x="40723" fg:w="9"/><text x="81.9050%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.02%)</title><rect x="81.6550%" y="229" width="0.0180%" height="15" fill="rgb(208,93,54)" fg:x="40723" fg:w="9"/><text x="81.9050%" y="239.50"></text></g><g><title>bytes::bytes_mut::original_capacity_from_repr (6 samples, 0.01%)</title><rect x="81.6731%" y="261" width="0.0120%" height="15" fill="rgb(242,1,31)" fg:x="40732" fg:w="6"/><text x="81.9231%" y="271.50"></text></g><g><title>bytes::bytes_mut::release_shared (407 samples, 0.82%)</title><rect x="81.6851%" y="261" width="0.8161%" height="15" fill="rgb(241,83,25)" fg:x="40738" fg:w="407"/><text x="81.9351%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (404 samples, 0.81%)</title><rect x="81.6911%" y="245" width="0.8101%" height="15" fill="rgb(205,169,50)" fg:x="40741" fg:w="404"/><text x="81.9411%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (404 samples, 0.81%)</title><rect x="81.6911%" y="229" width="0.8101%" height="15" fill="rgb(239,186,37)" fg:x="40741" fg:w="404"/><text x="81.9411%" y="239.50"></text></g><g><title>core::cmp::max (5 samples, 0.01%)</title><rect x="82.5012%" y="261" width="0.0100%" height="15" fill="rgb(205,221,10)" fg:x="41145" fg:w="5"/><text x="82.7512%" y="271.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.01%)</title><rect x="82.5012%" y="245" width="0.0100%" height="15" fill="rgb(218,196,15)" fg:x="41145" fg:w="5"/><text x="82.7512%" y="255.50"></text></g><g><title>core::cmp::max_by (5 samples, 0.01%)</title><rect x="82.5012%" y="229" width="0.0100%" height="15" fill="rgb(218,196,35)" fg:x="41145" fg:w="5"/><text x="82.7512%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.04%)</title><rect x="82.5112%" y="261" width="0.0361%" height="15" fill="rgb(233,63,24)" fg:x="41150" fg:w="18"/><text x="82.7612%" y="271.50"></text></g><g><title>[libc.so.6] (18 samples, 0.04%)</title><rect x="82.5112%" y="245" width="0.0361%" height="15" fill="rgb(225,8,4)" fg:x="41150" fg:w="18"/><text x="82.7612%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (7 samples, 0.01%)</title><rect x="82.5473%" y="261" width="0.0140%" height="15" fill="rgb(234,105,35)" fg:x="41168" fg:w="7"/><text x="82.7973%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (5,604 samples, 11.24%)</title><rect x="71.3346%" y="293" width="11.2368%" height="15" fill="rgb(236,21,32)" fg:x="35576" fg:w="5604"/><text x="71.5846%" y="303.50">bytes::bytes_mut:..</text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (5,593 samples, 11.21%)</title><rect x="71.3567%" y="277" width="11.2147%" height="15" fill="rgb(228,109,6)" fg:x="35587" fg:w="5593"/><text x="71.6067%" y="287.50">bytes::bytes_mut:..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.01%)</title><rect x="82.5614%" y="261" width="0.0100%" height="15" fill="rgb(229,215,31)" fg:x="41175" fg:w="5"/><text x="82.8114%" y="271.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (11 samples, 0.02%)</title><rect x="82.5954%" y="277" width="0.0221%" height="15" fill="rgb(221,52,54)" fg:x="41192" fg:w="11"/><text x="82.8454%" y="287.50"></text></g><g><title>[libc.so.6] (565 samples, 1.13%)</title><rect x="83.9529%" y="117" width="1.1329%" height="15" fill="rgb(252,129,43)" fg:x="41869" fg:w="565"/><text x="84.2029%" y="127.50"></text></g><g><title>[libc.so.6] (77 samples, 0.15%)</title><rect x="84.9314%" y="101" width="0.1544%" height="15" fill="rgb(248,183,27)" fg:x="42357" fg:w="77"/><text x="85.1814%" y="111.50"></text></g><g><title>__lll_lock_wait_private (20 samples, 0.04%)</title><rect x="85.0858%" y="117" width="0.0401%" height="15" fill="rgb(250,0,22)" fg:x="42434" fg:w="20"/><text x="85.3358%" y="127.50"></text></g><g><title>__rdl_alloc (1,216 samples, 2.44%)</title><rect x="82.6937%" y="165" width="2.4382%" height="15" fill="rgb(213,166,10)" fg:x="41241" fg:w="1216"/><text x="82.9437%" y="175.50">__..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,216 samples, 2.44%)</title><rect x="82.6937%" y="149" width="2.4382%" height="15" fill="rgb(207,163,36)" fg:x="41241" fg:w="1216"/><text x="82.9437%" y="159.50">st..</text></g><g><title>malloc (1,211 samples, 2.43%)</title><rect x="82.7037%" y="133" width="2.4282%" height="15" fill="rgb(208,122,22)" fg:x="41246" fg:w="1211"/><text x="82.9537%" y="143.50">ma..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,259 samples, 2.52%)</title><rect x="82.6616%" y="245" width="2.5245%" height="15" fill="rgb(207,104,49)" fg:x="41225" fg:w="1259"/><text x="82.9116%" y="255.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (1,250 samples, 2.51%)</title><rect x="82.6797%" y="229" width="2.5064%" height="15" fill="rgb(248,211,50)" fg:x="41234" fg:w="1250"/><text x="82.9297%" y="239.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,243 samples, 2.49%)</title><rect x="82.6937%" y="213" width="2.4924%" height="15" fill="rgb(217,13,45)" fg:x="41241" fg:w="1243"/><text x="82.9437%" y="223.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,243 samples, 2.49%)</title><rect x="82.6937%" y="197" width="2.4924%" height="15" fill="rgb(211,216,49)" fg:x="41241" fg:w="1243"/><text x="82.9437%" y="207.50">al..</text></g><g><title>alloc::alloc::alloc (1,243 samples, 2.49%)</title><rect x="82.6937%" y="181" width="2.4924%" height="15" fill="rgb(221,58,53)" fg:x="41241" fg:w="1243"/><text x="82.9437%" y="191.50">al..</text></g><g><title>core::ptr::read_volatile (27 samples, 0.05%)</title><rect x="85.1319%" y="165" width="0.0541%" height="15" fill="rgb(220,112,41)" fg:x="42457" fg:w="27"/><text x="85.3819%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (1,287 samples, 2.58%)</title><rect x="82.6456%" y="261" width="2.5806%" height="15" fill="rgb(236,38,28)" fg:x="41217" fg:w="1287"/><text x="82.8956%" y="271.50">by..</text></g><g><title>bytes::bytes_mut::rebuild_vec (20 samples, 0.04%)</title><rect x="85.1861%" y="245" width="0.0401%" height="15" fill="rgb(227,195,22)" fg:x="42484" fg:w="20"/><text x="85.4361%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.01%)</title><rect x="85.2141%" y="229" width="0.0120%" height="15" fill="rgb(214,55,33)" fg:x="42498" fg:w="6"/><text x="85.4641%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.01%)</title><rect x="85.2141%" y="213" width="0.0120%" height="15" fill="rgb(248,80,13)" fg:x="42498" fg:w="6"/><text x="85.4641%" y="223.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (1,302 samples, 2.61%)</title><rect x="82.6215%" y="277" width="2.6107%" height="15" fill="rgb(238,52,6)" fg:x="41205" fg:w="1302"/><text x="82.8715%" y="287.50">by..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1,330 samples, 2.67%)</title><rect x="82.5714%" y="293" width="2.6668%" height="15" fill="rgb(224,198,47)" fg:x="41180" fg:w="1330"/><text x="82.8214%" y="303.50">by..</text></g><g><title>fastwebsockets::WebSocketRead&lt;S&gt;::read_frame::_{{closure}} (9,242 samples, 18.53%)</title><rect x="66.7088%" y="341" width="18.5314%" height="15" fill="rgb(233,171,20)" fg:x="33269" fg:w="9242"/><text x="66.9588%" y="351.50">fastwebsockets::WebSocketRead..</text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (8,856 samples, 17.76%)</title><rect x="67.4828%" y="325" width="17.7575%" height="15" fill="rgb(241,30,25)" fg:x="33655" fg:w="8856"/><text x="67.7328%" y="335.50">fastwebsockets::ReadHalf::re..</text></g><g><title>fastwebsockets::ReadHalf::parse_frame_header::_{{closure}} (8,502 samples, 17.05%)</title><rect x="68.1926%" y="309" width="17.0476%" height="15" fill="rgb(207,171,38)" fg:x="34009" fg:w="8502"/><text x="68.4426%" y="319.50">fastwebsockets::ReadHalf::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,735 samples, 19.52%)</title><rect x="65.9368%" y="373" width="19.5200%" height="15" fill="rgb(234,70,1)" fg:x="32884" fg:w="9735"/><text x="66.1868%" y="383.50">&lt;core::pin::Pin&lt;P&gt; as core::fut..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split::_{{closure}} (9,735 samples, 19.52%)</title><rect x="65.9368%" y="357" width="19.5200%" height="15" fill="rgb(232,178,18)" fg:x="32884" fg:w="9735"/><text x="66.1868%" y="367.50">wisp_mux::fastwebsockets::_&lt;imp..</text></g><g><title>fastwebsockets::frame::&lt;impl core::convert::From&lt;fastwebsockets::frame::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (108 samples, 0.22%)</title><rect x="85.2402%" y="341" width="0.2166%" height="15" fill="rgb(241,78,40)" fg:x="42511" fg:w="108"/><text x="85.4902%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (201 samples, 0.40%)</title><rect x="85.5310%" y="341" width="0.4030%" height="15" fill="rgb(222,35,25)" fg:x="42656" fg:w="201"/><text x="85.7810%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (201 samples, 0.40%)</title><rect x="85.5310%" y="325" width="0.4030%" height="15" fill="rgb(207,92,16)" fg:x="42656" fg:w="201"/><text x="85.7810%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (201 samples, 0.40%)</title><rect x="85.5310%" y="309" width="0.4030%" height="15" fill="rgb(216,59,51)" fg:x="42656" fg:w="201"/><text x="85.7810%" y="319.50"></text></g><g><title>__rdl_dealloc (201 samples, 0.40%)</title><rect x="85.5310%" y="293" width="0.4030%" height="15" fill="rgb(213,80,28)" fg:x="42656" fg:w="201"/><text x="85.7810%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (201 samples, 0.40%)</title><rect x="85.5310%" y="277" width="0.4030%" height="15" fill="rgb(220,93,7)" fg:x="42656" fg:w="201"/><text x="85.7810%" y="287.50"></text></g><g><title>cfree (198 samples, 0.40%)</title><rect x="85.5370%" y="261" width="0.3970%" height="15" fill="rgb(225,24,44)" fg:x="42659" fg:w="198"/><text x="85.7870%" y="271.50"></text></g><g><title>[libc.so.6] (65 samples, 0.13%)</title><rect x="85.8037%" y="245" width="0.1303%" height="15" fill="rgb(243,74,40)" fg:x="42792" fg:w="65"/><text x="86.0537%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (242 samples, 0.49%)</title><rect x="85.4608%" y="373" width="0.4852%" height="15" fill="rgb(228,39,7)" fg:x="42621" fg:w="242"/><text x="85.7108%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (242 samples, 0.49%)</title><rect x="85.4608%" y="357" width="0.4852%" height="15" fill="rgb(227,79,8)" fg:x="42621" fg:w="242"/><text x="85.7108%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::wisp_read_split::{{closure}}&gt; (6 samples, 0.01%)</title><rect x="85.9340%" y="341" width="0.0120%" height="15" fill="rgb(236,58,11)" fg:x="42857" fg:w="6"/><text x="86.1840%" y="351.50"></text></g><g><title>__rdl_alloc (53 samples, 0.11%)</title><rect x="85.9480%" y="261" width="0.1063%" height="15" fill="rgb(249,63,35)" fg:x="42864" fg:w="53"/><text x="86.1980%" y="271.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (53 samples, 0.11%)</title><rect x="85.9480%" y="245" width="0.1063%" height="15" fill="rgb(252,114,16)" fg:x="42864" fg:w="53"/><text x="86.1980%" y="255.50"></text></g><g><title>malloc (53 samples, 0.11%)</title><rect x="85.9480%" y="229" width="0.1063%" height="15" fill="rgb(254,151,24)" fg:x="42864" fg:w="53"/><text x="86.1980%" y="239.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,191 samples, 20.43%)</title><rect x="65.6220%" y="405" width="20.4343%" height="15" fill="rgb(253,54,39)" fg:x="32727" fg:w="10191"/><text x="65.8720%" y="415.50">&lt;core::pin::Pin&lt;P&gt; as core::futu..</text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (10,189 samples, 20.43%)</title><rect x="65.6260%" y="389" width="20.4303%" height="15" fill="rgb(243,25,45)" fg:x="32729" fg:w="10189"/><text x="65.8760%" y="399.50">&lt;wisp_mux::ws::AppendingWebSocke..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split (55 samples, 0.11%)</title><rect x="85.9460%" y="373" width="0.1103%" height="15" fill="rgb(234,134,9)" fg:x="42863" fg:w="55"/><text x="86.1960%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (55 samples, 0.11%)</title><rect x="85.9460%" y="357" width="0.1103%" height="15" fill="rgb(227,166,31)" fg:x="42863" fg:w="55"/><text x="86.1960%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (55 samples, 0.11%)</title><rect x="85.9460%" y="341" width="0.1103%" height="15" fill="rgb(245,143,41)" fg:x="42863" fg:w="55"/><text x="86.1960%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (54 samples, 0.11%)</title><rect x="85.9480%" y="325" width="0.1083%" height="15" fill="rgb(238,181,32)" fg:x="42864" fg:w="54"/><text x="86.1980%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.11%)</title><rect x="85.9480%" y="309" width="0.1083%" height="15" fill="rgb(224,113,18)" fg:x="42864" fg:w="54"/><text x="86.1980%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.11%)</title><rect x="85.9480%" y="293" width="0.1083%" height="15" fill="rgb(240,229,28)" fg:x="42864" fg:w="54"/><text x="86.1980%" y="303.50"></text></g><g><title>alloc::alloc::alloc (54 samples, 0.11%)</title><rect x="85.9480%" y="277" width="0.1083%" height="15" fill="rgb(250,185,3)" fg:x="42864" fg:w="54"/><text x="86.1980%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (51 samples, 0.10%)</title><rect x="86.0563%" y="405" width="0.1023%" height="15" fill="rgb(212,59,25)" fg:x="42918" fg:w="51"/><text x="86.3063%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.01%)</title><rect x="86.3932%" y="261" width="0.0140%" height="15" fill="rgb(221,87,20)" fg:x="43086" fg:w="7"/><text x="86.6432%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (7 samples, 0.01%)</title><rect x="86.3932%" y="245" width="0.0140%" height="15" fill="rgb(213,74,28)" fg:x="43086" fg:w="7"/><text x="86.6432%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (7 samples, 0.01%)</title><rect x="86.4072%" y="261" width="0.0140%" height="15" fill="rgb(224,132,34)" fg:x="43093" fg:w="7"/><text x="86.6572%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (7 samples, 0.01%)</title><rect x="86.4072%" y="245" width="0.0140%" height="15" fill="rgb(222,101,24)" fg:x="43093" fg:w="7"/><text x="86.6572%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (34 samples, 0.07%)</title><rect x="86.3651%" y="341" width="0.0682%" height="15" fill="rgb(254,142,4)" fg:x="43072" fg:w="34"/><text x="86.6151%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (33 samples, 0.07%)</title><rect x="86.3671%" y="325" width="0.0662%" height="15" fill="rgb(230,229,49)" fg:x="43073" fg:w="33"/><text x="86.6171%" y="335.50"></text></g><g><title>tokio::runtime::context::with_scheduler (33 samples, 0.07%)</title><rect x="86.3671%" y="309" width="0.0662%" height="15" fill="rgb(238,70,47)" fg:x="43073" fg:w="33"/><text x="86.6171%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (30 samples, 0.06%)</title><rect x="86.3731%" y="293" width="0.0602%" height="15" fill="rgb(231,160,17)" fg:x="43076" fg:w="30"/><text x="86.6231%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (25 samples, 0.05%)</title><rect x="86.3831%" y="277" width="0.0501%" height="15" fill="rgb(218,68,53)" fg:x="43081" fg:w="25"/><text x="86.6331%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::schedule (10 samples, 0.02%)</title><rect x="86.4333%" y="341" width="0.0201%" height="15" fill="rgb(236,111,10)" fg:x="43106" fg:w="10"/><text x="86.6833%" y="351.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (5 samples, 0.01%)</title><rect x="86.4533%" y="309" width="0.0100%" height="15" fill="rgb(224,34,41)" fg:x="43116" fg:w="5"/><text x="86.7033%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::load (11 samples, 0.02%)</title><rect x="86.4633%" y="277" width="0.0221%" height="15" fill="rgb(241,118,19)" fg:x="43121" fg:w="11"/><text x="86.7133%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.02%)</title><rect x="86.4633%" y="261" width="0.0221%" height="15" fill="rgb(238,129,25)" fg:x="43121" fg:w="11"/><text x="86.7133%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.02%)</title><rect x="86.4633%" y="245" width="0.0221%" height="15" fill="rgb(238,22,31)" fg:x="43121" fg:w="11"/><text x="86.7133%" y="255.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (61 samples, 0.12%)</title><rect x="86.3651%" y="357" width="0.1223%" height="15" fill="rgb(222,174,48)" fg:x="43072" fg:w="61"/><text x="86.6151%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (17 samples, 0.03%)</title><rect x="86.4533%" y="341" width="0.0341%" height="15" fill="rgb(206,152,40)" fg:x="43116" fg:w="17"/><text x="86.7033%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (17 samples, 0.03%)</title><rect x="86.4533%" y="325" width="0.0341%" height="15" fill="rgb(218,99,54)" fg:x="43116" fg:w="17"/><text x="86.7033%" y="335.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (12 samples, 0.02%)</title><rect x="86.4633%" y="309" width="0.0241%" height="15" fill="rgb(220,174,26)" fg:x="43121" fg:w="12"/><text x="86.7133%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (12 samples, 0.02%)</title><rect x="86.4633%" y="293" width="0.0241%" height="15" fill="rgb(245,116,9)" fg:x="43121" fg:w="12"/><text x="86.7133%" y="303.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (67 samples, 0.13%)</title><rect x="86.3571%" y="373" width="0.1343%" height="15" fill="rgb(209,72,35)" fg:x="43068" fg:w="67"/><text x="86.6071%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (11 samples, 0.02%)</title><rect x="86.4954%" y="373" width="0.0221%" height="15" fill="rgb(226,126,21)" fg:x="43137" fg:w="11"/><text x="86.7454%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (14 samples, 0.03%)</title><rect x="86.5175%" y="373" width="0.0281%" height="15" fill="rgb(227,192,1)" fg:x="43148" fg:w="14"/><text x="86.7675%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (14 samples, 0.03%)</title><rect x="86.5175%" y="357" width="0.0281%" height="15" fill="rgb(237,180,29)" fg:x="43148" fg:w="14"/><text x="86.7675%" y="367.50"></text></g><g><title>core::ptr::read (14 samples, 0.03%)</title><rect x="86.5175%" y="341" width="0.0281%" height="15" fill="rgb(230,197,35)" fg:x="43148" fg:w="14"/><text x="86.7675%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (12 samples, 0.02%)</title><rect x="86.5576%" y="357" width="0.0241%" height="15" fill="rgb(246,193,31)" fg:x="43168" fg:w="12"/><text x="86.8076%" y="367.50"></text></g><g><title>core::ptr::write (7 samples, 0.01%)</title><rect x="86.5676%" y="341" width="0.0140%" height="15" fill="rgb(241,36,4)" fg:x="43173" fg:w="7"/><text x="86.8176%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (5 samples, 0.01%)</title><rect x="86.5816%" y="357" width="0.0100%" height="15" fill="rgb(241,130,17)" fg:x="43180" fg:w="5"/><text x="86.8316%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (5 samples, 0.01%)</title><rect x="86.5816%" y="341" width="0.0100%" height="15" fill="rgb(206,137,32)" fg:x="43180" fg:w="5"/><text x="86.8316%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (5 samples, 0.01%)</title><rect x="86.5816%" y="325" width="0.0100%" height="15" fill="rgb(237,228,51)" fg:x="43180" fg:w="5"/><text x="86.8316%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (5 samples, 0.01%)</title><rect x="86.5917%" y="325" width="0.0100%" height="15" fill="rgb(243,6,42)" fg:x="43185" fg:w="5"/><text x="86.8417%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (29 samples, 0.06%)</title><rect x="86.5456%" y="373" width="0.0581%" height="15" fill="rgb(251,74,28)" fg:x="43162" fg:w="29"/><text x="86.7956%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (6 samples, 0.01%)</title><rect x="86.5917%" y="357" width="0.0120%" height="15" fill="rgb(218,20,49)" fg:x="43185" fg:w="6"/><text x="86.8417%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (6 samples, 0.01%)</title><rect x="86.5917%" y="341" width="0.0120%" height="15" fill="rgb(238,28,14)" fg:x="43185" fg:w="6"/><text x="86.8417%" y="351.50"></text></g><g><title>core::mem::drop (5 samples, 0.01%)</title><rect x="86.6037%" y="373" width="0.0100%" height="15" fill="rgb(229,40,46)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="86.6037%" y="357" width="0.0100%" height="15" fill="rgb(244,195,20)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="86.6037%" y="341" width="0.0100%" height="15" fill="rgb(253,56,35)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (5 samples, 0.01%)</title><rect x="86.6037%" y="325" width="0.0100%" height="15" fill="rgb(210,149,44)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.01%)</title><rect x="86.6037%" y="309" width="0.0100%" height="15" fill="rgb(240,135,12)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.01%)</title><rect x="86.6037%" y="293" width="0.0100%" height="15" fill="rgb(251,24,50)" fg:x="43191" fg:w="5"/><text x="86.8537%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.03%)</title><rect x="86.6157%" y="373" width="0.0301%" height="15" fill="rgb(243,200,47)" fg:x="43197" fg:w="15"/><text x="86.8657%" y="383.50"></text></g><g><title>flume::Shared&lt;T&gt;::send::_{{closure}} (14 samples, 0.03%)</title><rect x="86.6177%" y="357" width="0.0281%" height="15" fill="rgb(224,166,26)" fg:x="43198" fg:w="14"/><text x="86.8677%" y="367.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::fire_send (8 samples, 0.02%)</title><rect x="86.6298%" y="341" width="0.0160%" height="15" fill="rgb(233,0,47)" fg:x="43204" fg:w="8"/><text x="86.8798%" y="351.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::lock (7 samples, 0.01%)</title><rect x="86.6318%" y="325" width="0.0140%" height="15" fill="rgb(253,80,5)" fg:x="43205" fg:w="7"/><text x="86.8818%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (7 samples, 0.01%)</title><rect x="86.6318%" y="309" width="0.0140%" height="15" fill="rgb(214,133,25)" fg:x="43205" fg:w="7"/><text x="86.8818%" y="319.50"></text></g><g><title>std::sync::poison::Flag::done (6 samples, 0.01%)</title><rect x="86.6578%" y="341" width="0.0120%" height="15" fill="rgb(209,27,14)" fg:x="43218" fg:w="6"/><text x="86.9078%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (101 samples, 0.20%)</title><rect x="86.6518%" y="373" width="0.2025%" height="15" fill="rgb(219,102,51)" fg:x="43215" fg:w="101"/><text x="86.9018%" y="383.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.20%)</title><rect x="86.6518%" y="357" width="0.2025%" height="15" fill="rgb(237,18,16)" fg:x="43215" fg:w="101"/><text x="86.9018%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (92 samples, 0.18%)</title><rect x="86.6699%" y="341" width="0.1845%" height="15" fill="rgb(241,85,17)" fg:x="43224" fg:w="92"/><text x="86.9199%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (90 samples, 0.18%)</title><rect x="86.6739%" y="325" width="0.1805%" height="15" fill="rgb(236,90,42)" fg:x="43226" fg:w="90"/><text x="86.9239%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (90 samples, 0.18%)</title><rect x="86.6739%" y="309" width="0.1805%" height="15" fill="rgb(249,57,21)" fg:x="43226" fg:w="90"/><text x="86.9239%" y="319.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="86.8644%" y="341" width="0.0201%" height="15" fill="rgb(243,12,36)" fg:x="43321" fg:w="10"/><text x="87.1144%" y="351.50"></text></g><g><title>std::sync::poison::Flag::guard (10 samples, 0.02%)</title><rect x="86.8644%" y="325" width="0.0201%" height="15" fill="rgb(253,128,47)" fg:x="43321" fg:w="10"/><text x="87.1144%" y="335.50"></text></g><g><title>std::thread::panicking (10 samples, 0.02%)</title><rect x="86.8644%" y="309" width="0.0201%" height="15" fill="rgb(207,33,20)" fg:x="43321" fg:w="10"/><text x="87.1144%" y="319.50"></text></g><g><title>std::panicking::panicking (10 samples, 0.02%)</title><rect x="86.8644%" y="293" width="0.0201%" height="15" fill="rgb(233,215,35)" fg:x="43321" fg:w="10"/><text x="87.1144%" y="303.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (10 samples, 0.02%)</title><rect x="86.8644%" y="277" width="0.0201%" height="15" fill="rgb(249,188,52)" fg:x="43321" fg:w="10"/><text x="87.1144%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.01%)</title><rect x="86.8704%" y="261" width="0.0140%" height="15" fill="rgb(225,12,32)" fg:x="43324" fg:w="7"/><text x="87.1204%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.01%)</title><rect x="86.8704%" y="245" width="0.0140%" height="15" fill="rgb(247,98,14)" fg:x="43324" fg:w="7"/><text x="87.1204%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (122 samples, 0.24%)</title><rect x="86.8864%" y="325" width="0.2446%" height="15" fill="rgb(247,219,48)" fg:x="43332" fg:w="122"/><text x="87.1364%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (122 samples, 0.24%)</title><rect x="86.8864%" y="309" width="0.2446%" height="15" fill="rgb(253,60,48)" fg:x="43332" fg:w="122"/><text x="87.1364%" y="319.50"></text></g><g><title>&lt;flume::async::SendFut&lt;T&gt; as core::future::future::Future&gt;::poll (487 samples, 0.98%)</title><rect x="86.1586%" y="405" width="0.9765%" height="15" fill="rgb(245,15,52)" fg:x="42969" fg:w="487"/><text x="86.4086%" y="415.50"></text></g><g><title>flume::Shared&lt;T&gt;::send (404 samples, 0.81%)</title><rect x="86.3250%" y="389" width="0.8101%" height="15" fill="rgb(220,133,28)" fg:x="43052" fg:w="404"/><text x="86.5750%" y="399.50"></text></g><g><title>flume::wait_lock (137 samples, 0.27%)</title><rect x="86.8604%" y="373" width="0.2747%" height="15" fill="rgb(217,180,4)" fg:x="43319" fg:w="137"/><text x="87.1104%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (135 samples, 0.27%)</title><rect x="86.8644%" y="357" width="0.2707%" height="15" fill="rgb(251,24,1)" fg:x="43321" fg:w="135"/><text x="87.1144%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (125 samples, 0.25%)</title><rect x="86.8844%" y="341" width="0.2506%" height="15" fill="rgb(212,185,49)" fg:x="43331" fg:w="125"/><text x="87.1344%" y="351.50"></text></g><g><title>__rdl_alloc (42 samples, 0.08%)</title><rect x="87.1451%" y="293" width="0.0842%" height="15" fill="rgb(215,175,22)" fg:x="43461" fg:w="42"/><text x="87.3951%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (42 samples, 0.08%)</title><rect x="87.1451%" y="277" width="0.0842%" height="15" fill="rgb(250,205,14)" fg:x="43461" fg:w="42"/><text x="87.3951%" y="287.50"></text></g><g><title>malloc (41 samples, 0.08%)</title><rect x="87.1471%" y="261" width="0.0822%" height="15" fill="rgb(225,211,22)" fg:x="43462" fg:w="41"/><text x="87.3971%" y="271.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split (51 samples, 0.10%)</title><rect x="87.1351%" y="405" width="0.1023%" height="15" fill="rgb(251,179,42)" fg:x="43456" fg:w="51"/><text x="87.3851%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (51 samples, 0.10%)</title><rect x="87.1351%" y="389" width="0.1023%" height="15" fill="rgb(208,216,51)" fg:x="43456" fg:w="51"/><text x="87.3851%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (51 samples, 0.10%)</title><rect x="87.1351%" y="373" width="0.1023%" height="15" fill="rgb(235,36,11)" fg:x="43456" fg:w="51"/><text x="87.3851%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.09%)</title><rect x="87.1431%" y="357" width="0.0942%" height="15" fill="rgb(213,189,28)" fg:x="43460" fg:w="47"/><text x="87.3931%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.09%)</title><rect x="87.1451%" y="341" width="0.0922%" height="15" fill="rgb(227,203,42)" fg:x="43461" fg:w="46"/><text x="87.3951%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.09%)</title><rect x="87.1451%" y="325" width="0.0922%" height="15" fill="rgb(244,72,36)" fg:x="43461" fg:w="46"/><text x="87.3951%" y="335.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.09%)</title><rect x="87.1451%" y="309" width="0.0922%" height="15" fill="rgb(213,53,17)" fg:x="43461" fg:w="46"/><text x="87.3951%" y="319.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as core::ops::deref::Deref&gt;::deref (6 samples, 0.01%)</title><rect x="87.2373%" y="405" width="0.0120%" height="15" fill="rgb(207,167,3)" fg:x="43507" fg:w="6"/><text x="87.4873%" y="415.50"></text></g><g><title>[libc.so.6] (159 samples, 0.32%)</title><rect x="87.7727%" y="165" width="0.3188%" height="15" fill="rgb(216,98,30)" fg:x="43774" fg:w="159"/><text x="88.0227%" y="175.50"></text></g><g><title>[libc.so.6] (87 samples, 0.17%)</title><rect x="87.9171%" y="149" width="0.1744%" height="15" fill="rgb(236,123,15)" fg:x="43846" fg:w="87"/><text x="88.1671%" y="159.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="88.0715%" y="133" width="0.0201%" height="15" fill="rgb(248,81,50)" fg:x="43923" fg:w="10"/><text x="88.3215%" y="143.50"></text></g><g><title>[libc.so.6] (388 samples, 0.78%)</title><rect x="87.3536%" y="181" width="0.7780%" height="15" fill="rgb(214,120,4)" fg:x="43565" fg:w="388"/><text x="87.6036%" y="191.50"></text></g><g><title>__lll_lock_wait_private (20 samples, 0.04%)</title><rect x="88.0915%" y="165" width="0.0401%" height="15" fill="rgb(208,179,34)" fg:x="43933" fg:w="20"/><text x="88.3415%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (432 samples, 0.87%)</title><rect x="87.2774%" y="261" width="0.8662%" height="15" fill="rgb(227,140,7)" fg:x="43527" fg:w="432"/><text x="87.5274%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (432 samples, 0.87%)</title><rect x="87.2774%" y="245" width="0.8662%" height="15" fill="rgb(214,22,6)" fg:x="43527" fg:w="432"/><text x="87.5274%" y="255.50"></text></g><g><title>__rdl_dealloc (432 samples, 0.87%)</title><rect x="87.2774%" y="229" width="0.8662%" height="15" fill="rgb(207,137,27)" fg:x="43527" fg:w="432"/><text x="87.5274%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (432 samples, 0.87%)</title><rect x="87.2774%" y="213" width="0.8662%" height="15" fill="rgb(210,8,46)" fg:x="43527" fg:w="432"/><text x="87.5274%" y="223.50"></text></g><g><title>cfree (431 samples, 0.86%)</title><rect x="87.2794%" y="197" width="0.8642%" height="15" fill="rgb(240,16,54)" fg:x="43528" fg:w="431"/><text x="87.5294%" y="207.50"></text></g><g><title>__lll_lock_wake_private (6 samples, 0.01%)</title><rect x="88.1316%" y="181" width="0.0120%" height="15" fill="rgb(211,209,29)" fg:x="43953" fg:w="6"/><text x="88.3816%" y="191.50"></text></g><g><title>core::mem::drop (434 samples, 0.87%)</title><rect x="87.2774%" y="357" width="0.8702%" height="15" fill="rgb(226,228,24)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (434 samples, 0.87%)</title><rect x="87.2774%" y="341" width="0.8702%" height="15" fill="rgb(222,84,9)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (434 samples, 0.87%)</title><rect x="87.2774%" y="325" width="0.8702%" height="15" fill="rgb(234,203,30)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (434 samples, 0.87%)</title><rect x="87.2774%" y="309" width="0.8702%" height="15" fill="rgb(238,109,14)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (434 samples, 0.87%)</title><rect x="87.2774%" y="293" width="0.8702%" height="15" fill="rgb(233,206,34)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (434 samples, 0.87%)</title><rect x="87.2774%" y="277" width="0.8702%" height="15" fill="rgb(220,167,47)" fg:x="43527" fg:w="434"/><text x="87.5274%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (59 samples, 0.12%)</title><rect x="88.1477%" y="357" width="0.1183%" height="15" fill="rgb(238,105,10)" fg:x="43961" fg:w="59"/><text x="88.3977%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (59 samples, 0.12%)</title><rect x="88.1477%" y="341" width="0.1183%" height="15" fill="rgb(213,227,17)" fg:x="43961" fg:w="59"/><text x="88.3977%" y="351.50"></text></g><g><title>bytes::bytes_mut::release_shared (496 samples, 0.99%)</title><rect x="87.2734%" y="373" width="0.9945%" height="15" fill="rgb(217,132,38)" fg:x="43525" fg:w="496"/><text x="87.5234%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (591 samples, 1.19%)</title><rect x="87.2594%" y="405" width="1.1850%" height="15" fill="rgb(242,146,4)" fg:x="43518" fg:w="591"/><text x="87.5094%" y="415.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (591 samples, 1.19%)</title><rect x="87.2594%" y="389" width="1.1850%" height="15" fill="rgb(212,61,9)" fg:x="43518" fg:w="591"/><text x="87.5094%" y="399.50"></text></g><g><title>cfree (88 samples, 0.18%)</title><rect x="88.2680%" y="373" width="0.1765%" height="15" fill="rgb(247,126,22)" fg:x="44021" fg:w="88"/><text x="88.5180%" y="383.50"></text></g><g><title>[libc.so.6] (39 samples, 0.08%)</title><rect x="88.3662%" y="357" width="0.0782%" height="15" fill="rgb(220,196,2)" fg:x="44070" fg:w="39"/><text x="88.6162%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.24%)</title><rect x="88.5407%" y="373" width="0.2366%" height="15" fill="rgb(208,46,4)" fg:x="44157" fg:w="118"/><text x="88.7907%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (115 samples, 0.23%)</title><rect x="88.5467%" y="357" width="0.2306%" height="15" fill="rgb(252,104,46)" fg:x="44160" fg:w="115"/><text x="88.7967%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (115 samples, 0.23%)</title><rect x="88.5467%" y="341" width="0.2306%" height="15" fill="rgb(237,152,48)" fg:x="44160" fg:w="115"/><text x="88.7967%" y="351.50"></text></g><g><title>__rdl_dealloc (115 samples, 0.23%)</title><rect x="88.5467%" y="325" width="0.2306%" height="15" fill="rgb(221,59,37)" fg:x="44160" fg:w="115"/><text x="88.7967%" y="335.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (115 samples, 0.23%)</title><rect x="88.5467%" y="309" width="0.2306%" height="15" fill="rgb(209,202,51)" fg:x="44160" fg:w="115"/><text x="88.7967%" y="319.50"></text></g><g><title>cfree (115 samples, 0.23%)</title><rect x="88.5467%" y="293" width="0.2306%" height="15" fill="rgb(228,81,30)" fg:x="44160" fg:w="115"/><text x="88.7967%" y="303.50"></text></g><g><title>[libc.so.6] (45 samples, 0.09%)</title><rect x="88.6870%" y="277" width="0.0902%" height="15" fill="rgb(227,42,39)" fg:x="44230" fg:w="45"/><text x="88.9370%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (171 samples, 0.34%)</title><rect x="88.4444%" y="405" width="0.3429%" height="15" fill="rgb(221,26,2)" fg:x="44109" fg:w="171"/><text x="88.6944%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (171 samples, 0.34%)</title><rect x="88.4444%" y="389" width="0.3429%" height="15" fill="rgb(254,61,31)" fg:x="44109" fg:w="171"/><text x="88.6944%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="88.7773%" y="373" width="0.0100%" height="15" fill="rgb(222,173,38)" fg:x="44275" fg:w="5"/><text x="89.0273%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;u32,wisp_mux::MuxMapValue&gt;&gt; (70 samples, 0.14%)</title><rect x="88.7893%" y="405" width="0.1404%" height="15" fill="rgb(218,50,12)" fg:x="44281" fg:w="70"/><text x="89.0393%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;u32,dashmap::util::SharedValue&lt;wisp_mux::MuxMapValue&gt;,std::hash::random::RandomState&gt;&gt;&gt; (70 samples, 0.14%)</title><rect x="88.7893%" y="389" width="0.1404%" height="15" fill="rgb(223,88,40)" fg:x="44281" fg:w="70"/><text x="89.0393%" y="399.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.14%)</title><rect x="88.7893%" y="373" width="0.1404%" height="15" fill="rgb(237,54,19)" fg:x="44281" fg:w="70"/><text x="89.0393%" y="383.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (70 samples, 0.14%)</title><rect x="88.7893%" y="357" width="0.1404%" height="15" fill="rgb(251,129,25)" fg:x="44281" fg:w="70"/><text x="89.0393%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (68 samples, 0.14%)</title><rect x="88.7933%" y="341" width="0.1363%" height="15" fill="rgb(238,97,19)" fg:x="44283" fg:w="68"/><text x="89.0433%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (68 samples, 0.14%)</title><rect x="88.7933%" y="325" width="0.1363%" height="15" fill="rgb(240,169,18)" fg:x="44283" fg:w="68"/><text x="89.0433%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (5 samples, 0.01%)</title><rect x="88.9738%" y="357" width="0.0100%" height="15" fill="rgb(230,187,49)" fg:x="44373" fg:w="5"/><text x="89.2238%" y="367.50"></text></g><g><title>core::mem::replace (5 samples, 0.01%)</title><rect x="88.9738%" y="341" width="0.0100%" height="15" fill="rgb(209,44,26)" fg:x="44373" fg:w="5"/><text x="89.2238%" y="351.50"></text></g><g><title>core::ptr::read (5 samples, 0.01%)</title><rect x="88.9738%" y="325" width="0.0100%" height="15" fill="rgb(244,0,6)" fg:x="44373" fg:w="5"/><text x="89.2238%" y="335.50"></text></g><g><title>&lt;flume::async::SendFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.05%)</title><rect x="88.9437%" y="389" width="0.0461%" height="15" fill="rgb(248,18,21)" fg:x="44358" fg:w="23"/><text x="89.1937%" y="399.50"></text></g><g><title>flume::async::SendFut&lt;T&gt;::reset_hook (23 samples, 0.05%)</title><rect x="88.9437%" y="373" width="0.0461%" height="15" fill="rgb(245,180,19)" fg:x="44358" fg:w="23"/><text x="89.1937%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::SendFut&lt;bytes::bytes::Bytes&gt;&gt; (34 samples, 0.07%)</title><rect x="88.9297%" y="405" width="0.0682%" height="15" fill="rgb(252,118,36)" fg:x="44351" fg:w="34"/><text x="89.1797%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (17 samples, 0.03%)</title><rect x="88.9978%" y="405" width="0.0341%" height="15" fill="rgb(210,224,19)" fg:x="44385" fg:w="17"/><text x="89.2478%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::Payload&gt; (10 samples, 0.02%)</title><rect x="89.0119%" y="389" width="0.0201%" height="15" fill="rgb(218,30,24)" fg:x="44392" fg:w="10"/><text x="89.2619%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (10 samples, 0.02%)</title><rect x="89.0760%" y="357" width="0.0201%" height="15" fill="rgb(219,75,50)" fg:x="44424" fg:w="10"/><text x="89.3260%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.02%)</title><rect x="89.0760%" y="341" width="0.0201%" height="15" fill="rgb(234,72,50)" fg:x="44424" fg:w="10"/><text x="89.3260%" y="351.50"></text></g><g><title>core::slice::index::get_noubcheck (10 samples, 0.02%)</title><rect x="89.0760%" y="325" width="0.0201%" height="15" fill="rgb(219,100,48)" fg:x="44424" fg:w="10"/><text x="89.3260%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (6 samples, 0.01%)</title><rect x="89.0961%" y="309" width="0.0120%" height="15" fill="rgb(253,5,41)" fg:x="44434" fg:w="6"/><text x="89.3461%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (65 samples, 0.13%)</title><rect x="89.1081%" y="309" width="0.1303%" height="15" fill="rgb(247,181,11)" fg:x="44440" fg:w="65"/><text x="89.3581%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (65 samples, 0.13%)</title><rect x="89.1081%" y="293" width="0.1303%" height="15" fill="rgb(222,223,25)" fg:x="44440" fg:w="65"/><text x="89.3581%" y="303.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (159 samples, 0.32%)</title><rect x="89.0700%" y="373" width="0.3188%" height="15" fill="rgb(214,198,28)" fg:x="44421" fg:w="159"/><text x="89.3200%" y="383.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (146 samples, 0.29%)</title><rect x="89.0961%" y="357" width="0.2927%" height="15" fill="rgb(230,46,43)" fg:x="44434" fg:w="146"/><text x="89.3461%" y="367.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (146 samples, 0.29%)</title><rect x="89.0961%" y="341" width="0.2927%" height="15" fill="rgb(233,65,53)" fg:x="44434" fg:w="146"/><text x="89.3461%" y="351.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (146 samples, 0.29%)</title><rect x="89.0961%" y="325" width="0.2927%" height="15" fill="rgb(221,121,27)" fg:x="44434" fg:w="146"/><text x="89.3461%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (75 samples, 0.15%)</title><rect x="89.2385%" y="309" width="0.1504%" height="15" fill="rgb(247,70,47)" fg:x="44505" fg:w="75"/><text x="89.4885%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (75 samples, 0.15%)</title><rect x="89.2385%" y="293" width="0.1504%" height="15" fill="rgb(228,85,35)" fg:x="44505" fg:w="75"/><text x="89.4885%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.04%)</title><rect x="89.4350%" y="293" width="0.0361%" height="15" fill="rgb(209,50,18)" fg:x="44603" fg:w="18"/><text x="89.6850%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (30 samples, 0.06%)</title><rect x="89.4269%" y="309" width="0.0602%" height="15" fill="rgb(250,19,35)" fg:x="44599" fg:w="30"/><text x="89.6769%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.02%)</title><rect x="89.4710%" y="293" width="0.0160%" height="15" fill="rgb(253,107,29)" fg:x="44621" fg:w="8"/><text x="89.7210%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.03%)</title><rect x="89.5031%" y="293" width="0.0281%" height="15" fill="rgb(252,179,29)" fg:x="44637" fg:w="14"/><text x="89.7531%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (86 samples, 0.17%)</title><rect x="89.3928%" y="357" width="0.1724%" height="15" fill="rgb(238,194,6)" fg:x="44582" fg:w="86"/><text x="89.6428%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (86 samples, 0.17%)</title><rect x="89.3928%" y="341" width="0.1724%" height="15" fill="rgb(238,164,29)" fg:x="44582" fg:w="86"/><text x="89.6428%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (86 samples, 0.17%)</title><rect x="89.3928%" y="325" width="0.1724%" height="15" fill="rgb(224,25,9)" fg:x="44582" fg:w="86"/><text x="89.6428%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (39 samples, 0.08%)</title><rect x="89.4871%" y="309" width="0.0782%" height="15" fill="rgb(244,153,23)" fg:x="44629" fg:w="39"/><text x="89.7371%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.03%)</title><rect x="89.5312%" y="293" width="0.0341%" height="15" fill="rgb(212,203,14)" fg:x="44651" fg:w="17"/><text x="89.7812%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (33 samples, 0.07%)</title><rect x="89.5653%" y="357" width="0.0662%" height="15" fill="rgb(220,164,20)" fg:x="44668" fg:w="33"/><text x="89.8153%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (22 samples, 0.04%)</title><rect x="89.5873%" y="341" width="0.0441%" height="15" fill="rgb(222,203,48)" fg:x="44679" fg:w="22"/><text x="89.8373%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (22 samples, 0.04%)</title><rect x="89.5873%" y="325" width="0.0441%" height="15" fill="rgb(215,159,22)" fg:x="44679" fg:w="22"/><text x="89.8373%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (22 samples, 0.04%)</title><rect x="89.5873%" y="309" width="0.0441%" height="15" fill="rgb(216,183,47)" fg:x="44679" fg:w="22"/><text x="89.8373%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.07%)</title><rect x="89.6315%" y="309" width="0.0742%" height="15" fill="rgb(229,195,25)" fg:x="44701" fg:w="37"/><text x="89.8815%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (37 samples, 0.07%)</title><rect x="89.6315%" y="293" width="0.0742%" height="15" fill="rgb(224,132,51)" fg:x="44701" fg:w="37"/><text x="89.8815%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.07%)</title><rect x="89.6335%" y="277" width="0.0722%" height="15" fill="rgb(240,63,7)" fg:x="44702" fg:w="36"/><text x="89.8835%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (15 samples, 0.03%)</title><rect x="89.6756%" y="261" width="0.0301%" height="15" fill="rgb(249,182,41)" fg:x="44723" fg:w="15"/><text x="89.9256%" y="271.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (160 samples, 0.32%)</title><rect x="89.3928%" y="373" width="0.3208%" height="15" fill="rgb(243,47,26)" fg:x="44582" fg:w="160"/><text x="89.6428%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (41 samples, 0.08%)</title><rect x="89.6315%" y="357" width="0.0822%" height="15" fill="rgb(233,48,2)" fg:x="44701" fg:w="41"/><text x="89.8815%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (41 samples, 0.08%)</title><rect x="89.6315%" y="341" width="0.0822%" height="15" fill="rgb(244,165,34)" fg:x="44701" fg:w="41"/><text x="89.8815%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u32 (41 samples, 0.08%)</title><rect x="89.6315%" y="325" width="0.0822%" height="15" fill="rgb(207,89,7)" fg:x="44701" fg:w="41"/><text x="89.8815%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.02%)</title><rect x="89.7638%" y="277" width="0.0201%" height="15" fill="rgb(244,117,36)" fg:x="44767" fg:w="10"/><text x="90.0138%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.02%)</title><rect x="89.7678%" y="261" width="0.0160%" height="15" fill="rgb(226,144,34)" fg:x="44769" fg:w="8"/><text x="90.0178%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.02%)</title><rect x="89.7959%" y="261" width="0.0241%" height="15" fill="rgb(213,23,19)" fg:x="44783" fg:w="12"/><text x="90.0459%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (57 samples, 0.11%)</title><rect x="89.7317%" y="325" width="0.1143%" height="15" fill="rgb(217,75,12)" fg:x="44751" fg:w="57"/><text x="89.9817%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (57 samples, 0.11%)</title><rect x="89.7317%" y="309" width="0.1143%" height="15" fill="rgb(224,159,17)" fg:x="44751" fg:w="57"/><text x="89.9817%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (57 samples, 0.11%)</title><rect x="89.7317%" y="293" width="0.1143%" height="15" fill="rgb(217,118,1)" fg:x="44751" fg:w="57"/><text x="89.9817%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31 samples, 0.06%)</title><rect x="89.7838%" y="277" width="0.0622%" height="15" fill="rgb(232,180,48)" fg:x="44777" fg:w="31"/><text x="90.0338%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.03%)</title><rect x="89.8199%" y="261" width="0.0261%" height="15" fill="rgb(230,27,33)" fg:x="44795" fg:w="13"/><text x="90.0699%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.02%)</title><rect x="89.8460%" y="325" width="0.0180%" height="15" fill="rgb(205,31,21)" fg:x="44808" fg:w="9"/><text x="90.0960%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.04%)</title><rect x="89.8641%" y="293" width="0.0401%" height="15" fill="rgb(253,59,4)" fg:x="44817" fg:w="20"/><text x="90.1141%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.04%)</title><rect x="89.8641%" y="277" width="0.0401%" height="15" fill="rgb(224,201,9)" fg:x="44817" fg:w="20"/><text x="90.1141%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.04%)</title><rect x="89.8681%" y="261" width="0.0361%" height="15" fill="rgb(229,206,30)" fg:x="44819" fg:w="18"/><text x="90.1181%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.03%)</title><rect x="89.8761%" y="245" width="0.0281%" height="15" fill="rgb(212,67,47)" fg:x="44823" fg:w="14"/><text x="90.1261%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (88 samples, 0.18%)</title><rect x="89.7317%" y="341" width="0.1765%" height="15" fill="rgb(211,96,50)" fg:x="44751" fg:w="88"/><text x="89.9817%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (22 samples, 0.04%)</title><rect x="89.8641%" y="325" width="0.0441%" height="15" fill="rgb(252,114,18)" fg:x="44817" fg:w="22"/><text x="90.1141%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u32 (22 samples, 0.04%)</title><rect x="89.8641%" y="309" width="0.0441%" height="15" fill="rgb(223,58,37)" fg:x="44817" fg:w="22"/><text x="90.1141%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="89.9362%" y="293" width="0.0241%" height="15" fill="rgb(237,70,4)" fg:x="44853" fg:w="12"/><text x="90.1862%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.02%)</title><rect x="89.9362%" y="277" width="0.0241%" height="15" fill="rgb(244,85,46)" fg:x="44853" fg:w="12"/><text x="90.1862%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (60 samples, 0.12%)</title><rect x="89.9603%" y="277" width="0.1203%" height="15" fill="rgb(223,39,52)" fg:x="44865" fg:w="60"/><text x="90.2103%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (60 samples, 0.12%)</title><rect x="89.9603%" y="261" width="0.1203%" height="15" fill="rgb(218,200,14)" fg:x="44865" fg:w="60"/><text x="90.2103%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (60 samples, 0.12%)</title><rect x="89.9603%" y="245" width="0.1203%" height="15" fill="rgb(208,171,16)" fg:x="44865" fg:w="60"/><text x="90.2103%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (60 samples, 0.12%)</title><rect x="89.9603%" y="229" width="0.1203%" height="15" fill="rgb(234,200,18)" fg:x="44865" fg:w="60"/><text x="90.2103%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (10 samples, 0.02%)</title><rect x="90.0806%" y="277" width="0.0201%" height="15" fill="rgb(228,45,11)" fg:x="44925" fg:w="10"/><text x="90.3306%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (10 samples, 0.02%)</title><rect x="90.0806%" y="261" width="0.0201%" height="15" fill="rgb(237,182,11)" fg:x="44925" fg:w="10"/><text x="90.3306%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.02%)</title><rect x="90.0806%" y="245" width="0.0201%" height="15" fill="rgb(241,175,49)" fg:x="44925" fg:w="10"/><text x="90.3306%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10 samples, 0.02%)</title><rect x="90.0806%" y="229" width="0.0201%" height="15" fill="rgb(247,38,35)" fg:x="44925" fg:w="10"/><text x="90.3306%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (73 samples, 0.15%)</title><rect x="89.9603%" y="293" width="0.1464%" height="15" fill="rgb(228,39,49)" fg:x="44865" fg:w="73"/><text x="90.2103%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (8 samples, 0.02%)</title><rect x="90.1067%" y="293" width="0.0160%" height="15" fill="rgb(226,101,26)" fg:x="44938" fg:w="8"/><text x="90.3567%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.01%)</title><rect x="90.1227%" y="293" width="0.0100%" height="15" fill="rgb(206,141,19)" fg:x="44946" fg:w="5"/><text x="90.3727%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (67 samples, 0.13%)</title><rect x="90.1327%" y="293" width="0.1343%" height="15" fill="rgb(211,200,13)" fg:x="44951" fg:w="67"/><text x="90.3827%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (67 samples, 0.13%)</title><rect x="90.1327%" y="277" width="0.1343%" height="15" fill="rgb(241,121,6)" fg:x="44951" fg:w="67"/><text x="90.3827%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.13%)</title><rect x="90.1327%" y="261" width="0.1343%" height="15" fill="rgb(234,221,29)" fg:x="44951" fg:w="67"/><text x="90.3827%" y="271.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (640 samples, 1.28%)</title><rect x="89.0319%" y="405" width="1.2833%" height="15" fill="rgb(229,136,5)" fg:x="44402" fg:w="640"/><text x="89.2819%" y="415.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (639 samples, 1.28%)</title><rect x="89.0339%" y="389" width="1.2813%" height="15" fill="rgb(238,36,11)" fg:x="44403" fg:w="639"/><text x="89.2839%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (300 samples, 0.60%)</title><rect x="89.7137%" y="373" width="0.6015%" height="15" fill="rgb(251,55,41)" fg:x="44742" fg:w="300"/><text x="89.9637%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (298 samples, 0.60%)</title><rect x="89.7177%" y="357" width="0.5975%" height="15" fill="rgb(242,34,40)" fg:x="44744" fg:w="298"/><text x="89.9677%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (203 samples, 0.41%)</title><rect x="89.9082%" y="341" width="0.4070%" height="15" fill="rgb(215,42,17)" fg:x="44839" fg:w="203"/><text x="90.1582%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (202 samples, 0.41%)</title><rect x="89.9102%" y="325" width="0.4050%" height="15" fill="rgb(207,44,46)" fg:x="44840" fg:w="202"/><text x="90.1602%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (202 samples, 0.41%)</title><rect x="89.9102%" y="309" width="0.4050%" height="15" fill="rgb(211,206,28)" fg:x="44840" fg:w="202"/><text x="90.1602%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.05%)</title><rect x="90.2671%" y="293" width="0.0481%" height="15" fill="rgb(237,167,16)" fg:x="45018" fg:w="24"/><text x="90.5171%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.05%)</title><rect x="90.2671%" y="277" width="0.0481%" height="15" fill="rgb(233,66,6)" fg:x="45018" fg:w="24"/><text x="90.5171%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.02%)</title><rect x="90.3393%" y="229" width="0.0180%" height="15" fill="rgb(246,123,29)" fg:x="45054" fg:w="9"/><text x="90.5893%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (9 samples, 0.02%)</title><rect x="90.3393%" y="213" width="0.0180%" height="15" fill="rgb(209,62,40)" fg:x="45054" fg:w="9"/><text x="90.5893%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (5 samples, 0.01%)</title><rect x="90.3473%" y="197" width="0.0100%" height="15" fill="rgb(218,4,25)" fg:x="45058" fg:w="5"/><text x="90.5973%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 0.01%)</title><rect x="90.3473%" y="181" width="0.0100%" height="15" fill="rgb(253,91,49)" fg:x="45058" fg:w="5"/><text x="90.5973%" y="191.50"></text></g><g><title>clock_gettime (5 samples, 0.01%)</title><rect x="90.3473%" y="165" width="0.0100%" height="15" fill="rgb(228,155,29)" fg:x="45058" fg:w="5"/><text x="90.5973%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (15 samples, 0.03%)</title><rect x="90.3393%" y="325" width="0.0301%" height="15" fill="rgb(243,57,37)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (15 samples, 0.03%)</title><rect x="90.3393%" y="309" width="0.0301%" height="15" fill="rgb(244,167,17)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (15 samples, 0.03%)</title><rect x="90.3393%" y="293" width="0.0301%" height="15" fill="rgb(207,181,38)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="303.50"></text></g><g><title>tokio::runtime::context::with_scheduler (15 samples, 0.03%)</title><rect x="90.3393%" y="277" width="0.0301%" height="15" fill="rgb(211,8,23)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (15 samples, 0.03%)</title><rect x="90.3393%" y="261" width="0.0301%" height="15" fill="rgb(235,11,44)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (15 samples, 0.03%)</title><rect x="90.3393%" y="245" width="0.0301%" height="15" fill="rgb(248,18,52)" fg:x="45054" fg:w="15"/><text x="90.5893%" y="255.50"></text></g><g><title>event_listener::Event&lt;T&gt;::notify (29 samples, 0.06%)</title><rect x="90.3152%" y="405" width="0.0581%" height="15" fill="rgb(208,4,7)" fg:x="45042" fg:w="29"/><text x="90.5652%" y="415.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::notify (25 samples, 0.05%)</title><rect x="90.3232%" y="389" width="0.0501%" height="15" fill="rgb(240,17,39)" fg:x="45046" fg:w="25"/><text x="90.5732%" y="399.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::notify (22 samples, 0.04%)</title><rect x="90.3292%" y="373" width="0.0441%" height="15" fill="rgb(207,170,3)" fg:x="45049" fg:w="22"/><text x="90.5792%" y="383.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (19 samples, 0.04%)</title><rect x="90.3353%" y="357" width="0.0381%" height="15" fill="rgb(236,100,52)" fg:x="45052" fg:w="19"/><text x="90.5853%" y="367.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (19 samples, 0.04%)</title><rect x="90.3353%" y="341" width="0.0381%" height="15" fill="rgb(246,78,51)" fg:x="45052" fg:w="19"/><text x="90.5853%" y="351.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::remaining (10 samples, 0.02%)</title><rect x="90.6902%" y="389" width="0.0201%" height="15" fill="rgb(211,17,15)" fg:x="45229" fg:w="10"/><text x="90.9402%" y="399.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::chunk (7 samples, 0.01%)</title><rect x="90.7142%" y="373" width="0.0140%" height="15" fill="rgb(209,59,46)" fg:x="45241" fg:w="7"/><text x="90.9642%" y="383.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::chunk (7 samples, 0.01%)</title><rect x="90.7142%" y="357" width="0.0140%" height="15" fill="rgb(210,92,25)" fg:x="45241" fg:w="7"/><text x="90.9642%" y="367.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (11 samples, 0.02%)</title><rect x="90.7283%" y="373" width="0.0221%" height="15" fill="rgb(238,174,52)" fg:x="45248" fg:w="11"/><text x="90.9783%" y="383.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::remaining (11 samples, 0.02%)</title><rect x="90.7283%" y="357" width="0.0221%" height="15" fill="rgb(230,73,7)" fg:x="45248" fg:w="11"/><text x="90.9783%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (9 samples, 0.02%)</title><rect x="90.7624%" y="341" width="0.0180%" height="15" fill="rgb(243,124,40)" fg:x="45265" fg:w="9"/><text x="91.0124%" y="351.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (17 samples, 0.03%)</title><rect x="90.7503%" y="373" width="0.0341%" height="15" fill="rgb(244,170,11)" fg:x="45259" fg:w="17"/><text x="91.0003%" y="383.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (14 samples, 0.03%)</title><rect x="90.7563%" y="357" width="0.0281%" height="15" fill="rgb(207,114,54)" fg:x="45262" fg:w="14"/><text x="91.0063%" y="367.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32_le (41 samples, 0.08%)</title><rect x="90.7102%" y="389" width="0.0822%" height="15" fill="rgb(205,42,20)" fg:x="45239" fg:w="41"/><text x="90.9602%" y="399.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::chunk (5 samples, 0.01%)</title><rect x="90.8065%" y="373" width="0.0100%" height="15" fill="rgb(230,30,28)" fg:x="45287" fg:w="5"/><text x="91.0565%" y="383.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::chunk (5 samples, 0.01%)</title><rect x="90.8065%" y="357" width="0.0100%" height="15" fill="rgb(205,73,54)" fg:x="45287" fg:w="5"/><text x="91.0565%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (13 samples, 0.03%)</title><rect x="90.8305%" y="341" width="0.0261%" height="15" fill="rgb(254,227,23)" fg:x="45299" fg:w="13"/><text x="91.0805%" y="351.50"></text></g><g><title>wisp_mux::packet::Packet::maybe_handle_extension::_{{closure}} (242 samples, 0.49%)</title><rect x="90.3734%" y="405" width="0.4852%" height="15" fill="rgb(228,202,34)" fg:x="45071" fg:w="242"/><text x="90.6234%" y="415.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (33 samples, 0.07%)</title><rect x="90.7924%" y="389" width="0.0662%" height="15" fill="rgb(222,225,37)" fg:x="45280" fg:w="33"/><text x="91.0424%" y="399.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (21 samples, 0.04%)</title><rect x="90.8165%" y="373" width="0.0421%" height="15" fill="rgb(221,14,54)" fg:x="45292" fg:w="21"/><text x="91.0665%" y="383.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (19 samples, 0.04%)</title><rect x="90.8205%" y="357" width="0.0381%" height="15" fill="rgb(254,102,2)" fg:x="45294" fg:w="19"/><text x="91.0705%" y="367.50"></text></g><g><title>wisp_mux::MuxInner::client_loop::_{{closure}} (13,181 samples, 26.43%)</title><rect x="64.4550%" y="421" width="26.4297%" height="15" fill="rgb(232,104,17)" fg:x="32145" fg:w="13181"/><text x="64.7050%" y="431.50">wisp_mux::MuxInner::client_loop::_{{closur..</text></g><g><title>wisp_mux::ws::&lt;impl core::convert::From&lt;wisp_mux::ws::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (13 samples, 0.03%)</title><rect x="90.8586%" y="405" width="0.0261%" height="15" fill="rgb(250,220,14)" fg:x="45313" fg:w="13"/><text x="91.1086%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.01%)</title><rect x="90.9167%" y="373" width="0.0140%" height="15" fill="rgb(241,158,9)" fg:x="45342" fg:w="7"/><text x="91.1667%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.01%)</title><rect x="90.9167%" y="357" width="0.0140%" height="15" fill="rgb(246,9,43)" fg:x="45342" fg:w="7"/><text x="91.1667%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="90.9167%" y="341" width="0.0140%" height="15" fill="rgb(206,73,33)" fg:x="45342" fg:w="7"/><text x="91.1667%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.01%)</title><rect x="90.9167%" y="325" width="0.0140%" height="15" fill="rgb(222,79,8)" fg:x="45342" fg:w="7"/><text x="91.1667%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.01%)</title><rect x="90.9167%" y="309" width="0.0140%" height="15" fill="rgb(234,8,54)" fg:x="45342" fg:w="7"/><text x="91.1667%" y="319.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (18 samples, 0.04%)</title><rect x="90.9368%" y="373" width="0.0361%" height="15" fill="rgb(209,134,38)" fg:x="45352" fg:w="18"/><text x="91.1868%" y="383.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (18 samples, 0.04%)</title><rect x="90.9368%" y="357" width="0.0361%" height="15" fill="rgb(230,127,29)" fg:x="45352" fg:w="18"/><text x="91.1868%" y="367.50"></text></g><g><title>flume::wait_lock (9 samples, 0.02%)</title><rect x="90.9548%" y="341" width="0.0180%" height="15" fill="rgb(242,44,41)" fg:x="45361" fg:w="9"/><text x="91.2048%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.02%)</title><rect x="90.9548%" y="325" width="0.0180%" height="15" fill="rgb(222,56,43)" fg:x="45361" fg:w="9"/><text x="91.2048%" y="335.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (9 samples, 0.02%)</title><rect x="90.9548%" y="309" width="0.0180%" height="15" fill="rgb(238,39,47)" fg:x="45361" fg:w="9"/><text x="91.2048%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.02%)</title><rect x="90.9548%" y="293" width="0.0180%" height="15" fill="rgb(226,79,43)" fg:x="45361" fg:w="9"/><text x="91.2048%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.02%)</title><rect x="90.9548%" y="277" width="0.0180%" height="15" fill="rgb(242,105,53)" fg:x="45361" fg:w="9"/><text x="91.2048%" y="287.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.07%)</title><rect x="90.9107%" y="405" width="0.0682%" height="15" fill="rgb(251,132,46)" fg:x="45339" fg:w="34"/><text x="91.1607%" y="415.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (34 samples, 0.07%)</title><rect x="90.9107%" y="389" width="0.0682%" height="15" fill="rgb(231,77,14)" fg:x="45339" fg:w="34"/><text x="91.1607%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13,239 samples, 26.55%)</title><rect x="64.4370%" y="501" width="26.5460%" height="15" fill="rgb(240,135,9)" fg:x="32136" fg:w="13239"/><text x="64.6870%" y="511.50">core::ops::function::impls::&lt;impl core::op..</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}}::_{{closure}} (13,239 samples, 26.55%)</title><rect x="64.4370%" y="485" width="26.5460%" height="15" fill="rgb(248,109,14)" fg:x="32136" fg:w="13239"/><text x="64.6870%" y="495.50">wisp_mux::MuxInner::as_future::_{{closure}..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (13,230 samples, 26.53%)</title><rect x="64.4550%" y="469" width="26.5279%" height="15" fill="rgb(227,146,52)" fg:x="32145" fg:w="13230"/><text x="64.7050%" y="479.50">futures_util::future::future::FutureExt::p..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13,230 samples, 26.53%)</title><rect x="64.4550%" y="453" width="26.5279%" height="15" fill="rgb(232,54,3)" fg:x="32145" fg:w="13230"/><text x="64.7050%" y="463.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (13,230 samples, 26.53%)</title><rect x="64.4550%" y="437" width="26.5279%" height="15" fill="rgb(229,201,43)" fg:x="32145" fg:w="13230"/><text x="64.7050%" y="447.50">&lt;futures_util::future::future::fuse::Fuse&lt;..</text></g><g><title>wisp_mux::MuxInner::stream_loop::_{{closure}} (49 samples, 0.10%)</title><rect x="90.8847%" y="421" width="0.0983%" height="15" fill="rgb(252,161,33)" fg:x="45326" fg:w="49"/><text x="91.1347%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36,910 samples, 74.01%)</title><rect x="16.9795%" y="645" width="74.0095%" height="15" fill="rgb(226,146,40)" fg:x="8468" fg:w="36910"/><text x="17.2295%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (36,910 samples, 74.01%)</title><rect x="16.9795%" y="629" width="74.0095%" height="15" fill="rgb(219,47,25)" fg:x="8468" fg:w="36910"/><text x="17.2295%" y="639.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (36,910 samples, 74.01%)</title><rect x="16.9795%" y="613" width="74.0095%" height="15" fill="rgb(250,135,13)" fg:x="8468" fg:w="36910"/><text x="17.2295%" y="623.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (36,909 samples, 74.01%)</title><rect x="16.9815%" y="597" width="74.0075%" height="15" fill="rgb(219,229,18)" fg:x="8469" fg:w="36909"/><text x="17.2315%" y="607.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (36,909 samples, 74.01%)</title><rect x="16.9815%" y="581" width="74.0075%" height="15" fill="rgb(217,152,27)" fg:x="8469" fg:w="36909"/><text x="17.2315%" y="591.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>wisp_mux::MuxInner::client_into_future::_{{closure}} (13,270 samples, 26.61%)</title><rect x="64.3808%" y="565" width="26.6081%" height="15" fill="rgb(225,71,47)" fg:x="32108" fg:w="13270"/><text x="64.6308%" y="575.50">wisp_mux::MuxInner::client_into_future::_{{..</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}} (13,262 samples, 26.59%)</title><rect x="64.3969%" y="549" width="26.5921%" height="15" fill="rgb(220,139,14)" fg:x="32116" fg:w="13262"/><text x="64.6469%" y="559.50">wisp_mux::MuxInner::as_future::_{{closure}}</text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13,253 samples, 26.57%)</title><rect x="64.4149%" y="533" width="26.5740%" height="15" fill="rgb(247,54,32)" fg:x="32125" fg:w="13253"/><text x="64.6649%" y="543.50">&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; a..</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}} (13,253 samples, 26.57%)</title><rect x="64.4149%" y="517" width="26.5740%" height="15" fill="rgb(252,131,39)" fg:x="32125" fg:w="13253"/><text x="64.6649%" y="527.50">wisp_mux::MuxInner::as_future::_{{closure}}..</text></g><g><title>tokio::runtime::task::harness::poll_future (36,912 samples, 74.01%)</title><rect x="16.9795%" y="709" width="74.0135%" height="15" fill="rgb(210,108,39)" fg:x="8468" fg:w="36912"/><text x="17.2295%" y="719.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (36,912 samples, 74.01%)</title><rect x="16.9795%" y="693" width="74.0135%" height="15" fill="rgb(205,23,29)" fg:x="8468" fg:w="36912"/><text x="17.2295%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (36,912 samples, 74.01%)</title><rect x="16.9795%" y="677" width="74.0135%" height="15" fill="rgb(246,139,46)" fg:x="8468" fg:w="36912"/><text x="17.2295%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (36,912 samples, 74.01%)</title><rect x="16.9795%" y="661" width="74.0135%" height="15" fill="rgb(250,81,26)" fg:x="8468" fg:w="36912"/><text x="17.2295%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.01%)</title><rect x="90.9949%" y="677" width="0.0120%" height="15" fill="rgb(214,104,7)" fg:x="45381" fg:w="6"/><text x="91.2449%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.01%)</title><rect x="90.9949%" y="661" width="0.0120%" height="15" fill="rgb(233,189,8)" fg:x="45381" fg:w="6"/><text x="91.2449%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (17 samples, 0.03%)</title><rect x="90.9929%" y="709" width="0.0341%" height="15" fill="rgb(228,141,17)" fg:x="45380" fg:w="17"/><text x="91.2429%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (17 samples, 0.03%)</title><rect x="90.9929%" y="693" width="0.0341%" height="15" fill="rgb(247,157,1)" fg:x="45380" fg:w="17"/><text x="91.2429%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::_{{closure}} (10 samples, 0.02%)</title><rect x="91.0070%" y="677" width="0.0201%" height="15" fill="rgb(249,225,5)" fg:x="45387" fg:w="10"/><text x="91.2570%" y="687.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (5 samples, 0.01%)</title><rect x="91.0170%" y="661" width="0.0100%" height="15" fill="rgb(242,55,13)" fg:x="45392" fg:w="5"/><text x="91.2670%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (7 samples, 0.01%)</title><rect x="91.0270%" y="677" width="0.0140%" height="15" fill="rgb(230,49,50)" fg:x="45397" fg:w="7"/><text x="91.2770%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.01%)</title><rect x="91.0270%" y="661" width="0.0140%" height="15" fill="rgb(241,111,38)" fg:x="45397" fg:w="7"/><text x="91.2770%" y="671.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_notified (8 samples, 0.02%)</title><rect x="91.0451%" y="661" width="0.0160%" height="15" fill="rgb(252,155,4)" fg:x="45406" fg:w="8"/><text x="91.2951%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (19 samples, 0.04%)</title><rect x="91.0270%" y="709" width="0.0381%" height="15" fill="rgb(212,69,32)" fg:x="45397" fg:w="19"/><text x="91.2770%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (19 samples, 0.04%)</title><rect x="91.0270%" y="693" width="0.0381%" height="15" fill="rgb(243,107,47)" fg:x="45397" fg:w="19"/><text x="91.2770%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::_{{closure}} (12 samples, 0.02%)</title><rect x="91.0411%" y="677" width="0.0241%" height="15" fill="rgb(247,130,12)" fg:x="45404" fg:w="12"/><text x="91.2911%" y="687.50"></text></g><g><title>tokio::runtime::coop::budget (37,182 samples, 74.55%)</title><rect x="16.5143%" y="837" width="74.5549%" height="15" fill="rgb(233,74,16)" fg:x="8236" fg:w="37182"/><text x="16.7643%" y="847.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (37,182 samples, 74.55%)</title><rect x="16.5143%" y="821" width="74.5549%" height="15" fill="rgb(208,58,18)" fg:x="8236" fg:w="37182"/><text x="16.7643%" y="831.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (37,166 samples, 74.52%)</title><rect x="16.5464%" y="805" width="74.5228%" height="15" fill="rgb(242,225,1)" fg:x="8252" fg:w="37166"/><text x="16.7964%" y="815.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (37,131 samples, 74.45%)</title><rect x="16.6165%" y="789" width="74.4526%" height="15" fill="rgb(249,39,40)" fg:x="8287" fg:w="37131"/><text x="16.8665%" y="799.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (37,131 samples, 74.45%)</title><rect x="16.6165%" y="773" width="74.4526%" height="15" fill="rgb(207,72,44)" fg:x="8287" fg:w="37131"/><text x="16.8665%" y="783.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (37,120 samples, 74.43%)</title><rect x="16.6386%" y="757" width="74.4305%" height="15" fill="rgb(215,193,12)" fg:x="8298" fg:w="37120"/><text x="16.8886%" y="767.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (37,120 samples, 74.43%)</title><rect x="16.6386%" y="741" width="74.4305%" height="15" fill="rgb(248,41,39)" fg:x="8298" fg:w="37120"/><text x="16.8886%" y="751.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (36,975 samples, 74.14%)</title><rect x="16.9293%" y="725" width="74.1398%" height="15" fill="rgb(253,85,4)" fg:x="8443" fg:w="36975"/><text x="17.1793%" y="735.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.03%)</title><rect x="91.0852%" y="773" width="0.0321%" height="15" fill="rgb(243,70,31)" fg:x="45426" fg:w="16"/><text x="91.3352%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.03%)</title><rect x="91.0852%" y="757" width="0.0321%" height="15" fill="rgb(253,195,26)" fg:x="45426" fg:w="16"/><text x="91.3352%" y="767.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 0.01%)</title><rect x="91.1213%" y="757" width="0.0100%" height="15" fill="rgb(243,42,11)" fg:x="45444" fg:w="5"/><text x="91.3713%" y="767.50"></text></g><g><title>clock_gettime (5 samples, 0.01%)</title><rect x="91.1213%" y="741" width="0.0100%" height="15" fill="rgb(239,66,17)" fg:x="45444" fg:w="5"/><text x="91.3713%" y="751.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.01%)</title><rect x="91.1213%" y="725" width="0.0100%" height="15" fill="rgb(217,132,21)" fg:x="45444" fg:w="5"/><text x="91.3713%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (8 samples, 0.02%)</title><rect x="91.1173%" y="773" width="0.0160%" height="15" fill="rgb(252,202,21)" fg:x="45442" fg:w="8"/><text x="91.3673%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (27 samples, 0.05%)</title><rect x="91.1333%" y="773" width="0.0541%" height="15" fill="rgb(233,98,36)" fg:x="45450" fg:w="27"/><text x="91.3833%" y="783.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (23 samples, 0.05%)</title><rect x="91.1413%" y="757" width="0.0461%" height="15" fill="rgb(216,153,54)" fg:x="45454" fg:w="23"/><text x="91.3913%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (23 samples, 0.05%)</title><rect x="91.1413%" y="741" width="0.0461%" height="15" fill="rgb(250,99,7)" fg:x="45454" fg:w="23"/><text x="91.3913%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (23 samples, 0.05%)</title><rect x="91.1413%" y="725" width="0.0461%" height="15" fill="rgb(207,56,50)" fg:x="45454" fg:w="23"/><text x="91.3913%" y="735.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (64 samples, 0.13%)</title><rect x="91.0752%" y="805" width="0.1283%" height="15" fill="rgb(244,61,34)" fg:x="45421" fg:w="64"/><text x="91.3252%" y="815.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (64 samples, 0.13%)</title><rect x="91.0752%" y="789" width="0.1283%" height="15" fill="rgb(241,50,38)" fg:x="45421" fg:w="64"/><text x="91.3252%" y="799.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (8 samples, 0.02%)</title><rect x="91.1874%" y="773" width="0.0160%" height="15" fill="rgb(212,166,30)" fg:x="45477" fg:w="8"/><text x="91.4374%" y="783.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (8 samples, 0.02%)</title><rect x="91.1874%" y="757" width="0.0160%" height="15" fill="rgb(249,127,32)" fg:x="45477" fg:w="8"/><text x="91.4374%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.02%)</title><rect x="91.1874%" y="741" width="0.0160%" height="15" fill="rgb(209,103,0)" fg:x="45477" fg:w="8"/><text x="91.4374%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.02%)</title><rect x="91.1874%" y="725" width="0.0160%" height="15" fill="rgb(238,209,51)" fg:x="45477" fg:w="8"/><text x="91.4374%" y="735.50"></text></g><g><title>syscall (10 samples, 0.02%)</title><rect x="91.2035%" y="805" width="0.0201%" height="15" fill="rgb(237,56,23)" fg:x="45485" fg:w="10"/><text x="91.4535%" y="815.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (15 samples, 0.03%)</title><rect x="91.2235%" y="805" width="0.0301%" height="15" fill="rgb(215,153,46)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="815.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (15 samples, 0.03%)</title><rect x="91.2235%" y="789" width="0.0301%" height="15" fill="rgb(224,49,31)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="799.50"></text></g><g><title>mio::waker::Waker::wake (15 samples, 0.03%)</title><rect x="91.2235%" y="773" width="0.0301%" height="15" fill="rgb(250,18,42)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="783.50"></text></g><g><title>mio::sys::unix::waker::fdbased::Waker::wake (15 samples, 0.03%)</title><rect x="91.2235%" y="757" width="0.0301%" height="15" fill="rgb(215,176,39)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="767.50"></text></g><g><title>mio::sys::unix::waker::eventfd::WakerInternal::wake (15 samples, 0.03%)</title><rect x="91.2235%" y="741" width="0.0301%" height="15" fill="rgb(223,77,29)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="751.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (15 samples, 0.03%)</title><rect x="91.2235%" y="725" width="0.0301%" height="15" fill="rgb(234,94,52)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="735.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (15 samples, 0.03%)</title><rect x="91.2235%" y="709" width="0.0301%" height="15" fill="rgb(220,154,50)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="719.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (15 samples, 0.03%)</title><rect x="91.2235%" y="693" width="0.0301%" height="15" fill="rgb(212,11,10)" fg:x="45495" fg:w="15"/><text x="91.4735%" y="703.50"></text></g><g><title>write (14 samples, 0.03%)</title><rect x="91.2255%" y="677" width="0.0281%" height="15" fill="rgb(205,166,19)" fg:x="45496" fg:w="14"/><text x="91.4755%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (6 samples, 0.01%)</title><rect x="91.2717%" y="773" width="0.0120%" height="15" fill="rgb(244,198,16)" fg:x="45519" fg:w="6"/><text x="91.5217%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.01%)</title><rect x="91.2717%" y="757" width="0.0120%" height="15" fill="rgb(219,69,12)" fg:x="45519" fg:w="6"/><text x="91.5217%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (15 samples, 0.03%)</title><rect x="91.2596%" y="805" width="0.0301%" height="15" fill="rgb(245,30,7)" fg:x="45513" fg:w="15"/><text x="91.5096%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (15 samples, 0.03%)</title><rect x="91.2596%" y="789" width="0.0301%" height="15" fill="rgb(218,221,48)" fg:x="45513" fg:w="15"/><text x="91.5096%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (5 samples, 0.01%)</title><rect x="91.2917%" y="773" width="0.0100%" height="15" fill="rgb(216,66,15)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (5 samples, 0.01%)</title><rect x="91.2917%" y="757" width="0.0100%" height="15" fill="rgb(226,122,50)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="91.2917%" y="741" width="0.0100%" height="15" fill="rgb(239,156,16)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (5 samples, 0.01%)</title><rect x="91.2917%" y="725" width="0.0100%" height="15" fill="rgb(224,27,38)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (5 samples, 0.01%)</title><rect x="91.2917%" y="709" width="0.0100%" height="15" fill="rgb(224,39,27)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.01%)</title><rect x="91.2917%" y="693" width="0.0100%" height="15" fill="rgb(215,92,29)" fg:x="45529" fg:w="5"/><text x="91.5417%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.01%)</title><rect x="91.3037%" y="757" width="0.0120%" height="15" fill="rgb(207,159,16)" fg:x="45535" fg:w="6"/><text x="91.5537%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.01%)</title><rect x="91.3037%" y="741" width="0.0120%" height="15" fill="rgb(238,163,47)" fg:x="45535" fg:w="6"/><text x="91.5537%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (8 samples, 0.02%)</title><rect x="91.3017%" y="773" width="0.0160%" height="15" fill="rgb(219,91,49)" fg:x="45534" fg:w="8"/><text x="91.5517%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (37,307 samples, 74.81%)</title><rect x="16.5143%" y="853" width="74.8055%" height="15" fill="rgb(227,167,31)" fg:x="8236" fg:w="37307"/><text x="16.7643%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (122 samples, 0.24%)</title><rect x="91.0752%" y="837" width="0.2446%" height="15" fill="rgb(234,80,54)" fg:x="45421" fg:w="122"/><text x="91.3252%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (122 samples, 0.24%)</title><rect x="91.0752%" y="821" width="0.2446%" height="15" fill="rgb(212,114,2)" fg:x="45421" fg:w="122"/><text x="91.3252%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (15 samples, 0.03%)</title><rect x="91.2897%" y="805" width="0.0301%" height="15" fill="rgb(234,50,24)" fg:x="45528" fg:w="15"/><text x="91.5397%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (15 samples, 0.03%)</title><rect x="91.2897%" y="789" width="0.0301%" height="15" fill="rgb(221,68,8)" fg:x="45528" fg:w="15"/><text x="91.5397%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (5 samples, 0.01%)</title><rect x="91.3559%" y="837" width="0.0100%" height="15" fill="rgb(254,180,31)" fg:x="45561" fg:w="5"/><text x="91.6059%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (19 samples, 0.04%)</title><rect x="91.3679%" y="821" width="0.0381%" height="15" fill="rgb(247,130,50)" fg:x="45567" fg:w="19"/><text x="91.6179%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (45 samples, 0.09%)</title><rect x="91.3198%" y="853" width="0.0902%" height="15" fill="rgb(211,109,4)" fg:x="45543" fg:w="45"/><text x="91.5698%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (22 samples, 0.04%)</title><rect x="91.3659%" y="837" width="0.0441%" height="15" fill="rgb(238,50,21)" fg:x="45566" fg:w="22"/><text x="91.6159%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.03%)</title><rect x="91.5444%" y="805" width="0.0321%" height="15" fill="rgb(225,57,45)" fg:x="45655" fg:w="16"/><text x="91.7944%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (16 samples, 0.03%)</title><rect x="91.5444%" y="789" width="0.0321%" height="15" fill="rgb(209,196,50)" fg:x="45655" fg:w="16"/><text x="91.7944%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (16 samples, 0.03%)</title><rect x="91.5444%" y="773" width="0.0321%" height="15" fill="rgb(242,140,13)" fg:x="45655" fg:w="16"/><text x="91.7944%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (31 samples, 0.06%)</title><rect x="91.5885%" y="805" width="0.0622%" height="15" fill="rgb(217,111,7)" fg:x="45677" fg:w="31"/><text x="91.8385%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.06%)</title><rect x="91.5885%" y="789" width="0.0622%" height="15" fill="rgb(253,193,51)" fg:x="45677" fg:w="31"/><text x="91.8385%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (9 samples, 0.02%)</title><rect x="91.6506%" y="805" width="0.0180%" height="15" fill="rgb(252,70,29)" fg:x="45708" fg:w="9"/><text x="91.9006%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.02%)</title><rect x="91.6506%" y="789" width="0.0180%" height="15" fill="rgb(232,127,12)" fg:x="45708" fg:w="9"/><text x="91.9006%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (85 samples, 0.17%)</title><rect x="91.6687%" y="805" width="0.1704%" height="15" fill="rgb(211,180,21)" fg:x="45717" fg:w="85"/><text x="91.9187%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (85 samples, 0.17%)</title><rect x="91.6687%" y="789" width="0.1704%" height="15" fill="rgb(229,72,13)" fg:x="45717" fg:w="85"/><text x="91.9187%" y="799.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (9 samples, 0.02%)</title><rect x="91.8391%" y="805" width="0.0180%" height="15" fill="rgb(240,211,49)" fg:x="45802" fg:w="9"/><text x="92.0891%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2::_{{closure}} (9 samples, 0.02%)</title><rect x="91.8391%" y="789" width="0.0180%" height="15" fill="rgb(219,149,40)" fg:x="45802" fg:w="9"/><text x="92.0891%" y="799.50"></text></g><g><title>core::ptr::read (9 samples, 0.02%)</title><rect x="91.8391%" y="773" width="0.0180%" height="15" fill="rgb(210,127,46)" fg:x="45802" fg:w="9"/><text x="92.0891%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (170 samples, 0.34%)</title><rect x="91.5243%" y="821" width="0.3409%" height="15" fill="rgb(220,106,7)" fg:x="45645" fg:w="170"/><text x="91.7743%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (184 samples, 0.37%)</title><rect x="91.4982%" y="837" width="0.3689%" height="15" fill="rgb(249,31,22)" fg:x="45632" fg:w="184"/><text x="91.7482%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (232 samples, 0.47%)</title><rect x="91.4100%" y="853" width="0.4652%" height="15" fill="rgb(253,1,49)" fg:x="45588" fg:w="232"/><text x="91.6600%" y="863.50"></text></g><g><title>[libc.so.6] (44,214 samples, 88.65%)</title><rect x="3.2423%" y="1525" width="88.6550%" height="15" fill="rgb(227,144,33)" fg:x="1617" fg:w="44214"/><text x="3.4923%" y="1535.50">[libc.so.6]</text></g><g><title>[libc.so.6] (44,211 samples, 88.65%)</title><rect x="3.2483%" y="1509" width="88.6489%" height="15" fill="rgb(249,163,44)" fg:x="1620" fg:w="44211"/><text x="3.4983%" y="1519.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1493" width="88.6429%" height="15" fill="rgb(234,15,39)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1503.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1477" width="88.6429%" height="15" fill="rgb(207,66,16)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1487.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1461" width="88.6429%" height="15" fill="rgb(233,112,24)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1471.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1445" width="88.6429%" height="15" fill="rgb(230,90,22)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1455.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1429" width="88.6429%" height="15" fill="rgb(229,61,13)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1439.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1413" width="88.6429%" height="15" fill="rgb(225,57,24)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1423.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1397" width="88.6429%" height="15" fill="rgb(208,169,48)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1407.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1381" width="88.6429%" height="15" fill="rgb(244,218,51)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1391.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1365" width="88.6429%" height="15" fill="rgb(214,148,10)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1375.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1349" width="88.6429%" height="15" fill="rgb(225,174,27)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1359.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1333" width="88.6429%" height="15" fill="rgb(230,96,26)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1343.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1317" width="88.6429%" height="15" fill="rgb(232,10,30)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1327.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (44,208 samples, 88.64%)</title><rect x="3.2543%" y="1301" width="88.6429%" height="15" fill="rgb(222,8,50)" fg:x="1623" fg:w="44208"/><text x="3.5043%" y="1311.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (44,190 samples, 88.61%)</title><rect x="3.2904%" y="1285" width="88.6068%" height="15" fill="rgb(213,81,27)" fg:x="1641" fg:w="44190"/><text x="3.5404%" y="1295.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (44,190 samples, 88.61%)</title><rect x="3.2904%" y="1269" width="88.6068%" height="15" fill="rgb(245,50,10)" fg:x="1641" fg:w="44190"/><text x="3.5404%" y="1279.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (44,190 samples, 88.61%)</title><rect x="3.2904%" y="1253" width="88.6068%" height="15" fill="rgb(216,100,18)" fg:x="1641" fg:w="44190"/><text x="3.5404%" y="1263.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1237" width="88.6048%" height="15" fill="rgb(236,147,54)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1247.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1221" width="88.6048%" height="15" fill="rgb(205,143,26)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1231.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1205" width="88.6048%" height="15" fill="rgb(236,26,9)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1215.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1189" width="88.6048%" height="15" fill="rgb(221,165,53)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1199.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1173" width="88.6048%" height="15" fill="rgb(214,110,17)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1183.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1157" width="88.6048%" height="15" fill="rgb(237,197,12)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1167.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1141" width="88.6048%" height="15" fill="rgb(205,84,17)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1151.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1125" width="88.6048%" height="15" fill="rgb(237,18,45)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1135.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1109" width="88.6048%" height="15" fill="rgb(221,87,14)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1119.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1093" width="88.6048%" height="15" fill="rgb(238,186,15)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1103.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1077" width="88.6048%" height="15" fill="rgb(208,115,11)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1087.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1061" width="88.6048%" height="15" fill="rgb(254,175,0)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1071.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (44,189 samples, 88.60%)</title><rect x="3.2924%" y="1045" width="88.6048%" height="15" fill="rgb(227,24,42)" fg:x="1642" fg:w="44189"/><text x="3.5424%" y="1055.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (44,188 samples, 88.60%)</title><rect x="3.2944%" y="1029" width="88.6028%" height="15" fill="rgb(223,211,37)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="1039.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (44,188 samples, 88.60%)</title><rect x="3.2944%" y="1013" width="88.6028%" height="15" fill="rgb(235,49,27)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="1023.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (44,188 samples, 88.60%)</title><rect x="3.2944%" y="997" width="88.6028%" height="15" fill="rgb(254,97,51)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="1007.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (44,188 samples, 88.60%)</title><rect x="3.2944%" y="981" width="88.6028%" height="15" fill="rgb(249,51,40)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="991.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (44,188 samples, 88.60%)</title><rect x="3.2944%" y="965" width="88.6028%" height="15" fill="rgb(210,128,45)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="975.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (44,188 samples, 88.60%)</title><rect x="3.2944%" y="949" width="88.6028%" height="15" fill="rgb(224,137,50)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="959.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (44,188 samples, 88.60%)</title><rect x="3.2944%" y="933" width="88.6028%" height="15" fill="rgb(242,15,9)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="943.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (44,188 samples, 88.60%)</title><rect x="3.2944%" y="917" width="88.6028%" height="15" fill="rgb(233,187,41)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="927.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (44,188 samples, 88.60%)</title><rect x="3.2944%" y="901" width="88.6028%" height="15" fill="rgb(227,2,29)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="911.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (44,188 samples, 88.60%)</title><rect x="3.2944%" y="885" width="88.6028%" height="15" fill="rgb(222,70,3)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="895.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (44,188 samples, 88.60%)</title><rect x="3.2944%" y="869" width="88.6028%" height="15" fill="rgb(213,11,42)" fg:x="1643" fg:w="44188"/><text x="3.5444%" y="879.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tick (11 samples, 0.02%)</title><rect x="91.8752%" y="853" width="0.0221%" height="15" fill="rgb(225,150,9)" fg:x="45820" fg:w="11"/><text x="92.1252%" y="863.50"></text></g><g><title>syscall (5 samples, 0.01%)</title><rect x="91.9073%" y="1509" width="0.0100%" height="15" fill="rgb(230,162,45)" fg:x="45836" fg:w="5"/><text x="92.1573%" y="1519.50"></text></g><g><title>[simple-wisp-client] (20 samples, 0.04%)</title><rect x="91.8973%" y="1525" width="0.0401%" height="15" fill="rgb(222,14,52)" fg:x="45831" fg:w="20"/><text x="92.1473%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.01%)</title><rect x="91.9273%" y="1509" width="0.0100%" height="15" fill="rgb(254,198,14)" fg:x="45846" fg:w="5"/><text x="92.1773%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (10 samples, 0.02%)</title><rect x="97.8926%" y="1509" width="0.0201%" height="15" fill="rgb(220,217,30)" fg:x="48821" fg:w="10"/><text x="98.1426%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.01%)</title><rect x="97.9127%" y="1509" width="0.0100%" height="15" fill="rgb(215,146,41)" fg:x="48831" fg:w="5"/><text x="98.1627%" y="1519.50"></text></g><g><title>[libc.so.6] (23 samples, 0.05%)</title><rect x="97.9227%" y="1509" width="0.0461%" height="15" fill="rgb(217,27,36)" fg:x="48836" fg:w="23"/><text x="98.1727%" y="1519.50"></text></g><g><title>__madvise (8 samples, 0.02%)</title><rect x="97.9768%" y="1509" width="0.0160%" height="15" fill="rgb(219,218,39)" fg:x="48863" fg:w="8"/><text x="98.2268%" y="1519.50"></text></g><g><title>__send (7 samples, 0.01%)</title><rect x="97.9929%" y="1509" width="0.0140%" height="15" fill="rgb(219,4,42)" fg:x="48871" fg:w="7"/><text x="98.2429%" y="1519.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (5 samples, 0.01%)</title><rect x="98.0069%" y="1509" width="0.0100%" height="15" fill="rgb(249,119,36)" fg:x="48878" fg:w="5"/><text x="98.2569%" y="1519.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (10 samples, 0.02%)</title><rect x="98.0169%" y="1509" width="0.0201%" height="15" fill="rgb(209,23,33)" fg:x="48883" fg:w="10"/><text x="98.2669%" y="1519.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (12 samples, 0.02%)</title><rect x="98.0370%" y="1509" width="0.0241%" height="15" fill="rgb(211,10,0)" fg:x="48893" fg:w="12"/><text x="98.2870%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="98.0731%" y="1509" width="0.0100%" height="15" fill="rgb(208,99,37)" fg:x="48911" fg:w="5"/><text x="98.3231%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::SendFut&lt;bytes::bytes::Bytes&gt;&gt; (6 samples, 0.01%)</title><rect x="98.0911%" y="1509" width="0.0120%" height="15" fill="rgb(213,132,31)" fg:x="48920" fg:w="6"/><text x="98.3411%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::wisp_read_split::{{closure}}&gt; (10 samples, 0.02%)</title><rect x="98.1092%" y="1509" width="0.0201%" height="15" fill="rgb(243,129,40)" fg:x="48929" fg:w="10"/><text x="98.3592%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;::wisp_write_split::{{closure}}&gt; (100 samples, 0.20%)</title><rect x="98.1292%" y="1509" width="0.2005%" height="15" fill="rgb(210,66,33)" fg:x="48939" fg:w="100"/><text x="98.3792%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (8 samples, 0.02%)</title><rect x="98.3297%" y="1509" width="0.0160%" height="15" fill="rgb(209,189,4)" fg:x="49039" fg:w="8"/><text x="98.5797%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (9 samples, 0.02%)</title><rect x="98.3458%" y="1509" width="0.0180%" height="15" fill="rgb(214,107,37)" fg:x="49047" fg:w="9"/><text x="98.5958%" y="1519.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (5 samples, 0.01%)</title><rect x="98.3638%" y="1509" width="0.0100%" height="15" fill="rgb(245,88,54)" fg:x="49056" fg:w="5"/><text x="98.6138%" y="1519.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (11 samples, 0.02%)</title><rect x="98.3859%" y="1509" width="0.0221%" height="15" fill="rgb(205,146,20)" fg:x="49067" fg:w="11"/><text x="98.6359%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (45 samples, 0.09%)</title><rect x="98.4701%" y="1477" width="0.0902%" height="15" fill="rgb(220,161,25)" fg:x="49109" fg:w="45"/><text x="98.7201%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (45 samples, 0.09%)</title><rect x="98.4701%" y="1461" width="0.0902%" height="15" fill="rgb(215,152,15)" fg:x="49109" fg:w="45"/><text x="98.7201%" y="1471.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (77 samples, 0.15%)</title><rect x="98.4099%" y="1509" width="0.1544%" height="15" fill="rgb(233,192,44)" fg:x="49079" fg:w="77"/><text x="98.6599%" y="1519.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (47 samples, 0.09%)</title><rect x="98.4701%" y="1493" width="0.0942%" height="15" fill="rgb(240,170,46)" fg:x="49109" fg:w="47"/><text x="98.7201%" y="1503.50"></text></g><g><title>fastwebsockets::frame::&lt;impl core::convert::From&lt;fastwebsockets::frame::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (14 samples, 0.03%)</title><rect x="98.5643%" y="1509" width="0.0281%" height="15" fill="rgb(207,104,33)" fg:x="49156" fg:w="14"/><text x="98.8143%" y="1519.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (5 samples, 0.01%)</title><rect x="98.5924%" y="1509" width="0.0100%" height="15" fill="rgb(219,21,39)" fg:x="49170" fg:w="5"/><text x="98.8424%" y="1519.50"></text></g><g><title>malloc (30 samples, 0.06%)</title><rect x="98.6084%" y="1509" width="0.0602%" height="15" fill="rgb(214,133,29)" fg:x="49178" fg:w="30"/><text x="98.8584%" y="1519.50"></text></g><g><title>recv (22 samples, 0.04%)</title><rect x="98.6706%" y="1509" width="0.0441%" height="15" fill="rgb(226,93,6)" fg:x="49209" fg:w="22"/><text x="98.9206%" y="1519.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (5 samples, 0.01%)</title><rect x="98.7187%" y="1509" width="0.0100%" height="15" fill="rgb(252,222,34)" fg:x="49233" fg:w="5"/><text x="98.9687%" y="1519.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 0.01%)</title><rect x="98.7448%" y="1509" width="0.0120%" height="15" fill="rgb(252,92,48)" fg:x="49246" fg:w="6"/><text x="98.9948%" y="1519.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (23 samples, 0.05%)</title><rect x="98.7568%" y="1509" width="0.0461%" height="15" fill="rgb(245,223,24)" fg:x="49252" fg:w="23"/><text x="99.0068%" y="1519.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (7 samples, 0.01%)</title><rect x="98.7889%" y="1493" width="0.0140%" height="15" fill="rgb(205,176,3)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1503.50"></text></g><g><title>tokio::runtime::context::budget (7 samples, 0.01%)</title><rect x="98.7889%" y="1477" width="0.0140%" height="15" fill="rgb(235,151,15)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1487.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.01%)</title><rect x="98.7889%" y="1461" width="0.0140%" height="15" fill="rgb(237,209,11)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1471.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (7 samples, 0.01%)</title><rect x="98.7889%" y="1445" width="0.0140%" height="15" fill="rgb(243,227,24)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1455.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (7 samples, 0.01%)</title><rect x="98.7889%" y="1429" width="0.0140%" height="15" fill="rgb(239,193,16)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1439.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (7 samples, 0.01%)</title><rect x="98.7889%" y="1413" width="0.0140%" height="15" fill="rgb(231,27,9)" fg:x="49268" fg:w="7"/><text x="99.0389%" y="1423.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (11 samples, 0.02%)</title><rect x="98.8029%" y="1509" width="0.0221%" height="15" fill="rgb(219,169,10)" fg:x="49275" fg:w="11"/><text x="99.0529%" y="1519.50"></text></g><g><title>tokio::runtime::signal::Driver::process (6 samples, 0.01%)</title><rect x="98.8370%" y="1509" width="0.0120%" height="15" fill="rgb(244,229,43)" fg:x="49292" fg:w="6"/><text x="99.0870%" y="1519.50"></text></g><g><title>tokio::runtime::io::driver::signal::&lt;impl tokio::runtime::io::driver::Driver&gt;::consume_signal_ready (6 samples, 0.01%)</title><rect x="98.8370%" y="1493" width="0.0120%" height="15" fill="rgb(254,38,20)" fg:x="49292" fg:w="6"/><text x="99.0870%" y="1503.50"></text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.01%)</title><rect x="98.8491%" y="1509" width="0.0100%" height="15" fill="rgb(250,47,30)" fg:x="49298" fg:w="5"/><text x="99.0991%" y="1519.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (11 samples, 0.02%)</title><rect x="98.8591%" y="1509" width="0.0221%" height="15" fill="rgb(224,124,36)" fg:x="49303" fg:w="11"/><text x="99.1091%" y="1519.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (29 samples, 0.06%)</title><rect x="98.8932%" y="1509" width="0.0581%" height="15" fill="rgb(246,68,51)" fg:x="49320" fg:w="29"/><text x="99.1432%" y="1519.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (36 samples, 0.07%)</title><rect x="98.9513%" y="1509" width="0.0722%" height="15" fill="rgb(253,43,49)" fg:x="49349" fg:w="36"/><text x="99.2013%" y="1519.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (6 samples, 0.01%)</title><rect x="99.0115%" y="1493" width="0.0120%" height="15" fill="rgb(219,54,36)" fg:x="49379" fg:w="6"/><text x="99.2615%" y="1503.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (6 samples, 0.01%)</title><rect x="99.0115%" y="1477" width="0.0120%" height="15" fill="rgb(227,133,34)" fg:x="49379" fg:w="6"/><text x="99.2615%" y="1487.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (112 samples, 0.22%)</title><rect x="99.0235%" y="1509" width="0.2246%" height="15" fill="rgb(247,227,15)" fg:x="49385" fg:w="112"/><text x="99.2735%" y="1519.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (71 samples, 0.14%)</title><rect x="99.1057%" y="1493" width="0.1424%" height="15" fill="rgb(229,96,14)" fg:x="49426" fg:w="71"/><text x="99.3557%" y="1503.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (71 samples, 0.14%)</title><rect x="99.1057%" y="1477" width="0.1424%" height="15" fill="rgb(220,79,17)" fg:x="49426" fg:w="71"/><text x="99.3557%" y="1487.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split::_{{closure}} (17 samples, 0.03%)</title><rect x="99.2481%" y="1509" width="0.0341%" height="15" fill="rgb(205,131,53)" fg:x="49497" fg:w="17"/><text x="99.4981%" y="1519.50"></text></g><g><title>wisp_mux::ws::&lt;impl core::convert::From&lt;wisp_mux::ws::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (5 samples, 0.01%)</title><rect x="99.2902%" y="1509" width="0.0100%" height="15" fill="rgb(209,50,29)" fg:x="49518" fg:w="5"/><text x="99.5402%" y="1519.50"></text></g><g><title>[unknown] (3,675 samples, 7.37%)</title><rect x="91.9374%" y="1525" width="7.3689%" height="15" fill="rgb(245,86,46)" fg:x="45851" fg:w="3675"/><text x="92.1874%" y="1535.50">[unknown]</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.01%)</title><rect x="99.3102%" y="1525" width="0.0120%" height="15" fill="rgb(235,66,46)" fg:x="49528" fg:w="6"/><text x="99.5602%" y="1535.50"></text></g><g><title>cfree (9 samples, 0.02%)</title><rect x="99.3243%" y="1525" width="0.0180%" height="15" fill="rgb(232,148,31)" fg:x="49535" fg:w="9"/><text x="99.5743%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::SendFut&lt;bytes::bytes::Bytes&gt;&gt; (14 samples, 0.03%)</title><rect x="99.3543%" y="1525" width="0.0281%" height="15" fill="rgb(217,149,8)" fg:x="49550" fg:w="14"/><text x="99.6043%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (14 samples, 0.03%)</title><rect x="99.3824%" y="1525" width="0.0281%" height="15" fill="rgb(209,183,11)" fg:x="49564" fg:w="14"/><text x="99.6324%" y="1535.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (5 samples, 0.01%)</title><rect x="99.4105%" y="1525" width="0.0100%" height="15" fill="rgb(208,55,20)" fg:x="49578" fg:w="5"/><text x="99.6605%" y="1535.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (13 samples, 0.03%)</title><rect x="99.4446%" y="1525" width="0.0261%" height="15" fill="rgb(218,39,14)" fg:x="49595" fg:w="13"/><text x="99.6946%" y="1535.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="99.4706%" y="1525" width="0.0241%" height="15" fill="rgb(216,169,33)" fg:x="49608" fg:w="12"/><text x="99.7206%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (18 samples, 0.04%)</title><rect x="99.5308%" y="1509" width="0.0361%" height="15" fill="rgb(233,80,24)" fg:x="49638" fg:w="18"/><text x="99.7808%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (18 samples, 0.04%)</title><rect x="99.5308%" y="1493" width="0.0361%" height="15" fill="rgb(213,179,31)" fg:x="49638" fg:w="18"/><text x="99.7808%" y="1503.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (18 samples, 0.04%)</title><rect x="99.5308%" y="1477" width="0.0361%" height="15" fill="rgb(209,19,5)" fg:x="49638" fg:w="18"/><text x="99.7808%" y="1487.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.04%)</title><rect x="99.5729%" y="1493" width="0.0401%" height="15" fill="rgb(219,18,35)" fg:x="49659" fg:w="20"/><text x="99.8229%" y="1503.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (20 samples, 0.04%)</title><rect x="99.5729%" y="1477" width="0.0401%" height="15" fill="rgb(209,169,16)" fg:x="49659" fg:w="20"/><text x="99.8229%" y="1487.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.04%)</title><rect x="99.5729%" y="1461" width="0.0401%" height="15" fill="rgb(245,90,51)" fg:x="49659" fg:w="20"/><text x="99.8229%" y="1471.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (26 samples, 0.05%)</title><rect x="99.5669%" y="1509" width="0.0521%" height="15" fill="rgb(220,99,45)" fg:x="49656" fg:w="26"/><text x="99.8169%" y="1519.50"></text></g><g><title>simple_wisp_client::main::_{{closure}}::_{{closure}} (98 samples, 0.20%)</title><rect x="99.5007%" y="1525" width="0.1965%" height="15" fill="rgb(249,89,25)" fg:x="49623" fg:w="98"/><text x="99.7507%" y="1535.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::write::_{{closure}} (39 samples, 0.08%)</title><rect x="99.6190%" y="1509" width="0.0782%" height="15" fill="rgb(239,193,0)" fg:x="49682" fg:w="39"/><text x="99.8690%" y="1519.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload::_{{closure}} (39 samples, 0.08%)</title><rect x="99.6190%" y="1493" width="0.0782%" height="15" fill="rgb(231,126,1)" fg:x="49682" fg:w="39"/><text x="99.8690%" y="1503.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload_internal::_{{closure}} (38 samples, 0.08%)</title><rect x="99.6210%" y="1477" width="0.0762%" height="15" fill="rgb(243,166,3)" fg:x="49683" fg:w="38"/><text x="99.8710%" y="1487.50"></text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_split::_{{closure}} (37 samples, 0.07%)</title><rect x="99.6230%" y="1461" width="0.0742%" height="15" fill="rgb(223,22,34)" fg:x="49684" fg:w="37"/><text x="99.8730%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="99.6772%" y="1445" width="0.0201%" height="15" fill="rgb(251,52,51)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (10 samples, 0.02%)</title><rect x="99.6772%" y="1429" width="0.0201%" height="15" fill="rgb(221,165,28)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1439.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="99.6772%" y="1413" width="0.0201%" height="15" fill="rgb(218,121,47)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.02%)</title><rect x="99.6772%" y="1397" width="0.0201%" height="15" fill="rgb(209,120,9)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1407.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.02%)</title><rect x="99.6772%" y="1381" width="0.0201%" height="15" fill="rgb(236,68,12)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1391.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.02%)</title><rect x="99.6772%" y="1365" width="0.0201%" height="15" fill="rgb(225,194,26)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1375.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.02%)</title><rect x="99.6772%" y="1349" width="0.0201%" height="15" fill="rgb(231,84,39)" fg:x="49711" fg:w="10"/><text x="99.9272%" y="1359.50"></text></g><g><title>syscall (7 samples, 0.01%)</title><rect x="99.7032%" y="1525" width="0.0140%" height="15" fill="rgb(210,11,45)" fg:x="49724" fg:w="7"/><text x="99.9532%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::poll (12 samples, 0.02%)</title><rect x="99.7233%" y="1525" width="0.0241%" height="15" fill="rgb(224,54,52)" fg:x="49734" fg:w="12"/><text x="99.9733%" y="1535.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5 samples, 0.01%)</title><rect x="99.7975%" y="1445" width="0.0100%" height="15" fill="rgb(238,102,14)" fg:x="49771" fg:w="5"/><text x="100.0475%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (11 samples, 0.02%)</title><rect x="99.8175%" y="1445" width="0.0221%" height="15" fill="rgb(243,160,52)" fg:x="49781" fg:w="11"/><text x="100.0675%" y="1455.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="99.8175%" y="1429" width="0.0221%" height="15" fill="rgb(216,114,19)" fg:x="49781" fg:w="11"/><text x="100.0675%" y="1439.50"></text></g><g><title>bytes::bytes_mut::release_shared (7 samples, 0.01%)</title><rect x="99.8256%" y="1413" width="0.0140%" height="15" fill="rgb(244,166,37)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1423.50"></text></g><g><title>core::mem::drop (7 samples, 0.01%)</title><rect x="99.8256%" y="1397" width="0.0140%" height="15" fill="rgb(246,29,44)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (7 samples, 0.01%)</title><rect x="99.8256%" y="1381" width="0.0140%" height="15" fill="rgb(215,56,53)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (7 samples, 0.01%)</title><rect x="99.8256%" y="1365" width="0.0140%" height="15" fill="rgb(217,60,2)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.01%)</title><rect x="99.8256%" y="1349" width="0.0140%" height="15" fill="rgb(207,26,24)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.01%)</title><rect x="99.8256%" y="1333" width="0.0140%" height="15" fill="rgb(252,210,15)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1343.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="99.8256%" y="1317" width="0.0140%" height="15" fill="rgb(253,209,26)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.01%)</title><rect x="99.8256%" y="1301" width="0.0140%" height="15" fill="rgb(238,170,14)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1311.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.01%)</title><rect x="99.8256%" y="1285" width="0.0140%" height="15" fill="rgb(216,178,15)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1295.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.01%)</title><rect x="99.8256%" y="1269" width="0.0140%" height="15" fill="rgb(250,197,2)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1279.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.01%)</title><rect x="99.8256%" y="1253" width="0.0140%" height="15" fill="rgb(212,70,42)" fg:x="49785" fg:w="7"/><text x="100.0756%" y="1263.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}}::_{{closure}} (93 samples, 0.19%)</title><rect x="99.7554%" y="1525" width="0.1865%" height="15" fill="rgb(227,213,9)" fg:x="49750" fg:w="93"/><text x="100.0054%" y="1535.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (77 samples, 0.15%)</title><rect x="99.7875%" y="1509" width="0.1544%" height="15" fill="rgb(245,99,25)" fg:x="49766" fg:w="77"/><text x="100.0375%" y="1519.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (77 samples, 0.15%)</title><rect x="99.7875%" y="1493" width="0.1544%" height="15" fill="rgb(250,82,29)" fg:x="49766" fg:w="77"/><text x="100.0375%" y="1503.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (77 samples, 0.15%)</title><rect x="99.7875%" y="1477" width="0.1544%" height="15" fill="rgb(241,226,54)" fg:x="49766" fg:w="77"/><text x="100.0375%" y="1487.50"></text></g><g><title>wisp_mux::MuxInner::client_loop::_{{closure}} (77 samples, 0.15%)</title><rect x="99.7875%" y="1461" width="0.1544%" height="15" fill="rgb(221,99,41)" fg:x="49766" fg:w="77"/><text x="100.0375%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="99.8396%" y="1445" width="0.1023%" height="15" fill="rgb(213,90,21)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (51 samples, 0.10%)</title><rect x="99.8396%" y="1429" width="0.1023%" height="15" fill="rgb(205,208,24)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1439.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.10%)</title><rect x="99.8396%" y="1413" width="0.1023%" height="15" fill="rgb(246,31,12)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.10%)</title><rect x="99.8396%" y="1397" width="0.1023%" height="15" fill="rgb(213,154,6)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1407.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.10%)</title><rect x="99.8396%" y="1381" width="0.1023%" height="15" fill="rgb(222,163,29)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1391.50"></text></g><g><title>__rdl_dealloc (51 samples, 0.10%)</title><rect x="99.8396%" y="1365" width="0.1023%" height="15" fill="rgb(227,201,8)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1375.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51 samples, 0.10%)</title><rect x="99.8396%" y="1349" width="0.1023%" height="15" fill="rgb(233,9,32)" fg:x="49792" fg:w="51"/><text x="100.0896%" y="1359.50"></text></g><g><title>wisp_mux::MuxInner::client_into_future::_{{closure}} (10 samples, 0.02%)</title><rect x="99.9419%" y="1525" width="0.0201%" height="15" fill="rgb(217,54,24)" fg:x="49843" fg:w="10"/><text x="100.1919%" y="1535.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}} (8 samples, 0.02%)</title><rect x="99.9459%" y="1509" width="0.0160%" height="15" fill="rgb(235,192,0)" fg:x="49845" fg:w="8"/><text x="100.1959%" y="1519.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.02%)</title><rect x="99.9459%" y="1493" width="0.0160%" height="15" fill="rgb(235,45,9)" fg:x="49845" fg:w="8"/><text x="100.1959%" y="1503.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}} (8 samples, 0.02%)</title><rect x="99.9459%" y="1477" width="0.0160%" height="15" fill="rgb(246,42,40)" fg:x="49845" fg:w="8"/><text x="100.1959%" y="1487.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.02%)</title><rect x="99.9459%" y="1461" width="0.0160%" height="15" fill="rgb(248,111,24)" fg:x="49845" fg:w="8"/><text x="100.1959%" y="1471.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split::_{{closure}} (6 samples, 0.01%)</title><rect x="99.9619%" y="1525" width="0.0120%" height="15" fill="rgb(249,65,22)" fg:x="49853" fg:w="6"/><text x="100.2119%" y="1535.50"></text></g><g><title>wisp_mux::ws::&lt;impl core::convert::From&lt;wisp_mux::ws::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (9 samples, 0.02%)</title><rect x="99.9799%" y="1525" width="0.0180%" height="15" fill="rgb(238,111,51)" fg:x="49862" fg:w="9"/><text x="100.2299%" y="1535.50"></text></g><g><title>all (49,872 samples, 100%)</title><rect x="0.0000%" y="1557" width="100.0000%" height="15" fill="rgb(250,118,22)" fg:x="0" fg:w="49872"/><text x="0.2500%" y="1567.50"></text></g><g><title>tokio-runtime-w (49,831 samples, 99.92%)</title><rect x="0.0822%" y="1541" width="99.9178%" height="15" fill="rgb(234,84,26)" fg:x="41" fg:w="49831"/><text x="0.3322%" y="1551.50">tokio-runtime-w</text></g></svg></svg>