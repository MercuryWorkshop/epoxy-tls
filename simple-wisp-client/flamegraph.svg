<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1654" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1637.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1637.00"> </text><svg id="frames" x="10" width="1180" total_samples="7922"><g><title>[anon] (2 samples, 0.03%)</title><rect x="0.0000%" y="1573" width="0.0252%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1583.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="0.0000%" y="1557" width="0.0252%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1567.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.05%)</title><rect x="0.0252%" y="1573" width="0.0505%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.2752%" y="1583.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="0.0505%" y="1557" width="0.0252%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.3005%" y="1567.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0631%" y="1541" width="0.0126%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.3131%" y="1551.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0631%" y="1525" width="0.0126%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.3131%" y="1535.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0631%" y="1509" width="0.0126%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.3131%" y="1519.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0631%" y="1493" width="0.0126%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.3131%" y="1503.50"></text></g><g><title>[libc.so.6] (15 samples, 0.19%)</title><rect x="0.0757%" y="1573" width="0.1893%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="15"/><text x="0.3257%" y="1583.50"></text></g><g><title>[libc.so.6] (14 samples, 0.18%)</title><rect x="0.0884%" y="1557" width="0.1767%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="14"/><text x="0.3384%" y="1567.50"></text></g><g><title>[libc.so.6] (7 samples, 0.09%)</title><rect x="0.1767%" y="1541" width="0.0884%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="7"/><text x="0.4267%" y="1551.50"></text></g><g><title>snprintf (7 samples, 0.09%)</title><rect x="0.1767%" y="1525" width="0.0884%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="7"/><text x="0.4267%" y="1535.50"></text></g><g><title>[libc.so.6] (6 samples, 0.08%)</title><rect x="0.1893%" y="1509" width="0.0757%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="6"/><text x="0.4393%" y="1519.50"></text></g><g><title>[libc.so.6] (3 samples, 0.04%)</title><rect x="0.2272%" y="1493" width="0.0379%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="3"/><text x="0.4772%" y="1503.50"></text></g><g><title>strchrnul@plt (2 samples, 0.03%)</title><rect x="0.2398%" y="1477" width="0.0252%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="2"/><text x="0.4898%" y="1487.50"></text></g><g><title>[unknown] (7 samples, 0.09%)</title><rect x="0.2651%" y="1573" width="0.0884%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="7"/><text x="0.5151%" y="1583.50"></text></g><g><title>tokio::runtime::builder::Builder::build (4 samples, 0.05%)</title><rect x="0.3534%" y="1509" width="0.0505%" height="15" fill="rgb(225,20,46)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1519.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (4 samples, 0.05%)</title><rect x="0.3534%" y="1493" width="0.0505%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1503.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (4 samples, 0.05%)</title><rect x="0.3534%" y="1477" width="0.0505%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1487.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (4 samples, 0.05%)</title><rect x="0.3534%" y="1461" width="0.0505%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1471.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (4 samples, 0.05%)</title><rect x="0.3534%" y="1445" width="0.0505%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1455.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (4 samples, 0.05%)</title><rect x="0.3534%" y="1429" width="0.0505%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1439.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (4 samples, 0.05%)</title><rect x="0.3534%" y="1413" width="0.0505%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1423.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 0.05%)</title><rect x="0.3534%" y="1397" width="0.0505%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1407.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.05%)</title><rect x="0.3534%" y="1381" width="0.0505%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1391.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.05%)</title><rect x="0.3534%" y="1365" width="0.0505%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1375.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.05%)</title><rect x="0.3534%" y="1349" width="0.0505%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1359.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.05%)</title><rect x="0.3534%" y="1333" width="0.0505%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="4"/><text x="0.6034%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::park (3 samples, 0.04%)</title><rect x="0.3661%" y="1317" width="0.0379%" height="15" fill="rgb(214,148,48)" fg:x="29" fg:w="3"/><text x="0.6161%" y="1327.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3 samples, 0.04%)</title><rect x="0.3661%" y="1301" width="0.0379%" height="15" fill="rgb(232,36,49)" fg:x="29" fg:w="3"/><text x="0.6161%" y="1311.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (3 samples, 0.04%)</title><rect x="0.3661%" y="1285" width="0.0379%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="3"/><text x="0.6161%" y="1295.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.01%)</title><rect x="0.3913%" y="1269" width="0.0126%" height="15" fill="rgb(229,88,8)" fg:x="31" fg:w="1"/><text x="0.6413%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.01%)</title><rect x="0.4166%" y="1189" width="0.0126%" height="15" fill="rgb(213,181,19)" fg:x="33" fg:w="1"/><text x="0.6666%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="0.4166%" y="1173" width="0.0126%" height="15" fill="rgb(254,191,54)" fg:x="33" fg:w="1"/><text x="0.6666%" y="1183.50"></text></g><g><title>main (8 samples, 0.10%)</title><rect x="0.3534%" y="1573" width="0.1010%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="8"/><text x="0.6034%" y="1583.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8 samples, 0.10%)</title><rect x="0.3534%" y="1557" width="0.1010%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="8"/><text x="0.6034%" y="1567.50"></text></g><g><title>core::ops::function::FnOnce::call_once (8 samples, 0.10%)</title><rect x="0.3534%" y="1541" width="0.1010%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="8"/><text x="0.6034%" y="1551.50"></text></g><g><title>simple_wisp_client::main (8 samples, 0.10%)</title><rect x="0.3534%" y="1525" width="0.1010%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="8"/><text x="0.6034%" y="1535.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (4 samples, 0.05%)</title><rect x="0.4039%" y="1509" width="0.0505%" height="15" fill="rgb(238,167,29)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1519.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (4 samples, 0.05%)</title><rect x="0.4039%" y="1493" width="0.0505%" height="15" fill="rgb(232,182,51)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1503.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (4 samples, 0.05%)</title><rect x="0.4039%" y="1477" width="0.0505%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1487.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (4 samples, 0.05%)</title><rect x="0.4039%" y="1461" width="0.0505%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1471.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (4 samples, 0.05%)</title><rect x="0.4039%" y="1445" width="0.0505%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1455.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (4 samples, 0.05%)</title><rect x="0.4039%" y="1429" width="0.0505%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1439.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (4 samples, 0.05%)</title><rect x="0.4039%" y="1413" width="0.0505%" height="15" fill="rgb(222,207,29)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1423.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (4 samples, 0.05%)</title><rect x="0.4039%" y="1397" width="0.0505%" height="15" fill="rgb(206,96,30)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1407.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (4 samples, 0.05%)</title><rect x="0.4039%" y="1381" width="0.0505%" height="15" fill="rgb(218,138,4)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1391.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.05%)</title><rect x="0.4039%" y="1365" width="0.0505%" height="15" fill="rgb(250,191,14)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1375.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::_{{closure}} (4 samples, 0.05%)</title><rect x="0.4039%" y="1349" width="0.0505%" height="15" fill="rgb(239,60,40)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1359.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::_{{closure}} (4 samples, 0.05%)</title><rect x="0.4039%" y="1333" width="0.0505%" height="15" fill="rgb(206,27,48)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1343.50"></text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.05%)</title><rect x="0.4039%" y="1317" width="0.0505%" height="15" fill="rgb(225,35,8)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1327.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (4 samples, 0.05%)</title><rect x="0.4039%" y="1301" width="0.0505%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1311.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (4 samples, 0.05%)</title><rect x="0.4039%" y="1285" width="0.0505%" height="15" fill="rgb(247,123,22)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1295.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.05%)</title><rect x="0.4039%" y="1269" width="0.0505%" height="15" fill="rgb(231,138,38)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1279.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.05%)</title><rect x="0.4039%" y="1253" width="0.0505%" height="15" fill="rgb(231,145,46)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1263.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.05%)</title><rect x="0.4039%" y="1237" width="0.0505%" height="15" fill="rgb(251,118,11)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1247.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (4 samples, 0.05%)</title><rect x="0.4039%" y="1221" width="0.0505%" height="15" fill="rgb(217,147,25)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1231.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (4 samples, 0.05%)</title><rect x="0.4039%" y="1205" width="0.0505%" height="15" fill="rgb(247,81,37)" fg:x="32" fg:w="4"/><text x="0.6539%" y="1215.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (2 samples, 0.03%)</title><rect x="0.4292%" y="1189" width="0.0252%" height="15" fill="rgb(209,12,38)" fg:x="34" fg:w="2"/><text x="0.6792%" y="1199.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="0.4292%" y="1173" width="0.0252%" height="15" fill="rgb(227,1,9)" fg:x="34" fg:w="2"/><text x="0.6792%" y="1183.50"></text></g><g><title>simple-wisp-cli (37 samples, 0.47%)</title><rect x="0.0000%" y="1589" width="0.4671%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="37"/><text x="0.2500%" y="1599.50"></text></g><g><title>simple_wisp_client::main::_{{closure}} (1 samples, 0.01%)</title><rect x="0.4544%" y="1573" width="0.0126%" height="15" fill="rgb(221,10,30)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="0.4544%" y="1557" width="0.0126%" height="15" fill="rgb(210,229,1)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1567.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.01%)</title><rect x="0.4544%" y="1541" width="0.0126%" height="15" fill="rgb(222,148,37)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1551.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="0.4544%" y="1525" width="0.0126%" height="15" fill="rgb(234,67,33)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1535.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.01%)</title><rect x="0.4544%" y="1509" width="0.0126%" height="15" fill="rgb(247,98,35)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.4544%" y="1493" width="0.0126%" height="15" fill="rgb(247,138,52)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.4544%" y="1477" width="0.0126%" height="15" fill="rgb(213,79,30)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.4544%" y="1461" width="0.0126%" height="15" fill="rgb(246,177,23)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.01%)</title><rect x="0.4544%" y="1445" width="0.0126%" height="15" fill="rgb(230,62,27)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="0.4544%" y="1429" width="0.0126%" height="15" fill="rgb(216,154,8)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="0.4544%" y="1413" width="0.0126%" height="15" fill="rgb(244,35,45)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="0.4544%" y="1397" width="0.0126%" height="15" fill="rgb(251,115,12)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1407.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="0.4544%" y="1381" width="0.0126%" height="15" fill="rgb(240,54,50)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1391.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="0.4544%" y="1365" width="0.0126%" height="15" fill="rgb(233,84,52)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1375.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="0.4544%" y="1349" width="0.0126%" height="15" fill="rgb(207,117,47)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1359.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="0.4544%" y="1333" width="0.0126%" height="15" fill="rgb(249,43,39)" fg:x="36" fg:w="1"/><text x="0.7044%" y="1343.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (3 samples, 0.04%)</title><rect x="0.4671%" y="1573" width="0.0379%" height="15" fill="rgb(209,38,44)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="0.4671%" y="1557" width="0.0379%" height="15" fill="rgb(236,212,23)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (3 samples, 0.04%)</title><rect x="0.4671%" y="1541" width="0.0379%" height="15" fill="rgb(242,79,21)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1551.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="0.4671%" y="1525" width="0.0379%" height="15" fill="rgb(211,96,35)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="0.4671%" y="1509" width="0.0379%" height="15" fill="rgb(253,215,40)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1519.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="0.4671%" y="1493" width="0.0379%" height="15" fill="rgb(211,81,21)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1503.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.04%)</title><rect x="0.4671%" y="1477" width="0.0379%" height="15" fill="rgb(208,190,38)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1487.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.04%)</title><rect x="0.4671%" y="1461" width="0.0379%" height="15" fill="rgb(235,213,38)" fg:x="37" fg:w="3"/><text x="0.7171%" y="1471.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (6 samples, 0.08%)</title><rect x="0.5049%" y="1573" width="0.0757%" height="15" fill="rgb(237,122,38)" fg:x="40" fg:w="6"/><text x="0.7549%" y="1583.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt; as wisp_mux::ws::WebSocketWrite&gt;::wisp_write_split::_{{closure}} (3 samples, 0.04%)</title><rect x="0.5807%" y="1557" width="0.0379%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="3"/><text x="0.8307%" y="1567.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.06%)</title><rect x="0.6185%" y="1557" width="0.0631%" height="15" fill="rgb(240,68,47)" fg:x="49" fg:w="5"/><text x="0.8685%" y="1567.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (2 samples, 0.03%)</title><rect x="0.6564%" y="1541" width="0.0252%" height="15" fill="rgb(210,16,53)" fg:x="52" fg:w="2"/><text x="0.9064%" y="1551.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (2 samples, 0.03%)</title><rect x="0.6564%" y="1525" width="0.0252%" height="15" fill="rgb(235,124,12)" fg:x="52" fg:w="2"/><text x="0.9064%" y="1535.50"></text></g><g><title>event_listener::TaskRef::into_task (2 samples, 0.03%)</title><rect x="0.6564%" y="1509" width="0.0252%" height="15" fill="rgb(224,169,11)" fg:x="52" fg:w="2"/><text x="0.9064%" y="1519.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="0.6564%" y="1493" width="0.0252%" height="15" fill="rgb(250,166,2)" fg:x="52" fg:w="2"/><text x="0.9064%" y="1503.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="0.6816%" y="1557" width="0.0126%" height="15" fill="rgb(242,216,29)" fg:x="54" fg:w="1"/><text x="0.9316%" y="1567.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (1 samples, 0.01%)</title><rect x="0.6943%" y="1557" width="0.0126%" height="15" fill="rgb(230,116,27)" fg:x="55" fg:w="1"/><text x="0.9443%" y="1567.50"></text></g><g><title>[simple-wisp-client] (1 samples, 0.01%)</title><rect x="0.7069%" y="1557" width="0.0126%" height="15" fill="rgb(228,99,48)" fg:x="56" fg:w="1"/><text x="0.9569%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (1 samples, 0.01%)</title><rect x="0.7069%" y="1541" width="0.0126%" height="15" fill="rgb(253,11,6)" fg:x="56" fg:w="1"/><text x="0.9569%" y="1551.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.01%)</title><rect x="0.7195%" y="1557" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="57" fg:w="1"/><text x="0.9695%" y="1567.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (6 samples, 0.08%)</title><rect x="0.7321%" y="1557" width="0.0757%" height="15" fill="rgb(236,97,10)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1567.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (6 samples, 0.08%)</title><rect x="0.7321%" y="1541" width="0.0757%" height="15" fill="rgb(233,208,19)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1551.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (6 samples, 0.08%)</title><rect x="0.7321%" y="1525" width="0.0757%" height="15" fill="rgb(216,164,2)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1535.50"></text></g><g><title>bytes::bytes_mut::release_shared (6 samples, 0.08%)</title><rect x="0.7321%" y="1509" width="0.0757%" height="15" fill="rgb(220,129,5)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1519.50"></text></g><g><title>core::mem::drop (6 samples, 0.08%)</title><rect x="0.7321%" y="1493" width="0.0757%" height="15" fill="rgb(242,17,10)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (6 samples, 0.08%)</title><rect x="0.7321%" y="1477" width="0.0757%" height="15" fill="rgb(242,107,0)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (6 samples, 0.08%)</title><rect x="0.7321%" y="1461" width="0.0757%" height="15" fill="rgb(251,28,31)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.08%)</title><rect x="0.7321%" y="1445" width="0.0757%" height="15" fill="rgb(233,223,10)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.08%)</title><rect x="0.7321%" y="1429" width="0.0757%" height="15" fill="rgb(215,21,27)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1439.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="0.7321%" y="1413" width="0.0757%" height="15" fill="rgb(232,23,21)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6 samples, 0.08%)</title><rect x="0.7321%" y="1397" width="0.0757%" height="15" fill="rgb(244,5,23)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.08%)</title><rect x="0.7321%" y="1381" width="0.0757%" height="15" fill="rgb(226,81,46)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1391.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.08%)</title><rect x="0.7321%" y="1365" width="0.0757%" height="15" fill="rgb(247,70,30)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1375.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.08%)</title><rect x="0.7321%" y="1349" width="0.0757%" height="15" fill="rgb(212,68,19)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1359.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.08%)</title><rect x="0.7321%" y="1333" width="0.0757%" height="15" fill="rgb(240,187,13)" fg:x="58" fg:w="6"/><text x="0.9821%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (3 samples, 0.04%)</title><rect x="0.8079%" y="1557" width="0.0379%" height="15" fill="rgb(223,113,26)" fg:x="64" fg:w="3"/><text x="1.0579%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (5 samples, 0.06%)</title><rect x="0.8457%" y="1557" width="0.0631%" height="15" fill="rgb(206,192,2)" fg:x="67" fg:w="5"/><text x="1.0957%" y="1567.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="0.8710%" y="1541" width="0.0379%" height="15" fill="rgb(241,108,4)" fg:x="69" fg:w="3"/><text x="1.1210%" y="1551.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (3 samples, 0.04%)</title><rect x="0.8710%" y="1525" width="0.0379%" height="15" fill="rgb(247,173,49)" fg:x="69" fg:w="3"/><text x="1.1210%" y="1535.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_ref (2 samples, 0.03%)</title><rect x="0.8836%" y="1509" width="0.0252%" height="15" fill="rgb(224,114,35)" fg:x="70" fg:w="2"/><text x="1.1336%" y="1519.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (2 samples, 0.03%)</title><rect x="0.8836%" y="1493" width="0.0252%" height="15" fill="rgb(245,159,27)" fg:x="70" fg:w="2"/><text x="1.1336%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (1 samples, 0.01%)</title><rect x="0.9089%" y="1557" width="0.0126%" height="15" fill="rgb(245,172,44)" fg:x="72" fg:w="1"/><text x="1.1589%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="0.9215%" y="1557" width="0.0126%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="1"/><text x="1.1715%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::LockedWebSocketWrite::write_split::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="0.9341%" y="1557" width="0.0126%" height="15" fill="rgb(205,117,38)" fg:x="74" fg:w="1"/><text x="1.1841%" y="1567.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (1 samples, 0.01%)</title><rect x="0.9467%" y="1557" width="0.0126%" height="15" fill="rgb(237,72,25)" fg:x="75" fg:w="1"/><text x="1.1967%" y="1567.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (1 samples, 0.01%)</title><rect x="0.9467%" y="1541" width="0.0126%" height="15" fill="rgb(244,70,9)" fg:x="75" fg:w="1"/><text x="1.1967%" y="1551.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.01%)</title><rect x="0.9467%" y="1525" width="0.0126%" height="15" fill="rgb(217,125,39)" fg:x="75" fg:w="1"/><text x="1.1967%" y="1535.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="0.9467%" y="1509" width="0.0126%" height="15" fill="rgb(235,36,10)" fg:x="75" fg:w="1"/><text x="1.1967%" y="1519.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (2 samples, 0.03%)</title><rect x="0.9594%" y="1557" width="0.0252%" height="15" fill="rgb(251,123,47)" fg:x="76" fg:w="2"/><text x="1.2094%" y="1567.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (1 samples, 0.01%)</title><rect x="0.9720%" y="1541" width="0.0126%" height="15" fill="rgb(221,13,13)" fg:x="77" fg:w="1"/><text x="1.2220%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (1 samples, 0.01%)</title><rect x="0.9720%" y="1525" width="0.0126%" height="15" fill="rgb(238,131,9)" fg:x="77" fg:w="1"/><text x="1.2220%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (1 samples, 0.01%)</title><rect x="0.9720%" y="1509" width="0.0126%" height="15" fill="rgb(211,50,8)" fg:x="77" fg:w="1"/><text x="1.2220%" y="1519.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (2 samples, 0.03%)</title><rect x="0.9846%" y="1557" width="0.0252%" height="15" fill="rgb(245,182,24)" fg:x="78" fg:w="2"/><text x="1.2346%" y="1567.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (1 samples, 0.01%)</title><rect x="1.0098%" y="1557" width="0.0126%" height="15" fill="rgb(242,14,37)" fg:x="80" fg:w="1"/><text x="1.2598%" y="1567.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (1 samples, 0.01%)</title><rect x="1.0225%" y="1557" width="0.0126%" height="15" fill="rgb(246,228,12)" fg:x="81" fg:w="1"/><text x="1.2725%" y="1567.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="1.0351%" y="1557" width="0.0379%" height="15" fill="rgb(213,55,15)" fg:x="82" fg:w="3"/><text x="1.2851%" y="1567.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.01%)</title><rect x="1.0730%" y="1557" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="85" fg:w="1"/><text x="1.3230%" y="1567.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.01%)</title><rect x="1.0856%" y="1557" width="0.0126%" height="15" fill="rgb(230,59,30)" fg:x="86" fg:w="1"/><text x="1.3356%" y="1567.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.01%)</title><rect x="1.0982%" y="1557" width="0.0126%" height="15" fill="rgb(209,121,21)" fg:x="87" fg:w="1"/><text x="1.3482%" y="1567.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.01%)</title><rect x="1.1108%" y="1557" width="0.0126%" height="15" fill="rgb(220,109,13)" fg:x="88" fg:w="1"/><text x="1.3608%" y="1567.50"></text></g><g><title>tokio::runtime::io::driver::signal::&lt;impl tokio::runtime::io::driver::Driver&gt;::consume_signal_ready (1 samples, 0.01%)</title><rect x="1.1108%" y="1541" width="0.0126%" height="15" fill="rgb(232,18,1)" fg:x="88" fg:w="1"/><text x="1.3608%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.05%)</title><rect x="1.1235%" y="1557" width="0.0505%" height="15" fill="rgb(215,41,42)" fg:x="89" fg:w="4"/><text x="1.3735%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="1.1613%" y="1541" width="0.0126%" height="15" fill="rgb(224,123,36)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.01%)</title><rect x="1.1613%" y="1525" width="0.0126%" height="15" fill="rgb(240,125,3)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.01%)</title><rect x="1.1613%" y="1509" width="0.0126%" height="15" fill="rgb(205,98,50)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1519.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.01%)</title><rect x="1.1613%" y="1493" width="0.0126%" height="15" fill="rgb(205,185,37)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1503.50"></text></g><g><title>std::panicking::try (1 samples, 0.01%)</title><rect x="1.1613%" y="1477" width="0.0126%" height="15" fill="rgb(238,207,15)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1487.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.01%)</title><rect x="1.1613%" y="1461" width="0.0126%" height="15" fill="rgb(213,199,42)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1471.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="1.1613%" y="1445" width="0.0126%" height="15" fill="rgb(235,201,11)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1429" width="0.0126%" height="15" fill="rgb(207,46,11)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="1.1613%" y="1413" width="0.0126%" height="15" fill="rgb(241,35,35)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1423.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.01%)</title><rect x="1.1613%" y="1397" width="0.0126%" height="15" fill="rgb(243,32,47)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1407.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1381" width="0.0126%" height="15" fill="rgb(247,202,23)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1391.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="1.1613%" y="1365" width="0.0126%" height="15" fill="rgb(219,102,11)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1375.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1349" width="0.0126%" height="15" fill="rgb(243,110,44)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1359.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.01%)</title><rect x="1.1613%" y="1333" width="0.0126%" height="15" fill="rgb(222,74,54)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1343.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.01%)</title><rect x="1.1613%" y="1317" width="0.0126%" height="15" fill="rgb(216,99,12)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1327.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1301" width="0.0126%" height="15" fill="rgb(226,22,26)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1311.50"></text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 0.01%)</title><rect x="1.1613%" y="1285" width="0.0126%" height="15" fill="rgb(217,163,10)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="1.1613%" y="1269" width="0.0126%" height="15" fill="rgb(213,25,53)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="1.1613%" y="1253" width="0.0126%" height="15" fill="rgb(252,105,26)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1263.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1237" width="0.0126%" height="15" fill="rgb(220,39,43)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1247.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="1.1613%" y="1221" width="0.0126%" height="15" fill="rgb(229,68,48)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1231.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="1.1613%" y="1205" width="0.0126%" height="15" fill="rgb(252,8,32)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 0.01%)</title><rect x="1.1613%" y="1189" width="0.0126%" height="15" fill="rgb(223,20,43)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (1 samples, 0.01%)</title><rect x="1.1613%" y="1173" width="0.0126%" height="15" fill="rgb(229,81,49)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.01%)</title><rect x="1.1613%" y="1157" width="0.0126%" height="15" fill="rgb(236,28,36)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.01%)</title><rect x="1.1613%" y="1141" width="0.0126%" height="15" fill="rgb(249,185,26)" fg:x="92" fg:w="1"/><text x="1.4113%" y="1151.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (2 samples, 0.03%)</title><rect x="1.1739%" y="1557" width="0.0252%" height="15" fill="rgb(249,174,33)" fg:x="93" fg:w="2"/><text x="1.4239%" y="1567.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.08%)</title><rect x="1.1992%" y="1557" width="0.0757%" height="15" fill="rgb(233,201,37)" fg:x="95" fg:w="6"/><text x="1.4492%" y="1567.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (1 samples, 0.01%)</title><rect x="1.2749%" y="1557" width="0.0126%" height="15" fill="rgb(221,78,26)" fg:x="101" fg:w="1"/><text x="1.5249%" y="1567.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (2 samples, 0.03%)</title><rect x="1.2876%" y="1557" width="0.0252%" height="15" fill="rgb(250,127,30)" fg:x="102" fg:w="2"/><text x="1.5376%" y="1567.50"></text></g><g><title>[[heap]] (61 samples, 0.77%)</title><rect x="0.5807%" y="1573" width="0.7700%" height="15" fill="rgb(230,49,44)" fg:x="46" fg:w="61"/><text x="0.8307%" y="1583.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (3 samples, 0.04%)</title><rect x="1.3128%" y="1557" width="0.0379%" height="15" fill="rgb(229,67,23)" fg:x="104" fg:w="3"/><text x="1.5628%" y="1567.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (4 samples, 0.05%)</title><rect x="1.3507%" y="1557" width="0.0505%" height="15" fill="rgb(249,83,47)" fg:x="107" fg:w="4"/><text x="1.6007%" y="1567.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.01%)</title><rect x="1.3885%" y="1541" width="0.0126%" height="15" fill="rgb(215,43,3)" fg:x="110" fg:w="1"/><text x="1.6385%" y="1551.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (1 samples, 0.01%)</title><rect x="1.4012%" y="1557" width="0.0126%" height="15" fill="rgb(238,154,13)" fg:x="111" fg:w="1"/><text x="1.6512%" y="1567.50"></text></g><g><title>[libc.so.6] (15 samples, 0.19%)</title><rect x="1.4138%" y="1557" width="0.1893%" height="15" fill="rgb(219,56,2)" fg:x="112" fg:w="15"/><text x="1.6638%" y="1567.50"></text></g><g><title>__floattidf (1 samples, 0.01%)</title><rect x="1.6031%" y="1557" width="0.0126%" height="15" fill="rgb(233,0,4)" fg:x="127" fg:w="1"/><text x="1.8531%" y="1567.50"></text></g><g><title>__lll_lock_wake_private (4 samples, 0.05%)</title><rect x="1.6158%" y="1557" width="0.0505%" height="15" fill="rgb(235,30,7)" fg:x="128" fg:w="4"/><text x="1.8658%" y="1567.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.04%)</title><rect x="1.6662%" y="1557" width="0.0379%" height="15" fill="rgb(250,79,13)" fg:x="132" fg:w="3"/><text x="1.9162%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.05%)</title><rect x="1.7546%" y="1541" width="0.0505%" height="15" fill="rgb(211,146,34)" fg:x="139" fg:w="4"/><text x="2.0046%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.05%)</title><rect x="1.7546%" y="1525" width="0.0505%" height="15" fill="rgb(228,22,38)" fg:x="139" fg:w="4"/><text x="2.0046%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.05%)</title><rect x="1.7546%" y="1509" width="0.0505%" height="15" fill="rgb(235,168,5)" fg:x="139" fg:w="4"/><text x="2.0046%" y="1519.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="1.7546%" y="1493" width="0.0505%" height="15" fill="rgb(221,155,16)" fg:x="139" fg:w="4"/><text x="2.0046%" y="1503.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (10 samples, 0.13%)</title><rect x="1.7041%" y="1557" width="0.1262%" height="15" fill="rgb(215,215,53)" fg:x="135" fg:w="10"/><text x="1.9541%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="1.8051%" y="1541" width="0.0252%" height="15" fill="rgb(223,4,10)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="1.8051%" y="1525" width="0.0252%" height="15" fill="rgb(234,103,6)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="1.8051%" y="1509" width="0.0252%" height="15" fill="rgb(227,97,0)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="1.8051%" y="1493" width="0.0252%" height="15" fill="rgb(234,150,53)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.03%)</title><rect x="1.8051%" y="1477" width="0.0252%" height="15" fill="rgb(228,201,54)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="1.8051%" y="1461" width="0.0252%" height="15" fill="rgb(222,22,37)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1471.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="1.8051%" y="1445" width="0.0252%" height="15" fill="rgb(237,53,32)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1455.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="1.8051%" y="1429" width="0.0252%" height="15" fill="rgb(233,25,53)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1439.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="1.8051%" y="1413" width="0.0252%" height="15" fill="rgb(210,40,34)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1423.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="1.8051%" y="1397" width="0.0252%" height="15" fill="rgb(241,220,44)" fg:x="143" fg:w="2"/><text x="2.0551%" y="1407.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (8 samples, 0.10%)</title><rect x="1.8303%" y="1541" width="0.1010%" height="15" fill="rgb(235,28,35)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1551.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (8 samples, 0.10%)</title><rect x="1.8303%" y="1525" width="0.1010%" height="15" fill="rgb(210,56,17)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1535.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 0.10%)</title><rect x="1.8303%" y="1509" width="0.1010%" height="15" fill="rgb(224,130,29)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1519.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.10%)</title><rect x="1.8303%" y="1493" width="0.1010%" height="15" fill="rgb(235,212,8)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.10%)</title><rect x="1.8303%" y="1477" width="0.1010%" height="15" fill="rgb(223,33,50)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.10%)</title><rect x="1.8303%" y="1461" width="0.1010%" height="15" fill="rgb(219,149,13)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.10%)</title><rect x="1.8303%" y="1445" width="0.1010%" height="15" fill="rgb(250,156,29)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1455.50"></text></g><g><title>__rdl_alloc (8 samples, 0.10%)</title><rect x="1.8303%" y="1429" width="0.1010%" height="15" fill="rgb(216,193,19)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1439.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.10%)</title><rect x="1.8303%" y="1413" width="0.1010%" height="15" fill="rgb(216,135,14)" fg:x="145" fg:w="8"/><text x="2.0803%" y="1423.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (14 samples, 0.18%)</title><rect x="1.8303%" y="1557" width="0.1767%" height="15" fill="rgb(241,47,5)" fg:x="145" fg:w="14"/><text x="2.0803%" y="1567.50"></text></g><g><title>core::fmt::Arguments::new_v1 (6 samples, 0.08%)</title><rect x="1.9313%" y="1541" width="0.0757%" height="15" fill="rgb(233,42,35)" fg:x="153" fg:w="6"/><text x="2.1813%" y="1551.50"></text></g><g><title>cfree (3 samples, 0.04%)</title><rect x="2.0071%" y="1557" width="0.0379%" height="15" fill="rgb(231,13,6)" fg:x="159" fg:w="3"/><text x="2.2571%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::read_frame&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}::{{closure}},wisp_mux::WispError,wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (2 samples, 0.03%)</title><rect x="2.0449%" y="1557" width="0.0252%" height="15" fill="rgb(207,181,40)" fg:x="162" fg:w="2"/><text x="2.2949%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="2.0702%" y="1557" width="0.0126%" height="15" fill="rgb(254,173,49)" fg:x="164" fg:w="1"/><text x="2.3202%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_split::{{closure}}&gt; (17 samples, 0.21%)</title><rect x="2.0828%" y="1557" width="0.2146%" height="15" fill="rgb(221,1,38)" fg:x="165" fg:w="17"/><text x="2.3328%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;::wisp_write_split::{{closure}}&gt; (9 samples, 0.11%)</title><rect x="2.2974%" y="1557" width="0.1136%" height="15" fill="rgb(206,124,46)" fg:x="182" fg:w="9"/><text x="2.5474%" y="1567.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (1 samples, 0.01%)</title><rect x="2.4110%" y="1557" width="0.0126%" height="15" fill="rgb(249,21,11)" fg:x="191" fg:w="1"/><text x="2.6610%" y="1567.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (1 samples, 0.01%)</title><rect x="2.4110%" y="1541" width="0.0126%" height="15" fill="rgb(222,201,40)" fg:x="191" fg:w="1"/><text x="2.6610%" y="1551.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.01%)</title><rect x="2.4110%" y="1525" width="0.0126%" height="15" fill="rgb(235,61,29)" fg:x="191" fg:w="1"/><text x="2.6610%" y="1535.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="2.4110%" y="1509" width="0.0126%" height="15" fill="rgb(219,207,3)" fg:x="191" fg:w="1"/><text x="2.6610%" y="1519.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::notify (1 samples, 0.01%)</title><rect x="2.4236%" y="1557" width="0.0126%" height="15" fill="rgb(222,56,46)" fg:x="192" fg:w="1"/><text x="2.6736%" y="1567.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (2 samples, 0.03%)</title><rect x="2.4363%" y="1557" width="0.0252%" height="15" fill="rgb(239,76,54)" fg:x="193" fg:w="2"/><text x="2.6863%" y="1567.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.03%)</title><rect x="2.4363%" y="1541" width="0.0252%" height="15" fill="rgb(231,124,27)" fg:x="193" fg:w="2"/><text x="2.6863%" y="1551.50"></text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (5 samples, 0.06%)</title><rect x="2.4615%" y="1557" width="0.0631%" height="15" fill="rgb(249,195,6)" fg:x="195" fg:w="5"/><text x="2.7115%" y="1567.50"></text></g><g><title>fastwebsockets::ReadHalf::parse_frame_header::_{{closure}} (1 samples, 0.01%)</title><rect x="2.5120%" y="1541" width="0.0126%" height="15" fill="rgb(237,174,47)" fg:x="199" fg:w="1"/><text x="2.7620%" y="1551.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (5 samples, 0.06%)</title><rect x="2.5246%" y="1557" width="0.0631%" height="15" fill="rgb(206,201,31)" fg:x="200" fg:w="5"/><text x="2.7746%" y="1567.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (1 samples, 0.01%)</title><rect x="2.5877%" y="1557" width="0.0126%" height="15" fill="rgb(231,57,52)" fg:x="205" fg:w="1"/><text x="2.8377%" y="1567.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="2.6004%" y="1557" width="0.0126%" height="15" fill="rgb(248,177,22)" fg:x="206" fg:w="1"/><text x="2.8504%" y="1567.50"></text></g><g><title>pow (2 samples, 0.03%)</title><rect x="2.6130%" y="1557" width="0.0252%" height="15" fill="rgb(215,211,37)" fg:x="207" fg:w="2"/><text x="2.8630%" y="1567.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.01%)</title><rect x="2.6382%" y="1557" width="0.0126%" height="15" fill="rgb(241,128,51)" fg:x="209" fg:w="1"/><text x="2.8882%" y="1567.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.03%)</title><rect x="2.6508%" y="1557" width="0.0252%" height="15" fill="rgb(227,165,31)" fg:x="210" fg:w="2"/><text x="2.9008%" y="1567.50"></text></g><g><title>syscall (10 samples, 0.13%)</title><rect x="2.6761%" y="1557" width="0.1262%" height="15" fill="rgb(228,167,24)" fg:x="212" fg:w="10"/><text x="2.9261%" y="1567.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (7 samples, 0.09%)</title><rect x="2.8023%" y="1557" width="0.0884%" height="15" fill="rgb(228,143,12)" fg:x="222" fg:w="7"/><text x="3.0523%" y="1567.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 0.04%)</title><rect x="2.8528%" y="1541" width="0.0379%" height="15" fill="rgb(249,149,8)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1551.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.04%)</title><rect x="2.8528%" y="1525" width="0.0379%" height="15" fill="rgb(243,35,44)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1535.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.04%)</title><rect x="2.8528%" y="1509" width="0.0379%" height="15" fill="rgb(246,89,9)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1519.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (3 samples, 0.04%)</title><rect x="2.8528%" y="1493" width="0.0379%" height="15" fill="rgb(233,213,13)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1503.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (3 samples, 0.04%)</title><rect x="2.8528%" y="1477" width="0.0379%" height="15" fill="rgb(233,141,41)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1487.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.04%)</title><rect x="2.8528%" y="1461" width="0.0379%" height="15" fill="rgb(239,167,4)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1471.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.04%)</title><rect x="2.8528%" y="1445" width="0.0379%" height="15" fill="rgb(209,217,16)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1455.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (3 samples, 0.04%)</title><rect x="2.8528%" y="1429" width="0.0379%" height="15" fill="rgb(219,88,35)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1439.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (3 samples, 0.04%)</title><rect x="2.8528%" y="1413" width="0.0379%" height="15" fill="rgb(220,193,23)" fg:x="226" fg:w="3"/><text x="3.1028%" y="1423.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (7 samples, 0.09%)</title><rect x="2.8907%" y="1557" width="0.0884%" height="15" fill="rgb(230,90,52)" fg:x="229" fg:w="7"/><text x="3.1407%" y="1567.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.01%)</title><rect x="2.9790%" y="1557" width="0.0126%" height="15" fill="rgb(252,106,19)" fg:x="236" fg:w="1"/><text x="3.2290%" y="1567.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.08%)</title><rect x="2.9917%" y="1557" width="0.0757%" height="15" fill="rgb(206,74,20)" fg:x="237" fg:w="6"/><text x="3.2417%" y="1567.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.01%)</title><rect x="3.0548%" y="1541" width="0.0126%" height="15" fill="rgb(230,138,44)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1551.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.01%)</title><rect x="3.0548%" y="1525" width="0.0126%" height="15" fill="rgb(235,182,43)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="3.0548%" y="1509" width="0.0126%" height="15" fill="rgb(242,16,51)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1519.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.01%)</title><rect x="3.0548%" y="1493" width="0.0126%" height="15" fill="rgb(248,9,4)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1503.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (1 samples, 0.01%)</title><rect x="3.0548%" y="1477" width="0.0126%" height="15" fill="rgb(210,31,22)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1487.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.01%)</title><rect x="3.0548%" y="1461" width="0.0126%" height="15" fill="rgb(239,54,39)" fg:x="242" fg:w="1"/><text x="3.3048%" y="1471.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (1 samples, 0.01%)</title><rect x="3.0674%" y="1557" width="0.0126%" height="15" fill="rgb(230,99,41)" fg:x="243" fg:w="1"/><text x="3.3174%" y="1567.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.01%)</title><rect x="3.0800%" y="1557" width="0.0126%" height="15" fill="rgb(253,106,12)" fg:x="244" fg:w="1"/><text x="3.3300%" y="1567.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 0.04%)</title><rect x="3.0927%" y="1557" width="0.0379%" height="15" fill="rgb(213,46,41)" fg:x="245" fg:w="3"/><text x="3.3427%" y="1567.50"></text></g><g><title>tokio::runtime::coop::budget (2 samples, 0.03%)</title><rect x="3.1053%" y="1541" width="0.0252%" height="15" fill="rgb(215,133,35)" fg:x="246" fg:w="2"/><text x="3.3553%" y="1551.50"></text></g><g><title>tokio::runtime::coop::with_budget (2 samples, 0.03%)</title><rect x="3.1053%" y="1525" width="0.0252%" height="15" fill="rgb(213,28,5)" fg:x="246" fg:w="2"/><text x="3.3553%" y="1535.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (2 samples, 0.03%)</title><rect x="3.1053%" y="1509" width="0.0252%" height="15" fill="rgb(215,77,49)" fg:x="246" fg:w="2"/><text x="3.3553%" y="1519.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (2 samples, 0.03%)</title><rect x="3.1053%" y="1493" width="0.0252%" height="15" fill="rgb(248,100,22)" fg:x="246" fg:w="2"/><text x="3.3553%" y="1503.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.03%)</title><rect x="3.1053%" y="1477" width="0.0252%" height="15" fill="rgb(208,67,9)" fg:x="246" fg:w="2"/><text x="3.3553%" y="1487.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (1 samples, 0.01%)</title><rect x="3.1305%" y="1557" width="0.0126%" height="15" fill="rgb(219,133,21)" fg:x="248" fg:w="1"/><text x="3.3805%" y="1567.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.01%)</title><rect x="3.1431%" y="1557" width="0.0126%" height="15" fill="rgb(246,46,29)" fg:x="249" fg:w="1"/><text x="3.3931%" y="1567.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="3.1558%" y="1557" width="0.0126%" height="15" fill="rgb(246,185,52)" fg:x="250" fg:w="1"/><text x="3.4058%" y="1567.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.03%)</title><rect x="3.1684%" y="1557" width="0.0252%" height="15" fill="rgb(252,136,11)" fg:x="251" fg:w="2"/><text x="3.4184%" y="1567.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="3.1936%" y="1557" width="0.0126%" height="15" fill="rgb(219,138,53)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.01%)</title><rect x="3.1936%" y="1541" width="0.0126%" height="15" fill="rgb(211,51,23)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1551.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="3.1936%" y="1525" width="0.0126%" height="15" fill="rgb(247,221,28)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1535.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.01%)</title><rect x="3.1936%" y="1509" width="0.0126%" height="15" fill="rgb(251,222,45)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1519.50"></text></g><g><title>tokio::runtime::task::state::State::load (1 samples, 0.01%)</title><rect x="3.1936%" y="1493" width="0.0126%" height="15" fill="rgb(217,162,53)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1503.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="3.1936%" y="1477" width="0.0126%" height="15" fill="rgb(229,93,14)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1487.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="3.1936%" y="1461" width="0.0126%" height="15" fill="rgb(209,67,49)" fg:x="253" fg:w="1"/><text x="3.4436%" y="1471.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (13 samples, 0.16%)</title><rect x="3.2063%" y="1557" width="0.1641%" height="15" fill="rgb(213,87,29)" fg:x="254" fg:w="13"/><text x="3.4563%" y="1567.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (1 samples, 0.01%)</title><rect x="3.3577%" y="1541" width="0.0126%" height="15" fill="rgb(205,151,52)" fg:x="266" fg:w="1"/><text x="3.6077%" y="1551.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (1 samples, 0.01%)</title><rect x="3.3577%" y="1525" width="0.0126%" height="15" fill="rgb(253,215,39)" fg:x="266" fg:w="1"/><text x="3.6077%" y="1535.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.05%)</title><rect x="3.3704%" y="1557" width="0.0505%" height="15" fill="rgb(221,220,41)" fg:x="267" fg:w="4"/><text x="3.6204%" y="1567.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (1 samples, 0.01%)</title><rect x="3.4082%" y="1541" width="0.0126%" height="15" fill="rgb(218,133,21)" fg:x="270" fg:w="1"/><text x="3.6582%" y="1551.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="3.4082%" y="1525" width="0.0126%" height="15" fill="rgb(221,193,43)" fg:x="270" fg:w="1"/><text x="3.6582%" y="1535.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (1 samples, 0.01%)</title><rect x="3.4209%" y="1557" width="0.0126%" height="15" fill="rgb(240,128,52)" fg:x="271" fg:w="1"/><text x="3.6709%" y="1567.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::into_future::_{{closure}} (2 samples, 0.03%)</title><rect x="3.4335%" y="1557" width="0.0252%" height="15" fill="rgb(253,114,12)" fg:x="272" fg:w="2"/><text x="3.6835%" y="1567.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}} (2 samples, 0.03%)</title><rect x="3.4335%" y="1541" width="0.0252%" height="15" fill="rgb(215,223,47)" fg:x="272" fg:w="2"/><text x="3.6835%" y="1551.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::process_wisp_message::_{{closure}} (2 samples, 0.03%)</title><rect x="3.4335%" y="1525" width="0.0252%" height="15" fill="rgb(248,225,23)" fg:x="272" fg:w="2"/><text x="3.6835%" y="1535.50"></text></g><g><title>wisp_mux::packet::Packet::maybe_handle_extension::_{{closure}} (2 samples, 0.03%)</title><rect x="3.4335%" y="1509" width="0.0252%" height="15" fill="rgb(250,108,0)" fg:x="272" fg:w="2"/><text x="3.6835%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.03%)</title><rect x="3.4335%" y="1493" width="0.0252%" height="15" fill="rgb(228,208,7)" fg:x="272" fg:w="2"/><text x="3.6835%" y="1503.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}}::_{{closure}} (2 samples, 0.03%)</title><rect x="3.4587%" y="1557" width="0.0252%" height="15" fill="rgb(244,45,10)" fg:x="274" fg:w="2"/><text x="3.7087%" y="1567.50"></text></g><g><title>[anon] (179 samples, 2.26%)</title><rect x="1.3507%" y="1573" width="2.2595%" height="15" fill="rgb(207,125,25)" fg:x="107" fg:w="179"/><text x="1.6007%" y="1583.50">[..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (10 samples, 0.13%)</title><rect x="3.4840%" y="1557" width="0.1262%" height="15" fill="rgb(210,195,18)" fg:x="276" fg:w="10"/><text x="3.7340%" y="1567.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.6228%" y="1541" width="0.0126%" height="15" fill="rgb(249,80,12)" fg:x="287" fg:w="1"/><text x="3.8728%" y="1551.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.6228%" y="1525" width="0.0126%" height="15" fill="rgb(221,65,9)" fg:x="287" fg:w="1"/><text x="3.8728%" y="1535.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="3.6354%" y="1333" width="0.0126%" height="15" fill="rgb(235,49,36)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (1 samples, 0.01%)</title><rect x="3.6354%" y="1317" width="0.0126%" height="15" fill="rgb(225,32,20)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (1 samples, 0.01%)</title><rect x="3.6354%" y="1301" width="0.0126%" height="15" fill="rgb(215,141,46)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1311.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="3.6354%" y="1285" width="0.0126%" height="15" fill="rgb(250,160,47)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1295.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.01%)</title><rect x="3.6354%" y="1269" width="0.0126%" height="15" fill="rgb(216,222,40)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1279.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.01%)</title><rect x="3.6354%" y="1253" width="0.0126%" height="15" fill="rgb(234,217,39)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1263.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (1 samples, 0.01%)</title><rect x="3.6354%" y="1237" width="0.0126%" height="15" fill="rgb(207,178,40)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="3.6354%" y="1221" width="0.0126%" height="15" fill="rgb(221,136,13)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1231.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="3.6354%" y="1205" width="0.0126%" height="15" fill="rgb(249,199,10)" fg:x="288" fg:w="1"/><text x="3.8854%" y="1215.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (3 samples, 0.04%)</title><rect x="3.6481%" y="1221" width="0.0379%" height="15" fill="rgb(249,222,13)" fg:x="289" fg:w="3"/><text x="3.8981%" y="1231.50"></text></g><g><title>syscall (3 samples, 0.04%)</title><rect x="3.6481%" y="1205" width="0.0379%" height="15" fill="rgb(244,185,38)" fg:x="289" fg:w="3"/><text x="3.8981%" y="1215.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait_timeout (4 samples, 0.05%)</title><rect x="3.6481%" y="1333" width="0.0505%" height="15" fill="rgb(236,202,9)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1343.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_for (4 samples, 0.05%)</title><rect x="3.6481%" y="1317" width="0.0505%" height="15" fill="rgb(250,229,37)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1327.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.05%)</title><rect x="3.6481%" y="1301" width="0.0505%" height="15" fill="rgb(206,174,23)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1311.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.05%)</title><rect x="3.6481%" y="1285" width="0.0505%" height="15" fill="rgb(211,33,43)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1295.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.05%)</title><rect x="3.6481%" y="1269" width="0.0505%" height="15" fill="rgb(245,58,50)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1279.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (4 samples, 0.05%)</title><rect x="3.6481%" y="1253" width="0.0505%" height="15" fill="rgb(244,68,36)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1263.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (4 samples, 0.05%)</title><rect x="3.6481%" y="1237" width="0.0505%" height="15" fill="rgb(232,229,15)" fg:x="289" fg:w="4"/><text x="3.8981%" y="1247.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.01%)</title><rect x="3.6859%" y="1221" width="0.0126%" height="15" fill="rgb(254,30,23)" fg:x="292" fg:w="1"/><text x="3.9359%" y="1231.50"></text></g><g><title>clock_gettime (1 samples, 0.01%)</title><rect x="3.6859%" y="1205" width="0.0126%" height="15" fill="rgb(235,160,14)" fg:x="292" fg:w="1"/><text x="3.9359%" y="1215.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="3.6859%" y="1189" width="0.0126%" height="15" fill="rgb(212,155,44)" fg:x="292" fg:w="1"/><text x="3.9359%" y="1199.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.05%)</title><rect x="3.7238%" y="1269" width="0.0505%" height="15" fill="rgb(226,2,50)" fg:x="295" fg:w="4"/><text x="3.9738%" y="1279.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.05%)</title><rect x="3.7238%" y="1253" width="0.0505%" height="15" fill="rgb(234,177,6)" fg:x="295" fg:w="4"/><text x="3.9738%" y="1263.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (4 samples, 0.05%)</title><rect x="3.7238%" y="1237" width="0.0505%" height="15" fill="rgb(217,24,9)" fg:x="295" fg:w="4"/><text x="3.9738%" y="1247.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.03%)</title><rect x="3.7491%" y="1221" width="0.0252%" height="15" fill="rgb(220,13,46)" fg:x="297" fg:w="2"/><text x="3.9991%" y="1231.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (7 samples, 0.09%)</title><rect x="3.6986%" y="1333" width="0.0884%" height="15" fill="rgb(239,221,27)" fg:x="293" fg:w="7"/><text x="3.9486%" y="1343.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (7 samples, 0.09%)</title><rect x="3.6986%" y="1317" width="0.0884%" height="15" fill="rgb(222,198,25)" fg:x="293" fg:w="7"/><text x="3.9486%" y="1327.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (7 samples, 0.09%)</title><rect x="3.6986%" y="1301" width="0.0884%" height="15" fill="rgb(211,99,13)" fg:x="293" fg:w="7"/><text x="3.9486%" y="1311.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.09%)</title><rect x="3.6986%" y="1285" width="0.0884%" height="15" fill="rgb(232,111,31)" fg:x="293" fg:w="7"/><text x="3.9486%" y="1295.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.01%)</title><rect x="3.7743%" y="1269" width="0.0126%" height="15" fill="rgb(245,82,37)" fg:x="299" fg:w="1"/><text x="4.0243%" y="1279.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.01%)</title><rect x="3.7743%" y="1253" width="0.0126%" height="15" fill="rgb(227,149,46)" fg:x="299" fg:w="1"/><text x="4.0243%" y="1263.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="3.7743%" y="1237" width="0.0126%" height="15" fill="rgb(218,36,50)" fg:x="299" fg:w="1"/><text x="4.0243%" y="1247.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="3.7743%" y="1221" width="0.0126%" height="15" fill="rgb(226,80,48)" fg:x="299" fg:w="1"/><text x="4.0243%" y="1231.50"></text></g><g><title>tokio::net::addr::_&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for str&gt;::to_socket_addrs::_{{closure}} (1 samples, 0.01%)</title><rect x="3.7869%" y="1077" width="0.0126%" height="15" fill="rgb(238,224,15)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1087.50"></text></g><g><title>&lt;alloc::string::String as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.01%)</title><rect x="3.7869%" y="1061" width="0.0126%" height="15" fill="rgb(241,136,10)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1071.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.01%)</title><rect x="3.7869%" y="1045" width="0.0126%" height="15" fill="rgb(208,32,45)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1055.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.01%)</title><rect x="3.7869%" y="1029" width="0.0126%" height="15" fill="rgb(207,135,9)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1039.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (1 samples, 0.01%)</title><rect x="3.7869%" y="1013" width="0.0126%" height="15" fill="rgb(206,86,44)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1023.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.01%)</title><rect x="3.7869%" y="997" width="0.0126%" height="15" fill="rgb(245,177,15)" fg:x="300" fg:w="1"/><text x="4.0369%" y="1007.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (1 samples, 0.01%)</title><rect x="3.7869%" y="981" width="0.0126%" height="15" fill="rgb(206,64,50)" fg:x="300" fg:w="1"/><text x="4.0369%" y="991.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1 samples, 0.01%)</title><rect x="3.7869%" y="965" width="0.0126%" height="15" fill="rgb(234,36,40)" fg:x="300" fg:w="1"/><text x="4.0369%" y="975.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1 samples, 0.01%)</title><rect x="3.7869%" y="949" width="0.0126%" height="15" fill="rgb(213,64,8)" fg:x="300" fg:w="1"/><text x="4.0369%" y="959.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (1 samples, 0.01%)</title><rect x="3.7869%" y="933" width="0.0126%" height="15" fill="rgb(210,75,36)" fg:x="300" fg:w="1"/><text x="4.0369%" y="943.50"></text></g><g><title>getaddrinfo (1 samples, 0.01%)</title><rect x="3.7869%" y="917" width="0.0126%" height="15" fill="rgb(229,88,21)" fg:x="300" fg:w="1"/><text x="4.0369%" y="927.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.7869%" y="901" width="0.0126%" height="15" fill="rgb(252,204,47)" fg:x="300" fg:w="1"/><text x="4.0369%" y="911.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.7869%" y="885" width="0.0126%" height="15" fill="rgb(208,77,27)" fg:x="300" fg:w="1"/><text x="4.0369%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.7869%" y="869" width="0.0126%" height="15" fill="rgb(221,76,26)" fg:x="300" fg:w="1"/><text x="4.0369%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.7869%" y="853" width="0.0126%" height="15" fill="rgb(225,139,18)" fg:x="300" fg:w="1"/><text x="4.0369%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="837" width="0.0126%" height="15" fill="rgb(230,137,11)" fg:x="300" fg:w="1"/><text x="4.0369%" y="847.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="3.7869%" y="821" width="0.0126%" height="15" fill="rgb(212,28,1)" fg:x="300" fg:w="1"/><text x="4.0369%" y="831.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.7869%" y="805" width="0.0126%" height="15" fill="rgb(248,164,17)" fg:x="300" fg:w="1"/><text x="4.0369%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="789" width="0.0126%" height="15" fill="rgb(222,171,42)" fg:x="300" fg:w="1"/><text x="4.0369%" y="799.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="3.7869%" y="773" width="0.0126%" height="15" fill="rgb(243,84,45)" fg:x="300" fg:w="1"/><text x="4.0369%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="757" width="0.0126%" height="15" fill="rgb(252,49,23)" fg:x="300" fg:w="1"/><text x="4.0369%" y="767.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="3.7869%" y="741" width="0.0126%" height="15" fill="rgb(215,19,7)" fg:x="300" fg:w="1"/><text x="4.0369%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="725" width="0.0126%" height="15" fill="rgb(238,81,41)" fg:x="300" fg:w="1"/><text x="4.0369%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="709" width="0.0126%" height="15" fill="rgb(210,199,37)" fg:x="300" fg:w="1"/><text x="4.0369%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="3.7869%" y="693" width="0.0126%" height="15" fill="rgb(244,192,49)" fg:x="300" fg:w="1"/><text x="4.0369%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.04%)</title><rect x="3.7995%" y="901" width="0.0379%" height="15" fill="rgb(226,211,11)" fg:x="301" fg:w="3"/><text x="4.0495%" y="911.50"></text></g><g><title>__floattidf (1 samples, 0.01%)</title><rect x="3.8374%" y="885" width="0.0126%" height="15" fill="rgb(236,162,54)" fg:x="304" fg:w="1"/><text x="4.0874%" y="895.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (1 samples, 0.01%)</title><rect x="3.8374%" y="869" width="0.0126%" height="15" fill="rgb(220,229,9)" fg:x="304" fg:w="1"/><text x="4.0874%" y="879.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (1 samples, 0.01%)</title><rect x="3.8374%" y="853" width="0.0126%" height="15" fill="rgb(250,87,22)" fg:x="304" fg:w="1"/><text x="4.0874%" y="863.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.01%)</title><rect x="3.8374%" y="837" width="0.0126%" height="15" fill="rgb(239,43,17)" fg:x="304" fg:w="1"/><text x="4.0874%" y="847.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.01%)</title><rect x="3.8374%" y="821" width="0.0126%" height="15" fill="rgb(231,177,25)" fg:x="304" fg:w="1"/><text x="4.0874%" y="831.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (15 samples, 0.19%)</title><rect x="3.8500%" y="885" width="0.1893%" height="15" fill="rgb(219,179,1)" fg:x="305" fg:w="15"/><text x="4.1000%" y="895.50"></text></g><g><title>pow (15 samples, 0.19%)</title><rect x="3.8500%" y="869" width="0.1893%" height="15" fill="rgb(238,219,53)" fg:x="305" fg:w="15"/><text x="4.1000%" y="879.50"></text></g><g><title>[libm.so.6] (10 samples, 0.13%)</title><rect x="3.9132%" y="853" width="0.1262%" height="15" fill="rgb(232,167,36)" fg:x="310" fg:w="10"/><text x="4.1632%" y="863.50"></text></g><g><title>clock_gettime (5 samples, 0.06%)</title><rect x="4.0520%" y="869" width="0.0631%" height="15" fill="rgb(244,19,51)" fg:x="321" fg:w="5"/><text x="4.3020%" y="879.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="4.1025%" y="853" width="0.0126%" height="15" fill="rgb(224,6,22)" fg:x="325" fg:w="1"/><text x="4.3525%" y="863.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (7 samples, 0.09%)</title><rect x="4.0394%" y="885" width="0.0884%" height="15" fill="rgb(224,145,5)" fg:x="320" fg:w="7"/><text x="4.2894%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.01%)</title><rect x="4.1151%" y="869" width="0.0126%" height="15" fill="rgb(234,130,49)" fg:x="326" fg:w="1"/><text x="4.3651%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (24 samples, 0.30%)</title><rect x="3.8374%" y="901" width="0.3030%" height="15" fill="rgb(254,6,2)" fg:x="304" fg:w="24"/><text x="4.0874%" y="911.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.01%)</title><rect x="4.1277%" y="885" width="0.0126%" height="15" fill="rgb(208,96,46)" fg:x="327" fg:w="1"/><text x="4.3777%" y="895.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.01%)</title><rect x="4.1277%" y="869" width="0.0126%" height="15" fill="rgb(239,3,39)" fg:x="327" fg:w="1"/><text x="4.3777%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (17 samples, 0.21%)</title><rect x="4.1404%" y="901" width="0.2146%" height="15" fill="rgb(233,210,1)" fg:x="328" fg:w="17"/><text x="4.3904%" y="911.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (17 samples, 0.21%)</title><rect x="4.1404%" y="885" width="0.2146%" height="15" fill="rgb(244,137,37)" fg:x="328" fg:w="17"/><text x="4.3904%" y="895.50"></text></g><g><title>clock_gettime (15 samples, 0.19%)</title><rect x="4.1656%" y="869" width="0.1893%" height="15" fill="rgb(240,136,2)" fg:x="330" fg:w="15"/><text x="4.4156%" y="879.50"></text></g><g><title>__vdso_clock_gettime (11 samples, 0.14%)</title><rect x="4.2161%" y="853" width="0.1389%" height="15" fill="rgb(239,18,37)" fg:x="334" fg:w="11"/><text x="4.4661%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (2 samples, 0.03%)</title><rect x="4.4055%" y="885" width="0.0252%" height="15" fill="rgb(218,185,22)" fg:x="349" fg:w="2"/><text x="4.6555%" y="895.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.03%)</title><rect x="4.4055%" y="869" width="0.0252%" height="15" fill="rgb(225,218,4)" fg:x="349" fg:w="2"/><text x="4.6555%" y="879.50"></text></g><g><title>clock_gettime (2 samples, 0.03%)</title><rect x="4.4055%" y="853" width="0.0252%" height="15" fill="rgb(230,182,32)" fg:x="349" fg:w="2"/><text x="4.6555%" y="863.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.03%)</title><rect x="4.4055%" y="837" width="0.0252%" height="15" fill="rgb(242,56,43)" fg:x="349" fg:w="2"/><text x="4.6555%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (7 samples, 0.09%)</title><rect x="4.3550%" y="901" width="0.0884%" height="15" fill="rgb(233,99,24)" fg:x="345" fg:w="7"/><text x="4.6050%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.01%)</title><rect x="4.4307%" y="885" width="0.0126%" height="15" fill="rgb(234,209,42)" fg:x="351" fg:w="1"/><text x="4.6807%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (1 samples, 0.01%)</title><rect x="4.4307%" y="869" width="0.0126%" height="15" fill="rgb(227,7,12)" fg:x="351" fg:w="1"/><text x="4.6807%" y="879.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.01%)</title><rect x="4.4307%" y="853" width="0.0126%" height="15" fill="rgb(245,203,43)" fg:x="351" fg:w="1"/><text x="4.6807%" y="863.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (1 samples, 0.01%)</title><rect x="4.4307%" y="837" width="0.0126%" height="15" fill="rgb(238,205,33)" fg:x="351" fg:w="1"/><text x="4.6807%" y="847.50"></text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.01%)</title><rect x="4.4307%" y="821" width="0.0126%" height="15" fill="rgb(231,56,7)" fg:x="351" fg:w="1"/><text x="4.6807%" y="831.50"></text></g><g><title>tokio::time::clock::now (1 samples, 0.01%)</title><rect x="4.4307%" y="805" width="0.0126%" height="15" fill="rgb(244,186,29)" fg:x="351" fg:w="1"/><text x="4.6807%" y="815.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.01%)</title><rect x="4.4307%" y="789" width="0.0126%" height="15" fill="rgb(234,111,31)" fg:x="351" fg:w="1"/><text x="4.6807%" y="799.50"></text></g><g><title>clock_gettime (1 samples, 0.01%)</title><rect x="4.4307%" y="773" width="0.0126%" height="15" fill="rgb(241,149,10)" fg:x="351" fg:w="1"/><text x="4.6807%" y="783.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="4.4307%" y="757" width="0.0126%" height="15" fill="rgb(249,206,44)" fg:x="351" fg:w="1"/><text x="4.6807%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="4.6074%" y="885" width="0.0126%" height="15" fill="rgb(251,153,30)" fg:x="365" fg:w="1"/><text x="4.8574%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="4.6074%" y="869" width="0.0126%" height="15" fill="rgb(239,152,38)" fg:x="365" fg:w="1"/><text x="4.8574%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="4.6074%" y="853" width="0.0126%" height="15" fill="rgb(249,139,47)" fg:x="365" fg:w="1"/><text x="4.8574%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.01%)</title><rect x="4.7210%" y="869" width="0.0126%" height="15" fill="rgb(244,64,35)" fg:x="374" fg:w="1"/><text x="4.9710%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="4.7337%" y="869" width="0.0126%" height="15" fill="rgb(216,46,15)" fg:x="375" fg:w="1"/><text x="4.9837%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.01%)</title><rect x="4.7337%" y="853" width="0.0126%" height="15" fill="rgb(250,74,19)" fg:x="375" fg:w="1"/><text x="4.9837%" y="863.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.7337%" y="837" width="0.0126%" height="15" fill="rgb(249,42,33)" fg:x="375" fg:w="1"/><text x="4.9837%" y="847.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="4.7337%" y="821" width="0.0126%" height="15" fill="rgb(242,149,17)" fg:x="375" fg:w="1"/><text x="4.9837%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="4.7337%" y="805" width="0.0126%" height="15" fill="rgb(244,29,21)" fg:x="375" fg:w="1"/><text x="4.9837%" y="815.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="4.7337%" y="789" width="0.0126%" height="15" fill="rgb(220,130,37)" fg:x="375" fg:w="1"/><text x="4.9837%" y="799.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="4.7337%" y="773" width="0.0126%" height="15" fill="rgb(211,67,2)" fg:x="375" fg:w="1"/><text x="4.9837%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::wake (1 samples, 0.01%)</title><rect x="4.7463%" y="869" width="0.0126%" height="15" fill="rgb(235,68,52)" fg:x="376" fg:w="1"/><text x="4.9963%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.01%)</title><rect x="4.7463%" y="853" width="0.0126%" height="15" fill="rgb(246,142,3)" fg:x="376" fg:w="1"/><text x="4.9963%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (3 samples, 0.04%)</title><rect x="4.7589%" y="837" width="0.0379%" height="15" fill="rgb(241,25,7)" fg:x="377" fg:w="3"/><text x="5.0089%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.04%)</title><rect x="4.7589%" y="821" width="0.0379%" height="15" fill="rgb(242,119,39)" fg:x="377" fg:w="3"/><text x="5.0089%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;()&gt;&gt; (1 samples, 0.01%)</title><rect x="4.7968%" y="821" width="0.0126%" height="15" fill="rgb(241,98,45)" fg:x="380" fg:w="1"/><text x="5.0468%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (1 samples, 0.01%)</title><rect x="4.7968%" y="805" width="0.0126%" height="15" fill="rgb(254,28,30)" fg:x="380" fg:w="1"/><text x="5.0468%" y="815.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="4.7968%" y="789" width="0.0126%" height="15" fill="rgb(241,142,54)" fg:x="380" fg:w="1"/><text x="5.0468%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.01%)</title><rect x="4.7968%" y="773" width="0.0126%" height="15" fill="rgb(222,85,15)" fg:x="380" fg:w="1"/><text x="5.0468%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.01%)</title><rect x="4.7968%" y="757" width="0.0126%" height="15" fill="rgb(210,85,47)" fg:x="380" fg:w="1"/><text x="5.0468%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="4.7968%" y="741" width="0.0126%" height="15" fill="rgb(224,206,25)" fg:x="380" fg:w="1"/><text x="5.0468%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (10 samples, 0.13%)</title><rect x="4.8094%" y="821" width="0.1262%" height="15" fill="rgb(243,201,19)" fg:x="381" fg:w="10"/><text x="5.0594%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.13%)</title><rect x="4.8094%" y="805" width="0.1262%" height="15" fill="rgb(236,59,4)" fg:x="381" fg:w="10"/><text x="5.0594%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (8 samples, 0.10%)</title><rect x="4.9482%" y="773" width="0.1010%" height="15" fill="rgb(254,179,45)" fg:x="392" fg:w="8"/><text x="5.1982%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (8 samples, 0.10%)</title><rect x="4.9482%" y="757" width="0.1010%" height="15" fill="rgb(226,14,10)" fg:x="392" fg:w="8"/><text x="5.1982%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.10%)</title><rect x="4.9482%" y="741" width="0.1010%" height="15" fill="rgb(244,27,41)" fg:x="392" fg:w="8"/><text x="5.1982%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (15 samples, 0.19%)</title><rect x="5.2764%" y="709" width="0.1893%" height="15" fill="rgb(235,35,32)" fg:x="418" fg:w="15"/><text x="5.5264%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.19%)</title><rect x="5.2764%" y="693" width="0.1893%" height="15" fill="rgb(218,68,31)" fg:x="418" fg:w="15"/><text x="5.5264%" y="703.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (37 samples, 0.47%)</title><rect x="5.0997%" y="725" width="0.4671%" height="15" fill="rgb(207,120,37)" fg:x="404" fg:w="37"/><text x="5.3497%" y="735.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (8 samples, 0.10%)</title><rect x="5.4658%" y="709" width="0.1010%" height="15" fill="rgb(227,98,0)" fg:x="433" fg:w="8"/><text x="5.7158%" y="719.50"></text></g><g><title>syscall (8 samples, 0.10%)</title><rect x="5.4658%" y="693" width="0.1010%" height="15" fill="rgb(207,7,3)" fg:x="433" fg:w="8"/><text x="5.7158%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="5.5542%" y="677" width="0.0126%" height="15" fill="rgb(206,98,19)" fg:x="440" fg:w="1"/><text x="5.8042%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="5.5668%" y="725" width="0.0126%" height="15" fill="rgb(217,5,26)" fg:x="441" fg:w="1"/><text x="5.8168%" y="735.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::_{{closure}} (1 samples, 0.01%)</title><rect x="5.5668%" y="709" width="0.0126%" height="15" fill="rgb(235,190,38)" fg:x="441" fg:w="1"/><text x="5.8168%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.01%)</title><rect x="5.5668%" y="693" width="0.0126%" height="15" fill="rgb(247,86,24)" fg:x="441" fg:w="1"/><text x="5.8168%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.01%)</title><rect x="5.5668%" y="677" width="0.0126%" height="15" fill="rgb(205,101,16)" fg:x="441" fg:w="1"/><text x="5.8168%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="5.5668%" y="661" width="0.0126%" height="15" fill="rgb(246,168,33)" fg:x="441" fg:w="1"/><text x="5.8168%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (2 samples, 0.03%)</title><rect x="5.5794%" y="725" width="0.0252%" height="15" fill="rgb(231,114,1)" fg:x="442" fg:w="2"/><text x="5.8294%" y="735.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (2 samples, 0.03%)</title><rect x="5.5794%" y="709" width="0.0252%" height="15" fill="rgb(207,184,53)" fg:x="442" fg:w="2"/><text x="5.8294%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.03%)</title><rect x="5.5794%" y="693" width="0.0252%" height="15" fill="rgb(224,95,51)" fg:x="442" fg:w="2"/><text x="5.8294%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="5.5794%" y="677" width="0.0252%" height="15" fill="rgb(212,188,45)" fg:x="442" fg:w="2"/><text x="5.8294%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (65 samples, 0.82%)</title><rect x="4.7968%" y="837" width="0.8205%" height="15" fill="rgb(223,154,38)" fg:x="380" fg:w="65"/><text x="5.0468%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (54 samples, 0.68%)</title><rect x="4.9356%" y="821" width="0.6816%" height="15" fill="rgb(251,22,52)" fg:x="391" fg:w="54"/><text x="5.1856%" y="831.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (54 samples, 0.68%)</title><rect x="4.9356%" y="805" width="0.6816%" height="15" fill="rgb(229,209,22)" fg:x="391" fg:w="54"/><text x="5.1856%" y="815.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (54 samples, 0.68%)</title><rect x="4.9356%" y="789" width="0.6816%" height="15" fill="rgb(234,138,34)" fg:x="391" fg:w="54"/><text x="5.1856%" y="799.50"></text></g><g><title>parking_lot_core::parking_lot::park (45 samples, 0.57%)</title><rect x="5.0492%" y="773" width="0.5680%" height="15" fill="rgb(212,95,11)" fg:x="400" fg:w="45"/><text x="5.2992%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (45 samples, 0.57%)</title><rect x="5.0492%" y="757" width="0.5680%" height="15" fill="rgb(240,179,47)" fg:x="400" fg:w="45"/><text x="5.2992%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (41 samples, 0.52%)</title><rect x="5.0997%" y="741" width="0.5175%" height="15" fill="rgb(240,163,11)" fg:x="404" fg:w="41"/><text x="5.3497%" y="751.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (1 samples, 0.01%)</title><rect x="5.6046%" y="725" width="0.0126%" height="15" fill="rgb(236,37,12)" fg:x="444" fg:w="1"/><text x="5.8546%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="5.6046%" y="709" width="0.0126%" height="15" fill="rgb(232,164,16)" fg:x="444" fg:w="1"/><text x="5.8546%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="5.6046%" y="693" width="0.0126%" height="15" fill="rgb(244,205,15)" fg:x="444" fg:w="1"/><text x="5.8546%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.05%)</title><rect x="5.6930%" y="821" width="0.0505%" height="15" fill="rgb(223,117,47)" fg:x="451" fg:w="4"/><text x="5.9430%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.05%)</title><rect x="5.6930%" y="805" width="0.0505%" height="15" fill="rgb(244,107,35)" fg:x="451" fg:w="4"/><text x="5.9430%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (10 samples, 0.13%)</title><rect x="5.7435%" y="821" width="0.1262%" height="15" fill="rgb(205,140,8)" fg:x="455" fg:w="10"/><text x="5.9935%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_swap (10 samples, 0.13%)</title><rect x="5.7435%" y="805" width="0.1262%" height="15" fill="rgb(228,84,46)" fg:x="455" fg:w="10"/><text x="5.9935%" y="815.50"></text></g><g><title>tokio::runtime::driver::Driver::park (3 samples, 0.04%)</title><rect x="5.8697%" y="821" width="0.0379%" height="15" fill="rgb(254,188,9)" fg:x="465" fg:w="3"/><text x="6.1197%" y="831.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (3 samples, 0.04%)</title><rect x="5.8697%" y="805" width="0.0379%" height="15" fill="rgb(206,112,54)" fg:x="465" fg:w="3"/><text x="6.1197%" y="815.50"></text></g><g><title>tokio::runtime::time::Driver::park (2 samples, 0.03%)</title><rect x="5.8824%" y="789" width="0.0252%" height="15" fill="rgb(216,84,49)" fg:x="466" fg:w="2"/><text x="6.1324%" y="799.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.01%)</title><rect x="6.0465%" y="805" width="0.0126%" height="15" fill="rgb(214,194,35)" fg:x="479" fg:w="1"/><text x="6.2965%" y="815.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="6.0465%" y="789" width="0.0126%" height="15" fill="rgb(249,28,3)" fg:x="479" fg:w="1"/><text x="6.2965%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="6.0843%" y="661" width="0.0126%" height="15" fill="rgb(222,56,52)" fg:x="482" fg:w="1"/><text x="6.3343%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="6.0843%" y="645" width="0.0126%" height="15" fill="rgb(245,217,50)" fg:x="482" fg:w="1"/><text x="6.3343%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="6.0591%" y="757" width="0.0505%" height="15" fill="rgb(213,201,24)" fg:x="480" fg:w="4"/><text x="6.3091%" y="767.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="6.0591%" y="741" width="0.0505%" height="15" fill="rgb(248,116,28)" fg:x="480" fg:w="4"/><text x="6.3091%" y="751.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (4 samples, 0.05%)</title><rect x="6.0591%" y="725" width="0.0505%" height="15" fill="rgb(219,72,43)" fg:x="480" fg:w="4"/><text x="6.3091%" y="735.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (4 samples, 0.05%)</title><rect x="6.0591%" y="709" width="0.0505%" height="15" fill="rgb(209,138,14)" fg:x="480" fg:w="4"/><text x="6.3091%" y="719.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (4 samples, 0.05%)</title><rect x="6.0591%" y="693" width="0.0505%" height="15" fill="rgb(222,18,33)" fg:x="480" fg:w="4"/><text x="6.3091%" y="703.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.05%)</title><rect x="6.0591%" y="677" width="0.0505%" height="15" fill="rgb(213,199,7)" fg:x="480" fg:w="4"/><text x="6.3091%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.01%)</title><rect x="6.0969%" y="661" width="0.0126%" height="15" fill="rgb(250,110,10)" fg:x="483" fg:w="1"/><text x="6.3469%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (1 samples, 0.01%)</title><rect x="6.0969%" y="645" width="0.0126%" height="15" fill="rgb(248,123,6)" fg:x="483" fg:w="1"/><text x="6.3469%" y="655.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="6.1979%" y="709" width="0.0252%" height="15" fill="rgb(206,91,31)" fg:x="491" fg:w="2"/><text x="6.4479%" y="719.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="6.1979%" y="725" width="0.0379%" height="15" fill="rgb(211,154,13)" fg:x="491" fg:w="3"/><text x="6.4479%" y="735.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.01%)</title><rect x="6.2232%" y="709" width="0.0126%" height="15" fill="rgb(225,148,7)" fg:x="493" fg:w="1"/><text x="6.4732%" y="719.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.01%)</title><rect x="6.2232%" y="693" width="0.0126%" height="15" fill="rgb(220,160,43)" fg:x="493" fg:w="1"/><text x="6.4732%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.01%)</title><rect x="6.2232%" y="677" width="0.0126%" height="15" fill="rgb(213,52,39)" fg:x="493" fg:w="1"/><text x="6.4732%" y="687.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::get_mut (1 samples, 0.01%)</title><rect x="6.2358%" y="693" width="0.0126%" height="15" fill="rgb(243,137,7)" fg:x="494" fg:w="1"/><text x="6.4858%" y="703.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::get_mut (1 samples, 0.01%)</title><rect x="6.2358%" y="677" width="0.0126%" height="15" fill="rgb(230,79,13)" fg:x="494" fg:w="1"/><text x="6.4858%" y="687.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="6.2358%" y="661" width="0.0126%" height="15" fill="rgb(247,105,23)" fg:x="494" fg:w="1"/><text x="6.4858%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="6.6776%" y="661" width="0.0884%" height="15" fill="rgb(223,179,41)" fg:x="529" fg:w="7"/><text x="6.9276%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="6.6776%" y="645" width="0.0884%" height="15" fill="rgb(218,9,34)" fg:x="529" fg:w="7"/><text x="6.9276%" y="655.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="6.7155%" y="629" width="0.0505%" height="15" fill="rgb(222,106,8)" fg:x="532" fg:w="4"/><text x="6.9655%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (1 samples, 0.01%)</title><rect x="6.9679%" y="629" width="0.0126%" height="15" fill="rgb(211,220,0)" fg:x="552" fg:w="1"/><text x="7.2179%" y="639.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (18 samples, 0.23%)</title><rect x="6.7660%" y="661" width="0.2272%" height="15" fill="rgb(229,52,16)" fg:x="536" fg:w="18"/><text x="7.0160%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (18 samples, 0.23%)</title><rect x="6.7660%" y="645" width="0.2272%" height="15" fill="rgb(212,155,18)" fg:x="536" fg:w="18"/><text x="7.0160%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (1 samples, 0.01%)</title><rect x="6.9806%" y="629" width="0.0126%" height="15" fill="rgb(242,21,14)" fg:x="553" fg:w="1"/><text x="7.2306%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (1 samples, 0.01%)</title><rect x="6.9806%" y="613" width="0.0126%" height="15" fill="rgb(222,19,48)" fg:x="553" fg:w="1"/><text x="7.2306%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.04%)</title><rect x="6.9932%" y="645" width="0.0379%" height="15" fill="rgb(232,45,27)" fg:x="554" fg:w="3"/><text x="7.2432%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.04%)</title><rect x="6.9932%" y="629" width="0.0379%" height="15" fill="rgb(249,103,42)" fg:x="554" fg:w="3"/><text x="7.2432%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (78 samples, 0.98%)</title><rect x="6.0591%" y="805" width="0.9846%" height="15" fill="rgb(246,81,33)" fg:x="480" fg:w="78"/><text x="6.3091%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (78 samples, 0.98%)</title><rect x="6.0591%" y="789" width="0.9846%" height="15" fill="rgb(252,33,42)" fg:x="480" fg:w="78"/><text x="6.3091%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (78 samples, 0.98%)</title><rect x="6.0591%" y="773" width="0.9846%" height="15" fill="rgb(209,212,41)" fg:x="480" fg:w="78"/><text x="6.3091%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.93%)</title><rect x="6.1096%" y="757" width="0.9341%" height="15" fill="rgb(207,154,6)" fg:x="484" fg:w="74"/><text x="6.3596%" y="767.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (74 samples, 0.93%)</title><rect x="6.1096%" y="741" width="0.9341%" height="15" fill="rgb(223,64,47)" fg:x="484" fg:w="74"/><text x="6.3596%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (64 samples, 0.81%)</title><rect x="6.2358%" y="725" width="0.8079%" height="15" fill="rgb(211,161,38)" fg:x="494" fg:w="64"/><text x="6.4858%" y="735.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (64 samples, 0.81%)</title><rect x="6.2358%" y="709" width="0.8079%" height="15" fill="rgb(219,138,40)" fg:x="494" fg:w="64"/><text x="6.4858%" y="719.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (63 samples, 0.80%)</title><rect x="6.2484%" y="693" width="0.7953%" height="15" fill="rgb(241,228,46)" fg:x="495" fg:w="63"/><text x="6.4984%" y="703.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (63 samples, 0.80%)</title><rect x="6.2484%" y="677" width="0.7953%" height="15" fill="rgb(223,209,38)" fg:x="495" fg:w="63"/><text x="6.4984%" y="687.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (4 samples, 0.05%)</title><rect x="6.9932%" y="661" width="0.0505%" height="15" fill="rgb(236,164,45)" fg:x="554" fg:w="4"/><text x="7.2432%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="7.0311%" y="645" width="0.0126%" height="15" fill="rgb(231,15,5)" fg:x="557" fg:w="1"/><text x="7.2811%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;tokio::runtime::time::ShardedWheel&gt;&gt; (2 samples, 0.03%)</title><rect x="7.0437%" y="805" width="0.0252%" height="15" fill="rgb(252,35,15)" fg:x="558" fg:w="2"/><text x="7.2937%" y="815.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="7.0437%" y="789" width="0.0252%" height="15" fill="rgb(248,181,18)" fg:x="558" fg:w="2"/><text x="7.2937%" y="799.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write_unlock (2 samples, 0.03%)</title><rect x="7.0437%" y="773" width="0.0252%" height="15" fill="rgb(233,39,42)" fg:x="558" fg:w="2"/><text x="7.2937%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2 samples, 0.03%)</title><rect x="7.0437%" y="757" width="0.0252%" height="15" fill="rgb(238,110,33)" fg:x="558" fg:w="2"/><text x="7.2937%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="7.0437%" y="741" width="0.0252%" height="15" fill="rgb(233,195,10)" fg:x="558" fg:w="2"/><text x="7.2937%" y="751.50"></text></g><g><title>std::sync::rwlock::RwLockWriteGuard&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="7.0689%" y="789" width="0.0252%" height="15" fill="rgb(254,105,3)" fg:x="560" fg:w="2"/><text x="7.3189%" y="799.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.03%)</title><rect x="7.0689%" y="773" width="0.0252%" height="15" fill="rgb(221,225,9)" fg:x="560" fg:w="2"/><text x="7.3189%" y="783.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="7.0815%" y="757" width="0.0126%" height="15" fill="rgb(224,227,45)" fg:x="561" fg:w="1"/><text x="7.3315%" y="767.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="7.0815%" y="741" width="0.0126%" height="15" fill="rgb(229,198,43)" fg:x="561" fg:w="1"/><text x="7.3315%" y="751.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="7.0815%" y="725" width="0.0126%" height="15" fill="rgb(206,209,35)" fg:x="561" fg:w="1"/><text x="7.3315%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="7.0815%" y="709" width="0.0126%" height="15" fill="rgb(245,195,53)" fg:x="561" fg:w="1"/><text x="7.3315%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="7.0815%" y="693" width="0.0126%" height="15" fill="rgb(240,92,26)" fg:x="561" fg:w="1"/><text x="7.3315%" y="703.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::write (5 samples, 0.06%)</title><rect x="7.0689%" y="805" width="0.0631%" height="15" fill="rgb(207,40,23)" fg:x="560" fg:w="5"/><text x="7.3189%" y="815.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write (3 samples, 0.04%)</title><rect x="7.0942%" y="789" width="0.0379%" height="15" fill="rgb(223,111,35)" fg:x="562" fg:w="3"/><text x="7.3442%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (3 samples, 0.04%)</title><rect x="7.0942%" y="773" width="0.0379%" height="15" fill="rgb(229,147,28)" fg:x="562" fg:w="3"/><text x="7.3442%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.04%)</title><rect x="7.0942%" y="757" width="0.0379%" height="15" fill="rgb(211,29,28)" fg:x="562" fg:w="3"/><text x="7.3442%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="7.1447%" y="773" width="0.0379%" height="15" fill="rgb(228,72,33)" fg:x="566" fg:w="3"/><text x="7.3947%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="7.1447%" y="757" width="0.0379%" height="15" fill="rgb(205,214,31)" fg:x="566" fg:w="3"/><text x="7.3947%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="7.1447%" y="741" width="0.0379%" height="15" fill="rgb(224,111,15)" fg:x="566" fg:w="3"/><text x="7.3947%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.04%)</title><rect x="7.1447%" y="725" width="0.0379%" height="15" fill="rgb(253,21,26)" fg:x="566" fg:w="3"/><text x="7.3947%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.04%)</title><rect x="7.1447%" y="709" width="0.0379%" height="15" fill="rgb(245,139,43)" fg:x="566" fg:w="3"/><text x="7.3947%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.04%)</title><rect x="7.1447%" y="693" width="0.0379%" height="15" fill="rgb(252,170,7)" fg:x="566" fg:w="3"/><text x="7.3947%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="7.1825%" y="773" width="0.0505%" height="15" fill="rgb(231,118,14)" fg:x="569" fg:w="4"/><text x="7.4325%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (4 samples, 0.05%)</title><rect x="7.1825%" y="757" width="0.0505%" height="15" fill="rgb(238,83,0)" fg:x="569" fg:w="4"/><text x="7.4325%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="7.1825%" y="741" width="0.0505%" height="15" fill="rgb(221,39,39)" fg:x="569" fg:w="4"/><text x="7.4325%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (4 samples, 0.05%)</title><rect x="7.1825%" y="725" width="0.0505%" height="15" fill="rgb(222,119,46)" fg:x="569" fg:w="4"/><text x="7.4325%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (4 samples, 0.05%)</title><rect x="7.1825%" y="709" width="0.0505%" height="15" fill="rgb(222,165,49)" fg:x="569" fg:w="4"/><text x="7.4325%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.05%)</title><rect x="7.1825%" y="693" width="0.0505%" height="15" fill="rgb(219,113,52)" fg:x="569" fg:w="4"/><text x="7.4325%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.06%)</title><rect x="7.2330%" y="773" width="0.0631%" height="15" fill="rgb(214,7,15)" fg:x="573" fg:w="5"/><text x="7.4830%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.06%)</title><rect x="7.2330%" y="757" width="0.0631%" height="15" fill="rgb(235,32,4)" fg:x="573" fg:w="5"/><text x="7.4830%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.06%)</title><rect x="7.2330%" y="741" width="0.0631%" height="15" fill="rgb(238,90,54)" fg:x="573" fg:w="5"/><text x="7.4830%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (5 samples, 0.06%)</title><rect x="7.2330%" y="725" width="0.0631%" height="15" fill="rgb(213,208,19)" fg:x="573" fg:w="5"/><text x="7.4830%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.06%)</title><rect x="7.2330%" y="709" width="0.0631%" height="15" fill="rgb(233,156,4)" fg:x="573" fg:w="5"/><text x="7.4830%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.04%)</title><rect x="7.2961%" y="725" width="0.0379%" height="15" fill="rgb(207,194,5)" fg:x="578" fg:w="3"/><text x="7.5461%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.04%)</title><rect x="7.2961%" y="709" width="0.0379%" height="15" fill="rgb(206,111,30)" fg:x="578" fg:w="3"/><text x="7.5461%" y="719.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (19 samples, 0.24%)</title><rect x="7.1320%" y="805" width="0.2398%" height="15" fill="rgb(243,70,54)" fg:x="565" fg:w="19"/><text x="7.3820%" y="815.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (19 samples, 0.24%)</title><rect x="7.1320%" y="789" width="0.2398%" height="15" fill="rgb(242,28,8)" fg:x="565" fg:w="19"/><text x="7.3820%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (6 samples, 0.08%)</title><rect x="7.2961%" y="773" width="0.0757%" height="15" fill="rgb(219,106,18)" fg:x="578" fg:w="6"/><text x="7.5461%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (6 samples, 0.08%)</title><rect x="7.2961%" y="757" width="0.0757%" height="15" fill="rgb(244,222,10)" fg:x="578" fg:w="6"/><text x="7.5461%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (6 samples, 0.08%)</title><rect x="7.2961%" y="741" width="0.0757%" height="15" fill="rgb(236,179,52)" fg:x="578" fg:w="6"/><text x="7.5461%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (3 samples, 0.04%)</title><rect x="7.3340%" y="725" width="0.0379%" height="15" fill="rgb(213,23,39)" fg:x="581" fg:w="3"/><text x="7.5840%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.04%)</title><rect x="7.3340%" y="709" width="0.0379%" height="15" fill="rgb(238,48,10)" fg:x="581" fg:w="3"/><text x="7.5840%" y="719.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.14%)</title><rect x="7.3971%" y="789" width="0.1389%" height="15" fill="rgb(251,196,23)" fg:x="586" fg:w="11"/><text x="7.6471%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.14%)</title><rect x="7.3971%" y="773" width="0.1389%" height="15" fill="rgb(250,152,24)" fg:x="586" fg:w="11"/><text x="7.6471%" y="783.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.14%)</title><rect x="7.3971%" y="757" width="0.1389%" height="15" fill="rgb(209,150,17)" fg:x="586" fg:w="11"/><text x="7.6471%" y="767.50"></text></g><g><title>mio::event::event::Event::token (1 samples, 0.01%)</title><rect x="7.5360%" y="789" width="0.0126%" height="15" fill="rgb(234,202,34)" fg:x="597" fg:w="1"/><text x="7.7860%" y="799.50"></text></g><g><title>mio::sys::unix::selector::event::token (1 samples, 0.01%)</title><rect x="7.5360%" y="773" width="0.0126%" height="15" fill="rgb(253,148,53)" fg:x="597" fg:w="1"/><text x="7.7860%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.05%)</title><rect x="7.9020%" y="757" width="0.0505%" height="15" fill="rgb(218,129,16)" fg:x="626" fg:w="4"/><text x="8.1520%" y="767.50"></text></g><g><title>mio::sys::unix::selector::Selector::select::_{{closure}} (4 samples, 0.05%)</title><rect x="7.9020%" y="741" width="0.0505%" height="15" fill="rgb(216,85,19)" fg:x="626" fg:w="4"/><text x="8.1520%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (4 samples, 0.05%)</title><rect x="7.9020%" y="725" width="0.0505%" height="15" fill="rgb(235,228,7)" fg:x="626" fg:w="4"/><text x="8.1520%" y="735.50"></text></g><g><title>[libc.so.6] (25 samples, 0.32%)</title><rect x="8.5206%" y="741" width="0.3156%" height="15" fill="rgb(245,175,0)" fg:x="675" fg:w="25"/><text x="8.7706%" y="751.50"></text></g><g><title>mio::poll::Poll::poll (103 samples, 1.30%)</title><rect x="7.5486%" y="789" width="1.3002%" height="15" fill="rgb(208,168,36)" fg:x="598" fg:w="103"/><text x="7.7986%" y="799.50"></text></g><g><title>mio::sys::unix::selector::Selector::select (103 samples, 1.30%)</title><rect x="7.5486%" y="773" width="1.3002%" height="15" fill="rgb(246,171,24)" fg:x="598" fg:w="103"/><text x="7.7986%" y="783.50"></text></g><g><title>epoll_wait (71 samples, 0.90%)</title><rect x="7.9525%" y="757" width="0.8962%" height="15" fill="rgb(215,142,24)" fg:x="630" fg:w="71"/><text x="8.2025%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="8.8362%" y="741" width="0.0126%" height="15" fill="rgb(250,187,7)" fg:x="700" fg:w="1"/><text x="9.0862%" y="751.50"></text></g><g><title>tokio::io::ready::Ready::from_mio (1 samples, 0.01%)</title><rect x="8.8488%" y="789" width="0.0126%" height="15" fill="rgb(228,66,33)" fg:x="701" fg:w="1"/><text x="9.0988%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (13 samples, 0.16%)</title><rect x="8.8614%" y="773" width="0.1641%" height="15" fill="rgb(234,215,21)" fg:x="702" fg:w="13"/><text x="9.1114%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.16%)</title><rect x="8.8614%" y="757" width="0.1641%" height="15" fill="rgb(222,191,20)" fg:x="702" fg:w="13"/><text x="9.1114%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.18%)</title><rect x="9.0255%" y="773" width="0.1767%" height="15" fill="rgb(245,79,54)" fg:x="715" fg:w="14"/><text x="9.2755%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.18%)</title><rect x="9.0255%" y="757" width="0.1767%" height="15" fill="rgb(240,10,37)" fg:x="715" fg:w="14"/><text x="9.2755%" y="767.50"></text></g><g><title>tokio::util::bit::Pack::pack (1 samples, 0.01%)</title><rect x="9.2022%" y="773" width="0.0126%" height="15" fill="rgb(214,192,32)" fg:x="729" fg:w="1"/><text x="9.4522%" y="783.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (29 samples, 0.37%)</title><rect x="8.8614%" y="789" width="0.3661%" height="15" fill="rgb(209,36,54)" fg:x="702" fg:w="29"/><text x="9.1114%" y="799.50"></text></g><g><title>tokio::util::bit::Pack::unpack (1 samples, 0.01%)</title><rect x="9.2148%" y="773" width="0.0126%" height="15" fill="rgb(220,10,11)" fg:x="730" fg:w="1"/><text x="9.4648%" y="783.50"></text></g><g><title>tokio::util::bit::unpack (1 samples, 0.01%)</title><rect x="9.2148%" y="757" width="0.0126%" height="15" fill="rgb(221,106,17)" fg:x="730" fg:w="1"/><text x="9.4648%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.03%)</title><rect x="9.2527%" y="693" width="0.0252%" height="15" fill="rgb(251,142,44)" fg:x="733" fg:w="2"/><text x="9.5027%" y="703.50"></text></g><g><title>core::mem::drop (18 samples, 0.23%)</title><rect x="9.2527%" y="773" width="0.2272%" height="15" fill="rgb(238,13,15)" fg:x="733" fg:w="18"/><text x="9.5027%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (18 samples, 0.23%)</title><rect x="9.2527%" y="757" width="0.2272%" height="15" fill="rgb(208,107,27)" fg:x="733" fg:w="18"/><text x="9.5027%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (18 samples, 0.23%)</title><rect x="9.2527%" y="741" width="0.2272%" height="15" fill="rgb(205,136,37)" fg:x="733" fg:w="18"/><text x="9.5027%" y="751.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.23%)</title><rect x="9.2527%" y="725" width="0.2272%" height="15" fill="rgb(250,205,27)" fg:x="733" fg:w="18"/><text x="9.5027%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (18 samples, 0.23%)</title><rect x="9.2527%" y="709" width="0.2272%" height="15" fill="rgb(210,80,43)" fg:x="733" fg:w="18"/><text x="9.5027%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (16 samples, 0.20%)</title><rect x="9.2780%" y="693" width="0.2020%" height="15" fill="rgb(247,160,36)" fg:x="735" fg:w="16"/><text x="9.5280%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.20%)</title><rect x="9.2780%" y="677" width="0.2020%" height="15" fill="rgb(234,13,49)" fg:x="735" fg:w="16"/><text x="9.5280%" y="687.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (7 samples, 0.09%)</title><rect x="9.4799%" y="773" width="0.0884%" height="15" fill="rgb(234,122,0)" fg:x="751" fg:w="7"/><text x="9.7299%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (7 samples, 0.09%)</title><rect x="9.4799%" y="757" width="0.0884%" height="15" fill="rgb(207,146,38)" fg:x="751" fg:w="7"/><text x="9.7299%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (7 samples, 0.09%)</title><rect x="9.4799%" y="741" width="0.0884%" height="15" fill="rgb(207,177,25)" fg:x="751" fg:w="7"/><text x="9.7299%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (7 samples, 0.09%)</title><rect x="9.4799%" y="725" width="0.0884%" height="15" fill="rgb(211,178,42)" fg:x="751" fg:w="7"/><text x="9.7299%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7 samples, 0.09%)</title><rect x="9.4799%" y="709" width="0.0884%" height="15" fill="rgb(230,69,54)" fg:x="751" fg:w="7"/><text x="9.7299%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (2 samples, 0.03%)</title><rect x="9.5683%" y="709" width="0.0252%" height="15" fill="rgb(214,135,41)" fg:x="758" fg:w="2"/><text x="9.8183%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (2 samples, 0.03%)</title><rect x="9.5683%" y="693" width="0.0252%" height="15" fill="rgb(237,67,25)" fg:x="758" fg:w="2"/><text x="9.8183%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (2 samples, 0.03%)</title><rect x="9.5683%" y="677" width="0.0252%" height="15" fill="rgb(222,189,50)" fg:x="758" fg:w="2"/><text x="9.8183%" y="687.50"></text></g><g><title>tokio::runtime::context::with_scheduler (2 samples, 0.03%)</title><rect x="9.5683%" y="661" width="0.0252%" height="15" fill="rgb(245,148,34)" fg:x="758" fg:w="2"/><text x="9.8183%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.03%)</title><rect x="9.5683%" y="645" width="0.0252%" height="15" fill="rgb(222,29,6)" fg:x="758" fg:w="2"/><text x="9.8183%" y="655.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (2 samples, 0.03%)</title><rect x="9.5683%" y="629" width="0.0252%" height="15" fill="rgb(221,189,43)" fg:x="758" fg:w="2"/><text x="9.8183%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.03%)</title><rect x="9.5683%" y="613" width="0.0252%" height="15" fill="rgb(207,36,27)" fg:x="758" fg:w="2"/><text x="9.8183%" y="623.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (177 samples, 2.23%)</title><rect x="7.3719%" y="805" width="2.2343%" height="15" fill="rgb(217,90,24)" fg:x="584" fg:w="177"/><text x="7.6219%" y="815.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (30 samples, 0.38%)</title><rect x="9.2275%" y="789" width="0.3787%" height="15" fill="rgb(224,66,35)" fg:x="731" fg:w="30"/><text x="9.4775%" y="799.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (3 samples, 0.04%)</title><rect x="9.5683%" y="773" width="0.0379%" height="15" fill="rgb(221,13,50)" fg:x="758" fg:w="3"/><text x="9.8183%" y="783.50"></text></g><g><title>core::task::wake::Waker::wake (3 samples, 0.04%)</title><rect x="9.5683%" y="757" width="0.0379%" height="15" fill="rgb(236,68,49)" fg:x="758" fg:w="3"/><text x="9.8183%" y="767.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.04%)</title><rect x="9.5683%" y="741" width="0.0379%" height="15" fill="rgb(229,146,28)" fg:x="758" fg:w="3"/><text x="9.8183%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (3 samples, 0.04%)</title><rect x="9.5683%" y="725" width="0.0379%" height="15" fill="rgb(225,31,38)" fg:x="758" fg:w="3"/><text x="9.8183%" y="735.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="9.5935%" y="709" width="0.0126%" height="15" fill="rgb(250,208,3)" fg:x="760" fg:w="1"/><text x="9.8435%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.01%)</title><rect x="9.5935%" y="693" width="0.0126%" height="15" fill="rgb(246,54,23)" fg:x="760" fg:w="1"/><text x="9.8435%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.01%)</title><rect x="9.5935%" y="677" width="0.0126%" height="15" fill="rgb(243,76,11)" fg:x="760" fg:w="1"/><text x="9.8435%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="9.5935%" y="661" width="0.0126%" height="15" fill="rgb(245,21,50)" fg:x="760" fg:w="1"/><text x="9.8435%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::runtime::time::ShardedWheel&gt;&gt; (27 samples, 0.34%)</title><rect x="9.7576%" y="629" width="0.3408%" height="15" fill="rgb(228,9,43)" fg:x="773" fg:w="27"/><text x="10.0076%" y="639.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.34%)</title><rect x="9.7576%" y="613" width="0.3408%" height="15" fill="rgb(208,100,47)" fg:x="773" fg:w="27"/><text x="10.0076%" y="623.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (27 samples, 0.34%)</title><rect x="9.7576%" y="597" width="0.3408%" height="15" fill="rgb(232,26,8)" fg:x="773" fg:w="27"/><text x="10.0076%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (25 samples, 0.32%)</title><rect x="9.7829%" y="581" width="0.3156%" height="15" fill="rgb(216,166,38)" fg:x="775" fg:w="25"/><text x="10.0329%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.32%)</title><rect x="9.7829%" y="565" width="0.3156%" height="15" fill="rgb(251,202,51)" fg:x="775" fg:w="25"/><text x="10.0329%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.03%)</title><rect x="10.0985%" y="565" width="0.0252%" height="15" fill="rgb(254,216,34)" fg:x="800" fg:w="2"/><text x="10.3485%" y="575.50"></text></g><g><title>core::mem::drop (60 samples, 0.76%)</title><rect x="9.7576%" y="645" width="0.7574%" height="15" fill="rgb(251,32,27)" fg:x="773" fg:w="60"/><text x="10.0076%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (33 samples, 0.42%)</title><rect x="10.0985%" y="629" width="0.4166%" height="15" fill="rgb(208,127,28)" fg:x="800" fg:w="33"/><text x="10.3485%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (33 samples, 0.42%)</title><rect x="10.0985%" y="613" width="0.4166%" height="15" fill="rgb(224,137,22)" fg:x="800" fg:w="33"/><text x="10.3485%" y="623.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.42%)</title><rect x="10.0985%" y="597" width="0.4166%" height="15" fill="rgb(254,70,32)" fg:x="800" fg:w="33"/><text x="10.3485%" y="607.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (33 samples, 0.42%)</title><rect x="10.0985%" y="581" width="0.4166%" height="15" fill="rgb(229,75,37)" fg:x="800" fg:w="33"/><text x="10.3485%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (31 samples, 0.39%)</title><rect x="10.1237%" y="565" width="0.3913%" height="15" fill="rgb(252,64,23)" fg:x="802" fg:w="31"/><text x="10.3737%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.39%)</title><rect x="10.1237%" y="549" width="0.3913%" height="15" fill="rgb(232,162,48)" fg:x="802" fg:w="31"/><text x="10.3737%" y="559.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="10.5150%" y="629" width="0.0379%" height="15" fill="rgb(246,160,12)" fg:x="833" fg:w="3"/><text x="10.7650%" y="639.50"></text></g><g><title>std::sync::poison::Flag::borrow (3 samples, 0.04%)</title><rect x="10.5150%" y="613" width="0.0379%" height="15" fill="rgb(247,166,0)" fg:x="833" fg:w="3"/><text x="10.7650%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (2 samples, 0.03%)</title><rect x="10.5276%" y="597" width="0.0252%" height="15" fill="rgb(249,219,21)" fg:x="834" fg:w="2"/><text x="10.7776%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.03%)</title><rect x="10.5276%" y="581" width="0.0252%" height="15" fill="rgb(205,209,3)" fg:x="834" fg:w="2"/><text x="10.7776%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="10.5276%" y="565" width="0.0252%" height="15" fill="rgb(243,44,1)" fg:x="834" fg:w="2"/><text x="10.7776%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.01%)</title><rect x="10.5529%" y="613" width="0.0126%" height="15" fill="rgb(206,159,16)" fg:x="836" fg:w="1"/><text x="10.8029%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.01%)</title><rect x="10.5529%" y="597" width="0.0126%" height="15" fill="rgb(244,77,30)" fg:x="836" fg:w="1"/><text x="10.8029%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (33 samples, 0.42%)</title><rect x="10.5655%" y="613" width="0.4166%" height="15" fill="rgb(218,69,12)" fg:x="837" fg:w="33"/><text x="10.8155%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (33 samples, 0.42%)</title><rect x="10.5655%" y="597" width="0.4166%" height="15" fill="rgb(212,87,7)" fg:x="837" fg:w="33"/><text x="10.8155%" y="607.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (38 samples, 0.48%)</title><rect x="10.5150%" y="645" width="0.4797%" height="15" fill="rgb(245,114,25)" fg:x="833" fg:w="38"/><text x="10.7650%" y="655.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (35 samples, 0.44%)</title><rect x="10.5529%" y="629" width="0.4418%" height="15" fill="rgb(210,61,42)" fg:x="836" fg:w="35"/><text x="10.8029%" y="639.50"></text></g><g><title>std::sys::sync::rwlock::futex::is_read_lockable (1 samples, 0.01%)</title><rect x="10.9821%" y="613" width="0.0126%" height="15" fill="rgb(211,52,33)" fg:x="870" fg:w="1"/><text x="11.2321%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.03%)</title><rect x="11.0073%" y="581" width="0.0252%" height="15" fill="rgb(234,58,33)" fg:x="872" fg:w="2"/><text x="11.2573%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.03%)</title><rect x="11.0073%" y="565" width="0.0252%" height="15" fill="rgb(220,115,36)" fg:x="872" fg:w="2"/><text x="11.2573%" y="575.50"></text></g><g><title>tokio::runtime::time::ShardedWheel::lock_sharded_wheel (42 samples, 0.53%)</title><rect x="10.9947%" y="645" width="0.5302%" height="15" fill="rgb(243,153,54)" fg:x="871" fg:w="42"/><text x="11.2447%" y="655.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (41 samples, 0.52%)</title><rect x="11.0073%" y="629" width="0.5175%" height="15" fill="rgb(251,47,18)" fg:x="872" fg:w="41"/><text x="11.2573%" y="639.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (41 samples, 0.52%)</title><rect x="11.0073%" y="613" width="0.5175%" height="15" fill="rgb(242,102,42)" fg:x="872" fg:w="41"/><text x="11.2573%" y="623.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (41 samples, 0.52%)</title><rect x="11.0073%" y="597" width="0.5175%" height="15" fill="rgb(234,31,38)" fg:x="872" fg:w="41"/><text x="11.2573%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (39 samples, 0.49%)</title><rect x="11.0326%" y="581" width="0.4923%" height="15" fill="rgb(221,117,51)" fg:x="874" fg:w="39"/><text x="11.2826%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (39 samples, 0.49%)</title><rect x="11.0326%" y="565" width="0.4923%" height="15" fill="rgb(212,20,18)" fg:x="874" fg:w="39"/><text x="11.2826%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="11.8404%" y="613" width="0.0379%" height="15" fill="rgb(245,133,36)" fg:x="938" fg:w="3"/><text x="12.0904%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="11.8404%" y="597" width="0.0379%" height="15" fill="rgb(212,6,19)" fg:x="938" fg:w="3"/><text x="12.0904%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="11.8657%" y="581" width="0.0126%" height="15" fill="rgb(218,1,36)" fg:x="940" fg:w="1"/><text x="12.1157%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (7 samples, 0.09%)</title><rect x="11.8783%" y="613" width="0.0884%" height="15" fill="rgb(246,84,54)" fg:x="941" fg:w="7"/><text x="12.1283%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (7 samples, 0.09%)</title><rect x="11.8783%" y="597" width="0.0884%" height="15" fill="rgb(242,110,6)" fg:x="941" fg:w="7"/><text x="12.1283%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (37 samples, 0.47%)</title><rect x="11.5249%" y="629" width="0.4671%" height="15" fill="rgb(214,47,5)" fg:x="913" fg:w="37"/><text x="11.7749%" y="639.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (2 samples, 0.03%)</title><rect x="11.9667%" y="613" width="0.0252%" height="15" fill="rgb(218,159,25)" fg:x="948" fg:w="2"/><text x="12.2167%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.03%)</title><rect x="11.9667%" y="597" width="0.0252%" height="15" fill="rgb(215,211,28)" fg:x="948" fg:w="2"/><text x="12.2167%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (38 samples, 0.48%)</title><rect x="11.5249%" y="645" width="0.4797%" height="15" fill="rgb(238,59,32)" fg:x="913" fg:w="38"/><text x="11.7749%" y="655.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (1 samples, 0.01%)</title><rect x="11.9919%" y="629" width="0.0126%" height="15" fill="rgb(226,82,3)" fg:x="950" fg:w="1"/><text x="12.2419%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="11.9919%" y="613" width="0.0126%" height="15" fill="rgb(240,164,32)" fg:x="950" fg:w="1"/><text x="12.2419%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.04%)</title><rect x="12.0045%" y="629" width="0.0379%" height="15" fill="rgb(232,46,7)" fg:x="951" fg:w="3"/><text x="12.2545%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="12.1434%" y="613" width="0.0379%" height="15" fill="rgb(229,129,53)" fg:x="962" fg:w="3"/><text x="12.3934%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="12.1434%" y="597" width="0.0379%" height="15" fill="rgb(234,188,29)" fg:x="962" fg:w="3"/><text x="12.3934%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="12.1560%" y="581" width="0.0252%" height="15" fill="rgb(246,141,4)" fg:x="963" fg:w="2"/><text x="12.4060%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (7 samples, 0.09%)</title><rect x="12.1813%" y="613" width="0.0884%" height="15" fill="rgb(229,23,39)" fg:x="965" fg:w="7"/><text x="12.4313%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (7 samples, 0.09%)</title><rect x="12.1813%" y="597" width="0.0884%" height="15" fill="rgb(206,12,3)" fg:x="965" fg:w="7"/><text x="12.4313%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (22 samples, 0.28%)</title><rect x="12.0045%" y="645" width="0.2777%" height="15" fill="rgb(252,226,20)" fg:x="951" fg:w="22"/><text x="12.2545%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (19 samples, 0.24%)</title><rect x="12.0424%" y="629" width="0.2398%" height="15" fill="rgb(216,123,35)" fg:x="954" fg:w="19"/><text x="12.2924%" y="639.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (1 samples, 0.01%)</title><rect x="12.2696%" y="613" width="0.0126%" height="15" fill="rgb(212,68,40)" fg:x="972" fg:w="1"/><text x="12.5196%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="12.2696%" y="597" width="0.0126%" height="15" fill="rgb(254,125,32)" fg:x="972" fg:w="1"/><text x="12.5196%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="12.2696%" y="581" width="0.0126%" height="15" fill="rgb(253,97,22)" fg:x="972" fg:w="1"/><text x="12.5196%" y="591.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (212 samples, 2.68%)</title><rect x="9.6188%" y="693" width="2.6761%" height="15" fill="rgb(241,101,14)" fg:x="762" fg:w="212"/><text x="9.8688%" y="703.50">co..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (211 samples, 2.66%)</title><rect x="9.6314%" y="677" width="2.6635%" height="15" fill="rgb(238,103,29)" fg:x="763" fg:w="211"/><text x="9.8814%" y="687.50">to..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (208 samples, 2.63%)</title><rect x="9.6693%" y="661" width="2.6256%" height="15" fill="rgb(233,195,47)" fg:x="766" fg:w="208"/><text x="9.9193%" y="671.50">to..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.01%)</title><rect x="12.2823%" y="645" width="0.0126%" height="15" fill="rgb(246,218,30)" fg:x="973" fg:w="1"/><text x="12.5323%" y="655.50"></text></g><g><title>core::ptr::eq (1 samples, 0.01%)</title><rect x="12.2823%" y="629" width="0.0126%" height="15" fill="rgb(219,145,47)" fg:x="973" fg:w="1"/><text x="12.5323%" y="639.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.01%)</title><rect x="12.2949%" y="661" width="0.0126%" height="15" fill="rgb(243,12,26)" fg:x="974" fg:w="1"/><text x="12.5449%" y="671.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (1 samples, 0.01%)</title><rect x="12.2949%" y="645" width="0.0126%" height="15" fill="rgb(214,87,16)" fg:x="974" fg:w="1"/><text x="12.5449%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (214 samples, 2.70%)</title><rect x="9.6188%" y="725" width="2.7013%" height="15" fill="rgb(208,99,42)" fg:x="762" fg:w="214"/><text x="9.8688%" y="735.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (214 samples, 2.70%)</title><rect x="9.6188%" y="709" width="2.7013%" height="15" fill="rgb(253,99,2)" fg:x="762" fg:w="214"/><text x="9.8688%" y="719.50">co..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="12.2949%" y="693" width="0.0252%" height="15" fill="rgb(220,168,23)" fg:x="974" fg:w="2"/><text x="12.5449%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.03%)</title><rect x="12.2949%" y="677" width="0.0252%" height="15" fill="rgb(242,38,24)" fg:x="974" fg:w="2"/><text x="12.5449%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1 samples, 0.01%)</title><rect x="12.3075%" y="661" width="0.0126%" height="15" fill="rgb(225,182,9)" fg:x="975" fg:w="1"/><text x="12.5575%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="12.3201%" y="677" width="0.0252%" height="15" fill="rgb(243,178,37)" fg:x="976" fg:w="2"/><text x="12.5701%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.03%)</title><rect x="12.3201%" y="661" width="0.0252%" height="15" fill="rgb(232,139,19)" fg:x="976" fg:w="2"/><text x="12.5701%" y="671.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.01%)</title><rect x="12.3327%" y="645" width="0.0126%" height="15" fill="rgb(225,201,24)" fg:x="977" fg:w="1"/><text x="12.5827%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (1 samples, 0.01%)</title><rect x="12.3327%" y="629" width="0.0126%" height="15" fill="rgb(221,47,46)" fg:x="977" fg:w="1"/><text x="12.5827%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::runtime::time::ShardedWheel&gt;&gt; (60 samples, 0.76%)</title><rect x="12.4464%" y="597" width="0.7574%" height="15" fill="rgb(249,23,13)" fg:x="986" fg:w="60"/><text x="12.6964%" y="607.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.76%)</title><rect x="12.4464%" y="581" width="0.7574%" height="15" fill="rgb(219,9,5)" fg:x="986" fg:w="60"/><text x="12.6964%" y="591.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (60 samples, 0.76%)</title><rect x="12.4464%" y="565" width="0.7574%" height="15" fill="rgb(254,171,16)" fg:x="986" fg:w="60"/><text x="12.6964%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (57 samples, 0.72%)</title><rect x="12.4842%" y="549" width="0.7195%" height="15" fill="rgb(230,171,20)" fg:x="989" fg:w="57"/><text x="12.7342%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (57 samples, 0.72%)</title><rect x="12.4842%" y="533" width="0.7195%" height="15" fill="rgb(210,71,41)" fg:x="989" fg:w="57"/><text x="12.7342%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.03%)</title><rect x="13.2037%" y="533" width="0.0252%" height="15" fill="rgb(206,173,20)" fg:x="1046" fg:w="2"/><text x="13.4537%" y="543.50"></text></g><g><title>core::mem::drop (97 samples, 1.22%)</title><rect x="12.4464%" y="613" width="1.2244%" height="15" fill="rgb(233,88,34)" fg:x="986" fg:w="97"/><text x="12.6964%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (37 samples, 0.47%)</title><rect x="13.2037%" y="597" width="0.4671%" height="15" fill="rgb(223,209,46)" fg:x="1046" fg:w="37"/><text x="13.4537%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (37 samples, 0.47%)</title><rect x="13.2037%" y="581" width="0.4671%" height="15" fill="rgb(250,43,18)" fg:x="1046" fg:w="37"/><text x="13.4537%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.47%)</title><rect x="13.2037%" y="565" width="0.4671%" height="15" fill="rgb(208,13,10)" fg:x="1046" fg:w="37"/><text x="13.4537%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (37 samples, 0.47%)</title><rect x="13.2037%" y="549" width="0.4671%" height="15" fill="rgb(212,200,36)" fg:x="1046" fg:w="37"/><text x="13.4537%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (35 samples, 0.44%)</title><rect x="13.2290%" y="533" width="0.4418%" height="15" fill="rgb(225,90,30)" fg:x="1048" fg:w="35"/><text x="13.4790%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.44%)</title><rect x="13.2290%" y="517" width="0.4418%" height="15" fill="rgb(236,182,39)" fg:x="1048" fg:w="35"/><text x="13.4790%" y="527.50"></text></g><g><title>std::sync::poison::Flag::borrow (2 samples, 0.03%)</title><rect x="13.6708%" y="581" width="0.0252%" height="15" fill="rgb(212,144,35)" fg:x="1083" fg:w="2"/><text x="13.9208%" y="591.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="13.6834%" y="565" width="0.0126%" height="15" fill="rgb(228,63,44)" fg:x="1084" fg:w="1"/><text x="13.9334%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="13.6834%" y="549" width="0.0126%" height="15" fill="rgb(228,109,6)" fg:x="1084" fg:w="1"/><text x="13.9334%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="13.6834%" y="533" width="0.0126%" height="15" fill="rgb(238,117,24)" fg:x="1084" fg:w="1"/><text x="13.9334%" y="543.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="13.6708%" y="597" width="0.0379%" height="15" fill="rgb(242,26,26)" fg:x="1083" fg:w="3"/><text x="13.9208%" y="607.50"></text></g><g><title>std::sync::poison::map_result (1 samples, 0.01%)</title><rect x="13.6960%" y="581" width="0.0126%" height="15" fill="rgb(221,92,48)" fg:x="1085" fg:w="1"/><text x="13.9460%" y="591.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (48 samples, 0.61%)</title><rect x="13.6708%" y="613" width="0.6059%" height="15" fill="rgb(209,209,32)" fg:x="1083" fg:w="48"/><text x="13.9208%" y="623.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (45 samples, 0.57%)</title><rect x="13.7087%" y="597" width="0.5680%" height="15" fill="rgb(221,70,22)" fg:x="1086" fg:w="45"/><text x="13.9587%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (43 samples, 0.54%)</title><rect x="13.7339%" y="581" width="0.5428%" height="15" fill="rgb(248,145,5)" fg:x="1088" fg:w="43"/><text x="13.9839%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (43 samples, 0.54%)</title><rect x="13.7339%" y="565" width="0.5428%" height="15" fill="rgb(226,116,26)" fg:x="1088" fg:w="43"/><text x="13.9839%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.01%)</title><rect x="14.3398%" y="549" width="0.0126%" height="15" fill="rgb(244,5,17)" fg:x="1136" fg:w="1"/><text x="14.5898%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.01%)</title><rect x="14.3398%" y="533" width="0.0126%" height="15" fill="rgb(252,159,33)" fg:x="1136" fg:w="1"/><text x="14.5898%" y="543.50"></text></g><g><title>tokio::runtime::time::ShardedWheel::lock_sharded_wheel (48 samples, 0.61%)</title><rect x="14.2767%" y="613" width="0.6059%" height="15" fill="rgb(206,71,0)" fg:x="1131" fg:w="48"/><text x="14.5267%" y="623.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (43 samples, 0.54%)</title><rect x="14.3398%" y="597" width="0.5428%" height="15" fill="rgb(233,118,54)" fg:x="1136" fg:w="43"/><text x="14.5898%" y="607.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (43 samples, 0.54%)</title><rect x="14.3398%" y="581" width="0.5428%" height="15" fill="rgb(234,83,48)" fg:x="1136" fg:w="43"/><text x="14.5898%" y="591.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (43 samples, 0.54%)</title><rect x="14.3398%" y="565" width="0.5428%" height="15" fill="rgb(228,3,54)" fg:x="1136" fg:w="43"/><text x="14.5898%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (42 samples, 0.53%)</title><rect x="14.3524%" y="549" width="0.5302%" height="15" fill="rgb(226,155,13)" fg:x="1137" fg:w="42"/><text x="14.6024%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (42 samples, 0.53%)</title><rect x="14.3524%" y="533" width="0.5302%" height="15" fill="rgb(241,28,37)" fg:x="1137" fg:w="42"/><text x="14.6024%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::elapsed (2 samples, 0.03%)</title><rect x="14.8826%" y="613" width="0.0252%" height="15" fill="rgb(233,93,10)" fg:x="1179" fg:w="2"/><text x="15.1326%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.06%)</title><rect x="15.3244%" y="581" width="0.0631%" height="15" fill="rgb(225,113,19)" fg:x="1214" fg:w="5"/><text x="15.5744%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.06%)</title><rect x="15.3244%" y="565" width="0.0631%" height="15" fill="rgb(241,2,18)" fg:x="1214" fg:w="5"/><text x="15.5744%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="15.3749%" y="549" width="0.0126%" height="15" fill="rgb(228,207,21)" fg:x="1218" fg:w="1"/><text x="15.6249%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (50 samples, 0.63%)</title><rect x="14.9079%" y="597" width="0.6312%" height="15" fill="rgb(213,211,35)" fg:x="1181" fg:w="50"/><text x="15.1579%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (12 samples, 0.15%)</title><rect x="15.3875%" y="581" width="0.1515%" height="15" fill="rgb(209,83,10)" fg:x="1219" fg:w="12"/><text x="15.6375%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (11 samples, 0.14%)</title><rect x="15.4002%" y="565" width="0.1389%" height="15" fill="rgb(209,164,1)" fg:x="1220" fg:w="11"/><text x="15.6502%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (1 samples, 0.01%)</title><rect x="15.5264%" y="549" width="0.0126%" height="15" fill="rgb(213,184,43)" fg:x="1230" fg:w="1"/><text x="15.7764%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (1 samples, 0.01%)</title><rect x="15.5264%" y="533" width="0.0126%" height="15" fill="rgb(231,61,34)" fg:x="1230" fg:w="1"/><text x="15.7764%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::set_elapsed (4 samples, 0.05%)</title><rect x="15.5390%" y="597" width="0.0505%" height="15" fill="rgb(235,75,3)" fg:x="1231" fg:w="4"/><text x="15.7890%" y="607.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1 samples, 0.01%)</title><rect x="15.5769%" y="581" width="0.0126%" height="15" fill="rgb(220,106,47)" fg:x="1234" fg:w="1"/><text x="15.8269%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (56 samples, 0.71%)</title><rect x="14.9079%" y="613" width="0.7069%" height="15" fill="rgb(210,196,33)" fg:x="1181" fg:w="56"/><text x="15.1579%" y="623.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (2 samples, 0.03%)</title><rect x="15.5895%" y="597" width="0.0252%" height="15" fill="rgb(229,154,42)" fg:x="1235" fg:w="2"/><text x="15.8395%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="15.7662%" y="581" width="0.0884%" height="15" fill="rgb(228,114,26)" fg:x="1249" fg:w="7"/><text x="16.0162%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="15.7662%" y="565" width="0.0884%" height="15" fill="rgb(208,144,1)" fg:x="1249" fg:w="7"/><text x="16.0162%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.04%)</title><rect x="15.8167%" y="549" width="0.0379%" height="15" fill="rgb(239,112,37)" fg:x="1253" fg:w="3"/><text x="16.0667%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (10 samples, 0.13%)</title><rect x="15.8546%" y="581" width="0.1262%" height="15" fill="rgb(210,96,50)" fg:x="1256" fg:w="10"/><text x="16.1046%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (9 samples, 0.11%)</title><rect x="15.8672%" y="565" width="0.1136%" height="15" fill="rgb(222,178,2)" fg:x="1257" fg:w="9"/><text x="16.1172%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (1 samples, 0.01%)</title><rect x="15.9682%" y="549" width="0.0126%" height="15" fill="rgb(226,74,18)" fg:x="1265" fg:w="1"/><text x="16.2182%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (1 samples, 0.01%)</title><rect x="15.9682%" y="533" width="0.0126%" height="15" fill="rgb(225,67,54)" fg:x="1265" fg:w="1"/><text x="16.2182%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (31 samples, 0.39%)</title><rect x="15.6147%" y="613" width="0.3913%" height="15" fill="rgb(251,92,32)" fg:x="1237" fg:w="31"/><text x="15.8647%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (31 samples, 0.39%)</title><rect x="15.6147%" y="597" width="0.3913%" height="15" fill="rgb(228,149,22)" fg:x="1237" fg:w="31"/><text x="15.8647%" y="607.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (2 samples, 0.03%)</title><rect x="15.9808%" y="581" width="0.0252%" height="15" fill="rgb(243,54,13)" fg:x="1266" fg:w="2"/><text x="16.2308%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.03%)</title><rect x="15.9808%" y="565" width="0.0252%" height="15" fill="rgb(243,180,28)" fg:x="1266" fg:w="2"/><text x="16.2308%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.03%)</title><rect x="15.9808%" y="549" width="0.0252%" height="15" fill="rgb(208,167,24)" fg:x="1266" fg:w="2"/><text x="16.2308%" y="559.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (510 samples, 6.44%)</title><rect x="9.6062%" y="789" width="6.4378%" height="15" fill="rgb(245,73,45)" fg:x="761" fg:w="510"/><text x="9.8562%" y="799.50">tokio::r..</text></g><g><title>core::iter::traits::iterator::Iterator::min (509 samples, 6.43%)</title><rect x="9.6188%" y="773" width="6.4251%" height="15" fill="rgb(237,203,48)" fg:x="762" fg:w="509"/><text x="9.8688%" y="783.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (509 samples, 6.43%)</title><rect x="9.6188%" y="757" width="6.4251%" height="15" fill="rgb(211,197,16)" fg:x="762" fg:w="509"/><text x="9.8688%" y="767.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (509 samples, 6.43%)</title><rect x="9.6188%" y="741" width="6.4251%" height="15" fill="rgb(243,99,51)" fg:x="762" fg:w="509"/><text x="9.8688%" y="751.50">core::it..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (295 samples, 3.72%)</title><rect x="12.3201%" y="725" width="3.7238%" height="15" fill="rgb(215,123,29)" fg:x="976" fg:w="295"/><text x="12.5701%" y="735.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (295 samples, 3.72%)</title><rect x="12.3201%" y="709" width="3.7238%" height="15" fill="rgb(239,186,37)" fg:x="976" fg:w="295"/><text x="12.5701%" y="719.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (295 samples, 3.72%)</title><rect x="12.3201%" y="693" width="3.7238%" height="15" fill="rgb(252,136,39)" fg:x="976" fg:w="295"/><text x="12.5701%" y="703.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (293 samples, 3.70%)</title><rect x="12.3454%" y="677" width="3.6986%" height="15" fill="rgb(223,213,32)" fg:x="978" fg:w="293"/><text x="12.5954%" y="687.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (293 samples, 3.70%)</title><rect x="12.3454%" y="661" width="3.6986%" height="15" fill="rgb(233,115,5)" fg:x="978" fg:w="293"/><text x="12.5954%" y="671.50">core..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (293 samples, 3.70%)</title><rect x="12.3454%" y="645" width="3.6986%" height="15" fill="rgb(207,226,44)" fg:x="978" fg:w="293"/><text x="12.5954%" y="655.50">toki..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (292 samples, 3.69%)</title><rect x="12.3580%" y="629" width="3.6859%" height="15" fill="rgb(208,126,0)" fg:x="979" fg:w="292"/><text x="12.6080%" y="639.50">toki..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (3 samples, 0.04%)</title><rect x="16.0061%" y="613" width="0.0379%" height="15" fill="rgb(244,66,21)" fg:x="1268" fg:w="3"/><text x="16.2561%" y="623.50"></text></g><g><title>core::ptr::eq (1 samples, 0.01%)</title><rect x="16.0313%" y="597" width="0.0126%" height="15" fill="rgb(222,97,12)" fg:x="1270" fg:w="1"/><text x="16.2813%" y="607.50"></text></g><g><title>tokio::runtime::time::Inner::get_shard_size (1 samples, 0.01%)</title><rect x="16.0439%" y="789" width="0.0126%" height="15" fill="rgb(219,213,19)" fg:x="1271" fg:w="1"/><text x="16.2939%" y="799.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (1 samples, 0.01%)</title><rect x="16.0566%" y="773" width="0.0126%" height="15" fill="rgb(252,169,30)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="783.50"></text></g><g><title>tokio::time::instant::Instant::saturating_duration_since (1 samples, 0.01%)</title><rect x="16.0566%" y="757" width="0.0126%" height="15" fill="rgb(206,32,51)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="767.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.01%)</title><rect x="16.0566%" y="741" width="0.0126%" height="15" fill="rgb(250,172,42)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="751.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.01%)</title><rect x="16.0566%" y="725" width="0.0126%" height="15" fill="rgb(209,34,43)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="735.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.01%)</title><rect x="16.0566%" y="709" width="0.0126%" height="15" fill="rgb(223,11,35)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="719.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.01%)</title><rect x="16.0566%" y="693" width="0.0126%" height="15" fill="rgb(251,219,26)" fg:x="1272" fg:w="1"/><text x="16.3066%" y="703.50"></text></g><g><title>clock_gettime (36 samples, 0.45%)</title><rect x="16.1197%" y="725" width="0.4544%" height="15" fill="rgb(231,119,3)" fg:x="1277" fg:w="36"/><text x="16.3697%" y="735.50"></text></g><g><title>__vdso_clock_gettime (19 samples, 0.24%)</title><rect x="16.3343%" y="709" width="0.2398%" height="15" fill="rgb(216,97,11)" fg:x="1294" fg:w="19"/><text x="16.5843%" y="719.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (553 samples, 6.98%)</title><rect x="9.6062%" y="805" width="6.9806%" height="15" fill="rgb(223,59,9)" fg:x="761" fg:w="553"/><text x="9.8562%" y="815.50">tokio::ru..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (42 samples, 0.53%)</title><rect x="16.0566%" y="789" width="0.5302%" height="15" fill="rgb(233,93,31)" fg:x="1272" fg:w="42"/><text x="16.3066%" y="799.50"></text></g><g><title>tokio::time::clock::Clock::now (41 samples, 0.52%)</title><rect x="16.0692%" y="773" width="0.5175%" height="15" fill="rgb(239,81,33)" fg:x="1273" fg:w="41"/><text x="16.3192%" y="783.50"></text></g><g><title>tokio::time::clock::now (41 samples, 0.52%)</title><rect x="16.0692%" y="757" width="0.5175%" height="15" fill="rgb(213,120,34)" fg:x="1273" fg:w="41"/><text x="16.3192%" y="767.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (41 samples, 0.52%)</title><rect x="16.0692%" y="741" width="0.5175%" height="15" fill="rgb(243,49,53)" fg:x="1273" fg:w="41"/><text x="16.3192%" y="751.50"></text></g><g><title>std::sys::pal::unix::cvt (1 samples, 0.01%)</title><rect x="16.5741%" y="725" width="0.0126%" height="15" fill="rgb(247,216,33)" fg:x="1313" fg:w="1"/><text x="16.8241%" y="735.50"></text></g><g><title>&lt;i32 as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.01%)</title><rect x="16.5741%" y="709" width="0.0126%" height="15" fill="rgb(226,26,14)" fg:x="1313" fg:w="1"/><text x="16.8241%" y="719.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (1 samples, 0.01%)</title><rect x="16.5867%" y="805" width="0.0126%" height="15" fill="rgb(215,49,53)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="815.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (1 samples, 0.01%)</title><rect x="16.5867%" y="789" width="0.0126%" height="15" fill="rgb(245,162,40)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="799.50"></text></g><g><title>tokio::runtime::process::Driver::park_timeout (1 samples, 0.01%)</title><rect x="16.5867%" y="773" width="0.0126%" height="15" fill="rgb(229,68,17)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="783.50"></text></g><g><title>tokio::runtime::signal::Driver::park_timeout (1 samples, 0.01%)</title><rect x="16.5867%" y="757" width="0.0126%" height="15" fill="rgb(213,182,10)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="767.50"></text></g><g><title>tokio::runtime::io::driver::Driver::park_timeout (1 samples, 0.01%)</title><rect x="16.5867%" y="741" width="0.0126%" height="15" fill="rgb(245,125,30)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="751.50"></text></g><g><title>tokio::runtime::driver::Handle::io (1 samples, 0.01%)</title><rect x="16.5867%" y="725" width="0.0126%" height="15" fill="rgb(232,202,2)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="735.50"></text></g><g><title>tokio::runtime::driver::IoHandle::as_ref (1 samples, 0.01%)</title><rect x="16.5867%" y="709" width="0.0126%" height="15" fill="rgb(237,140,51)" fg:x="1314" fg:w="1"/><text x="16.8367%" y="719.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.04%)</title><rect x="16.5993%" y="773" width="0.0379%" height="15" fill="rgb(236,157,25)" fg:x="1315" fg:w="3"/><text x="16.8493%" y="783.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.01%)</title><rect x="16.6246%" y="757" width="0.0126%" height="15" fill="rgb(219,209,0)" fg:x="1317" fg:w="1"/><text x="16.8746%" y="767.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (5 samples, 0.06%)</title><rect x="16.5993%" y="789" width="0.0631%" height="15" fill="rgb(240,116,54)" fg:x="1315" fg:w="5"/><text x="16.8493%" y="799.50"></text></g><g><title>tokio::time::instant::Instant::saturating_duration_since (2 samples, 0.03%)</title><rect x="16.6372%" y="773" width="0.0252%" height="15" fill="rgb(216,10,36)" fg:x="1318" fg:w="2"/><text x="16.8872%" y="783.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.03%)</title><rect x="16.6372%" y="757" width="0.0252%" height="15" fill="rgb(222,72,44)" fg:x="1318" fg:w="2"/><text x="16.8872%" y="767.50"></text></g><g><title>std::time::Instant::checked_duration_since (2 samples, 0.03%)</title><rect x="16.6372%" y="741" width="0.0252%" height="15" fill="rgb(232,159,9)" fg:x="1318" fg:w="2"/><text x="16.8872%" y="751.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (2 samples, 0.03%)</title><rect x="16.6372%" y="725" width="0.0252%" height="15" fill="rgb(210,39,32)" fg:x="1318" fg:w="2"/><text x="16.8872%" y="735.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.03%)</title><rect x="16.6372%" y="709" width="0.0252%" height="15" fill="rgb(216,194,45)" fg:x="1318" fg:w="2"/><text x="16.8872%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.01%)</title><rect x="16.6498%" y="693" width="0.0126%" height="15" fill="rgb(218,18,35)" fg:x="1319" fg:w="1"/><text x="16.8998%" y="703.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.01%)</title><rect x="16.6498%" y="677" width="0.0126%" height="15" fill="rgb(207,83,51)" fg:x="1319" fg:w="1"/><text x="16.8998%" y="687.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (27 samples, 0.34%)</title><rect x="16.5993%" y="805" width="0.3408%" height="15" fill="rgb(225,63,43)" fg:x="1315" fg:w="27"/><text x="16.8493%" y="815.50"></text></g><g><title>tokio::time::clock::Clock::now (22 samples, 0.28%)</title><rect x="16.6625%" y="789" width="0.2777%" height="15" fill="rgb(207,57,36)" fg:x="1320" fg:w="22"/><text x="16.9125%" y="799.50"></text></g><g><title>tokio::time::clock::now (22 samples, 0.28%)</title><rect x="16.6625%" y="773" width="0.2777%" height="15" fill="rgb(216,99,33)" fg:x="1320" fg:w="22"/><text x="16.9125%" y="783.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (22 samples, 0.28%)</title><rect x="16.6625%" y="757" width="0.2777%" height="15" fill="rgb(225,42,16)" fg:x="1320" fg:w="22"/><text x="16.9125%" y="767.50"></text></g><g><title>clock_gettime (22 samples, 0.28%)</title><rect x="16.6625%" y="741" width="0.2777%" height="15" fill="rgb(220,201,45)" fg:x="1320" fg:w="22"/><text x="16.9125%" y="751.50"></text></g><g><title>__vdso_clock_gettime (21 samples, 0.27%)</title><rect x="16.6751%" y="725" width="0.2651%" height="15" fill="rgb(225,33,4)" fg:x="1321" fg:w="21"/><text x="16.9251%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (898 samples, 11.34%)</title><rect x="5.6173%" y="837" width="11.3355%" height="15" fill="rgb(224,33,50)" fg:x="445" fg:w="898"/><text x="5.8673%" y="847.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::time::Driver::park_internal (875 samples, 11.05%)</title><rect x="5.9076%" y="821" width="11.0452%" height="15" fill="rgb(246,198,51)" fg:x="468" fg:w="875"/><text x="6.1576%" y="831.50">tokio::runtime::..</text></g><g><title>tokio::runtime::time::source::TimeSource::tick_to_duration (1 samples, 0.01%)</title><rect x="16.9402%" y="805" width="0.0126%" height="15" fill="rgb(205,22,4)" fg:x="1342" fg:w="1"/><text x="17.1902%" y="815.50"></text></g><g><title>core::time::Duration::from_millis (1 samples, 0.01%)</title><rect x="16.9402%" y="789" width="0.0126%" height="15" fill="rgb(206,3,8)" fg:x="1342" fg:w="1"/><text x="17.1902%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (970 samples, 12.24%)</title><rect x="4.7589%" y="869" width="12.2444%" height="15" fill="rgb(251,23,15)" fg:x="377" fg:w="970"/><text x="5.0089%" y="879.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (970 samples, 12.24%)</title><rect x="4.7589%" y="853" width="12.2444%" height="15" fill="rgb(252,88,28)" fg:x="377" fg:w="970"/><text x="5.0089%" y="863.50">tokio::runtime::sc..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (4 samples, 0.05%)</title><rect x="16.9528%" y="837" width="0.0505%" height="15" fill="rgb(212,127,14)" fg:x="1343" fg:w="4"/><text x="17.2028%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (4 samples, 0.05%)</title><rect x="16.9528%" y="821" width="0.0505%" height="15" fill="rgb(247,145,37)" fg:x="1343" fg:w="4"/><text x="17.2028%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.05%)</title><rect x="16.9528%" y="805" width="0.0505%" height="15" fill="rgb(209,117,53)" fg:x="1343" fg:w="4"/><text x="17.2028%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (985 samples, 12.43%)</title><rect x="4.6200%" y="885" width="12.4337%" height="15" fill="rgb(212,90,42)" fg:x="366" fg:w="985"/><text x="4.8700%" y="895.50">tokio::runtime::sch..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::should_notify_others (4 samples, 0.05%)</title><rect x="17.0033%" y="869" width="0.0505%" height="15" fill="rgb(218,164,37)" fg:x="1347" fg:w="4"/><text x="17.2533%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::len (2 samples, 0.03%)</title><rect x="17.0285%" y="853" width="0.0252%" height="15" fill="rgb(246,65,34)" fg:x="1349" fg:w="2"/><text x="17.2785%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (2 samples, 0.03%)</title><rect x="17.0285%" y="837" width="0.0252%" height="15" fill="rgb(231,100,33)" fg:x="1349" fg:w="2"/><text x="17.2785%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (2 samples, 0.03%)</title><rect x="17.0285%" y="821" width="0.0252%" height="15" fill="rgb(228,126,14)" fg:x="1349" fg:w="2"/><text x="17.2785%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="17.0285%" y="805" width="0.0252%" height="15" fill="rgb(215,173,21)" fg:x="1349" fg:w="2"/><text x="17.2785%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (2 samples, 0.03%)</title><rect x="17.2684%" y="869" width="0.0252%" height="15" fill="rgb(210,6,40)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (2 samples, 0.03%)</title><rect x="17.2684%" y="853" width="0.0252%" height="15" fill="rgb(212,48,18)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="863.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="17.2684%" y="837" width="0.0252%" height="15" fill="rgb(230,214,11)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (2 samples, 0.03%)</title><rect x="17.2684%" y="821" width="0.0252%" height="15" fill="rgb(254,105,39)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.03%)</title><rect x="17.2684%" y="805" width="0.0252%" height="15" fill="rgb(245,158,5)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.03%)</title><rect x="17.2684%" y="789" width="0.0252%" height="15" fill="rgb(249,208,11)" fg:x="1368" fg:w="2"/><text x="17.5184%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.05%)</title><rect x="17.2936%" y="869" width="0.0505%" height="15" fill="rgb(210,39,28)" fg:x="1370" fg:w="4"/><text x="17.5436%" y="879.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.05%)</title><rect x="17.2936%" y="853" width="0.0505%" height="15" fill="rgb(211,56,53)" fg:x="1370" fg:w="4"/><text x="17.5436%" y="863.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.05%)</title><rect x="17.2936%" y="837" width="0.0505%" height="15" fill="rgb(226,201,30)" fg:x="1370" fg:w="4"/><text x="17.5436%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (4 samples, 0.05%)</title><rect x="17.2936%" y="821" width="0.0505%" height="15" fill="rgb(239,101,34)" fg:x="1370" fg:w="4"/><text x="17.5436%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.05%)</title><rect x="17.2936%" y="805" width="0.0505%" height="15" fill="rgb(226,209,5)" fg:x="1370" fg:w="4"/><text x="17.5436%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (24 samples, 0.30%)</title><rect x="17.0538%" y="885" width="0.3030%" height="15" fill="rgb(250,105,47)" fg:x="1351" fg:w="24"/><text x="17.3038%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::inject::shared::Shared&lt;T&gt;::is_closed (1 samples, 0.01%)</title><rect x="17.3441%" y="869" width="0.0126%" height="15" fill="rgb(230,72,3)" fg:x="1374" fg:w="1"/><text x="17.5941%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (5 samples, 0.06%)</title><rect x="17.3567%" y="853" width="0.0631%" height="15" fill="rgb(232,218,39)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (5 samples, 0.06%)</title><rect x="17.3567%" y="837" width="0.0631%" height="15" fill="rgb(248,166,6)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="847.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="17.3567%" y="821" width="0.0631%" height="15" fill="rgb(247,89,20)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="831.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (5 samples, 0.06%)</title><rect x="17.3567%" y="805" width="0.0631%" height="15" fill="rgb(248,130,54)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (5 samples, 0.06%)</title><rect x="17.3567%" y="789" width="0.0631%" height="15" fill="rgb(234,196,4)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.06%)</title><rect x="17.3567%" y="773" width="0.0631%" height="15" fill="rgb(250,143,31)" fg:x="1375" fg:w="5"/><text x="17.6067%" y="783.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (2 samples, 0.03%)</title><rect x="17.4703%" y="805" width="0.0252%" height="15" fill="rgb(211,110,34)" fg:x="1384" fg:w="2"/><text x="17.7203%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (2 samples, 0.03%)</title><rect x="17.4703%" y="789" width="0.0252%" height="15" fill="rgb(215,124,48)" fg:x="1384" fg:w="2"/><text x="17.7203%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8 samples, 0.10%)</title><rect x="17.4198%" y="853" width="0.1010%" height="15" fill="rgb(216,46,13)" fg:x="1380" fg:w="8"/><text x="17.6698%" y="863.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8 samples, 0.10%)</title><rect x="17.4198%" y="837" width="0.1010%" height="15" fill="rgb(205,184,25)" fg:x="1380" fg:w="8"/><text x="17.6698%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8 samples, 0.10%)</title><rect x="17.4198%" y="821" width="0.1010%" height="15" fill="rgb(228,1,10)" fg:x="1380" fg:w="8"/><text x="17.6698%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="17.4956%" y="805" width="0.0252%" height="15" fill="rgb(213,116,27)" fg:x="1386" fg:w="2"/><text x="17.7456%" y="815.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="17.5082%" y="789" width="0.0126%" height="15" fill="rgb(241,95,50)" fg:x="1387" fg:w="1"/><text x="17.7582%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (21 samples, 0.27%)</title><rect x="17.3567%" y="869" width="0.2651%" height="15" fill="rgb(238,48,32)" fg:x="1375" fg:w="21"/><text x="17.6067%" y="879.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (8 samples, 0.10%)</title><rect x="17.5208%" y="853" width="0.1010%" height="15" fill="rgb(235,113,49)" fg:x="1388" fg:w="8"/><text x="17.7708%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (8 samples, 0.10%)</title><rect x="17.5208%" y="837" width="0.1010%" height="15" fill="rgb(205,127,43)" fg:x="1388" fg:w="8"/><text x="17.7708%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (8 samples, 0.10%)</title><rect x="17.5208%" y="821" width="0.1010%" height="15" fill="rgb(250,162,2)" fg:x="1388" fg:w="8"/><text x="17.7708%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (8 samples, 0.10%)</title><rect x="17.5208%" y="805" width="0.1010%" height="15" fill="rgb(220,13,41)" fg:x="1388" fg:w="8"/><text x="17.7708%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.10%)</title><rect x="17.5208%" y="789" width="0.1010%" height="15" fill="rgb(249,221,25)" fg:x="1388" fg:w="8"/><text x="17.7708%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (22 samples, 0.28%)</title><rect x="17.3567%" y="885" width="0.2777%" height="15" fill="rgb(215,208,19)" fg:x="1375" fg:w="22"/><text x="17.6067%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (1 samples, 0.01%)</title><rect x="17.6218%" y="869" width="0.0126%" height="15" fill="rgb(236,175,2)" fg:x="1396" fg:w="1"/><text x="17.8718%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::unpark_one (1 samples, 0.01%)</title><rect x="17.6218%" y="853" width="0.0126%" height="15" fill="rgb(241,52,2)" fg:x="1396" fg:w="1"/><text x="17.8718%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="17.6218%" y="837" width="0.0126%" height="15" fill="rgb(248,140,14)" fg:x="1396" fg:w="1"/><text x="17.8718%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="17.6218%" y="821" width="0.0126%" height="15" fill="rgb(253,22,42)" fg:x="1396" fg:w="1"/><text x="17.8718%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.01%)</title><rect x="17.6344%" y="853" width="0.0126%" height="15" fill="rgb(234,61,47)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (1 samples, 0.01%)</title><rect x="17.6344%" y="837" width="0.0126%" height="15" fill="rgb(208,226,15)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="847.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="17.6344%" y="821" width="0.0126%" height="15" fill="rgb(217,221,4)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="831.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.01%)</title><rect x="17.6344%" y="805" width="0.0126%" height="15" fill="rgb(212,174,34)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.01%)</title><rect x="17.6344%" y="789" width="0.0126%" height="15" fill="rgb(253,83,4)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="17.6344%" y="773" width="0.0126%" height="15" fill="rgb(250,195,49)" fg:x="1397" fg:w="1"/><text x="17.8844%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (4 samples, 0.05%)</title><rect x="17.6344%" y="869" width="0.0505%" height="15" fill="rgb(241,192,25)" fg:x="1397" fg:w="4"/><text x="17.8844%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::dec_num_unparked (3 samples, 0.04%)</title><rect x="17.6471%" y="853" width="0.0379%" height="15" fill="rgb(208,124,10)" fg:x="1398" fg:w="3"/><text x="17.8971%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.04%)</title><rect x="17.6471%" y="837" width="0.0379%" height="15" fill="rgb(222,33,0)" fg:x="1398" fg:w="3"/><text x="17.8971%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.04%)</title><rect x="17.6471%" y="821" width="0.0379%" height="15" fill="rgb(234,209,28)" fg:x="1398" fg:w="3"/><text x="17.8971%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (1,050 samples, 13.25%)</title><rect x="4.4433%" y="901" width="13.2542%" height="15" fill="rgb(224,11,23)" fg:x="352" fg:w="1050"/><text x="4.6933%" y="911.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (5 samples, 0.06%)</title><rect x="17.6344%" y="885" width="0.0631%" height="15" fill="rgb(232,99,1)" fg:x="1397" fg:w="5"/><text x="17.8844%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.01%)</title><rect x="17.6849%" y="869" width="0.0126%" height="15" fill="rgb(237,95,45)" fg:x="1401" fg:w="1"/><text x="17.9349%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::is_empty (1 samples, 0.01%)</title><rect x="17.6849%" y="853" width="0.0126%" height="15" fill="rgb(208,109,11)" fg:x="1401" fg:w="1"/><text x="17.9349%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="17.6849%" y="837" width="0.0126%" height="15" fill="rgb(216,190,48)" fg:x="1401" fg:w="1"/><text x="17.9349%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="17.6849%" y="821" width="0.0126%" height="15" fill="rgb(251,171,36)" fg:x="1401" fg:w="1"/><text x="17.9349%" y="831.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="17.6849%" y="805" width="0.0126%" height="15" fill="rgb(230,62,22)" fg:x="1401" fg:w="1"/><text x="17.9349%" y="815.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="17.7102%" y="885" width="0.0126%" height="15" fill="rgb(225,114,35)" fg:x="1403" fg:w="1"/><text x="17.9602%" y="895.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.01%)</title><rect x="17.7102%" y="869" width="0.0126%" height="15" fill="rgb(215,118,42)" fg:x="1403" fg:w="1"/><text x="17.9602%" y="879.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.01%)</title><rect x="17.7102%" y="853" width="0.0126%" height="15" fill="rgb(243,119,21)" fg:x="1403" fg:w="1"/><text x="17.9602%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;tokio::runtime::coop::with_budget::ResetGuard,std::thread::local::AccessError&gt;&gt; (2 samples, 0.03%)</title><rect x="17.7228%" y="853" width="0.0252%" height="15" fill="rgb(252,177,53)" fg:x="1404" fg:w="2"/><text x="17.9728%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::with_budget::ResetGuard&gt; (1 samples, 0.01%)</title><rect x="17.7354%" y="837" width="0.0126%" height="15" fill="rgb(237,209,29)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="847.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="17.7354%" y="821" width="0.0126%" height="15" fill="rgb(212,65,23)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="831.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.01%)</title><rect x="17.7354%" y="805" width="0.0126%" height="15" fill="rgb(230,222,46)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="17.7354%" y="789" width="0.0126%" height="15" fill="rgb(215,135,32)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="799.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.01%)</title><rect x="17.7354%" y="773" width="0.0126%" height="15" fill="rgb(246,101,22)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="783.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop::_{{closure}} (1 samples, 0.01%)</title><rect x="17.7354%" y="757" width="0.0126%" height="15" fill="rgb(206,107,13)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="17.7354%" y="741" width="0.0126%" height="15" fill="rgb(250,100,44)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="17.7354%" y="725" width="0.0126%" height="15" fill="rgb(231,147,38)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="735.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="17.7354%" y="709" width="0.0126%" height="15" fill="rgb(229,8,40)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="719.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="17.7354%" y="693" width="0.0126%" height="15" fill="rgb(221,135,30)" fg:x="1405" fg:w="1"/><text x="17.9854%" y="703.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.01%)</title><rect x="17.7480%" y="853" width="0.0126%" height="15" fill="rgb(249,193,18)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="17.7480%" y="837" width="0.0126%" height="15" fill="rgb(209,133,39)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="17.7480%" y="821" width="0.0126%" height="15" fill="rgb(232,100,14)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="831.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (1 samples, 0.01%)</title><rect x="17.7480%" y="805" width="0.0126%" height="15" fill="rgb(224,185,1)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="815.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="17.7480%" y="789" width="0.0126%" height="15" fill="rgb(223,139,8)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="17.7480%" y="773" width="0.0126%" height="15" fill="rgb(232,213,38)" fg:x="1406" fg:w="1"/><text x="17.9980%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.01%)</title><rect x="17.7859%" y="837" width="0.0126%" height="15" fill="rgb(207,94,22)" fg:x="1409" fg:w="1"/><text x="18.0359%" y="847.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="17.7859%" y="821" width="0.0126%" height="15" fill="rgb(219,183,54)" fg:x="1409" fg:w="1"/><text x="18.0359%" y="831.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="17.7859%" y="805" width="0.0126%" height="15" fill="rgb(216,185,54)" fg:x="1409" fg:w="1"/><text x="18.0359%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (1 samples, 0.01%)</title><rect x="17.7985%" y="837" width="0.0126%" height="15" fill="rgb(254,217,39)" fg:x="1410" fg:w="1"/><text x="18.0485%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="17.7985%" y="821" width="0.0126%" height="15" fill="rgb(240,178,23)" fg:x="1410" fg:w="1"/><text x="18.0485%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="17.7985%" y="805" width="0.0126%" height="15" fill="rgb(218,11,47)" fg:x="1410" fg:w="1"/><text x="18.0485%" y="815.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="17.7985%" y="789" width="0.0126%" height="15" fill="rgb(218,51,51)" fg:x="1410" fg:w="1"/><text x="18.0485%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="17.8364%" y="709" width="0.0126%" height="15" fill="rgb(238,126,27)" fg:x="1413" fg:w="1"/><text x="18.0864%" y="719.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (1 samples, 0.01%)</title><rect x="17.8364%" y="693" width="0.0126%" height="15" fill="rgb(249,202,22)" fg:x="1413" fg:w="1"/><text x="18.0864%" y="703.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="17.8364%" y="677" width="0.0126%" height="15" fill="rgb(254,195,49)" fg:x="1413" fg:w="1"/><text x="18.0864%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::_{{closure}} (1 samples, 0.01%)</title><rect x="17.8364%" y="661" width="0.0126%" height="15" fill="rgb(208,123,14)" fg:x="1413" fg:w="1"/><text x="18.0864%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="17.8490%" y="693" width="0.0126%" height="15" fill="rgb(224,200,8)" fg:x="1414" fg:w="1"/><text x="18.0990%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="17.8490%" y="677" width="0.0126%" height="15" fill="rgb(217,61,36)" fg:x="1414" fg:w="1"/><text x="18.0990%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="17.8490%" y="661" width="0.0126%" height="15" fill="rgb(206,35,45)" fg:x="1414" fg:w="1"/><text x="18.0990%" y="671.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="17.8617%" y="693" width="0.0126%" height="15" fill="rgb(217,65,33)" fg:x="1415" fg:w="1"/><text x="18.1117%" y="703.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.01%)</title><rect x="17.8617%" y="677" width="0.0126%" height="15" fill="rgb(222,158,48)" fg:x="1415" fg:w="1"/><text x="18.1117%" y="687.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.01%)</title><rect x="17.8617%" y="661" width="0.0126%" height="15" fill="rgb(254,2,54)" fg:x="1415" fg:w="1"/><text x="18.1117%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="17.8743%" y="645" width="0.0126%" height="15" fill="rgb(250,143,38)" fg:x="1416" fg:w="1"/><text x="18.1243%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="17.8743%" y="629" width="0.0126%" height="15" fill="rgb(248,25,0)" fg:x="1416" fg:w="1"/><text x="18.1243%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (4 samples, 0.05%)</title><rect x="17.8869%" y="645" width="0.0505%" height="15" fill="rgb(206,152,27)" fg:x="1417" fg:w="4"/><text x="18.1369%" y="655.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.05%)</title><rect x="17.8869%" y="629" width="0.0505%" height="15" fill="rgb(240,77,30)" fg:x="1417" fg:w="4"/><text x="18.1369%" y="639.50"></text></g><g><title>clock_gettime (4 samples, 0.05%)</title><rect x="17.8869%" y="613" width="0.0505%" height="15" fill="rgb(231,5,3)" fg:x="1417" fg:w="4"/><text x="18.1369%" y="623.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="17.9248%" y="597" width="0.0126%" height="15" fill="rgb(207,226,32)" fg:x="1420" fg:w="1"/><text x="18.1748%" y="607.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.08%)</title><rect x="17.8743%" y="677" width="0.0757%" height="15" fill="rgb(222,207,47)" fg:x="1416" fg:w="6"/><text x="18.1243%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (6 samples, 0.08%)</title><rect x="17.8743%" y="661" width="0.0757%" height="15" fill="rgb(229,115,45)" fg:x="1416" fg:w="6"/><text x="18.1243%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.01%)</title><rect x="17.9374%" y="645" width="0.0126%" height="15" fill="rgb(224,191,6)" fg:x="1421" fg:w="1"/><text x="18.1874%" y="655.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.01%)</title><rect x="17.9374%" y="629" width="0.0126%" height="15" fill="rgb(230,227,24)" fg:x="1421" fg:w="1"/><text x="18.1874%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.01%)</title><rect x="17.9374%" y="613" width="0.0126%" height="15" fill="rgb(228,80,19)" fg:x="1421" fg:w="1"/><text x="18.1874%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="17.9374%" y="597" width="0.0126%" height="15" fill="rgb(247,229,0)" fg:x="1421" fg:w="1"/><text x="18.1874%" y="607.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (3 samples, 0.04%)</title><rect x="17.9500%" y="677" width="0.0379%" height="15" fill="rgb(237,194,15)" fg:x="1422" fg:w="3"/><text x="18.2000%" y="687.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (2 samples, 0.03%)</title><rect x="17.9626%" y="661" width="0.0252%" height="15" fill="rgb(219,203,20)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="671.50"></text></g><g><title>mio::waker::Waker::wake (2 samples, 0.03%)</title><rect x="17.9626%" y="645" width="0.0252%" height="15" fill="rgb(234,128,8)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="655.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.03%)</title><rect x="17.9626%" y="629" width="0.0252%" height="15" fill="rgb(248,202,8)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="639.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 0.03%)</title><rect x="17.9626%" y="613" width="0.0252%" height="15" fill="rgb(206,104,37)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="623.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (2 samples, 0.03%)</title><rect x="17.9626%" y="597" width="0.0252%" height="15" fill="rgb(223,8,27)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="607.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (2 samples, 0.03%)</title><rect x="17.9626%" y="581" width="0.0252%" height="15" fill="rgb(216,217,28)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="591.50"></text></g><g><title>write (2 samples, 0.03%)</title><rect x="17.9626%" y="565" width="0.0252%" height="15" fill="rgb(249,199,1)" fg:x="1423" fg:w="2"/><text x="18.2126%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="17.9753%" y="549" width="0.0126%" height="15" fill="rgb(240,85,17)" fg:x="1424" fg:w="1"/><text x="18.2253%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.03%)</title><rect x="17.9879%" y="645" width="0.0252%" height="15" fill="rgb(206,108,45)" fg:x="1425" fg:w="2"/><text x="18.2379%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.03%)</title><rect x="17.9879%" y="629" width="0.0252%" height="15" fill="rgb(245,210,41)" fg:x="1425" fg:w="2"/><text x="18.2379%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (3 samples, 0.04%)</title><rect x="17.9879%" y="677" width="0.0379%" height="15" fill="rgb(206,13,37)" fg:x="1425" fg:w="3"/><text x="18.2379%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (3 samples, 0.04%)</title><rect x="17.9879%" y="661" width="0.0379%" height="15" fill="rgb(250,61,18)" fg:x="1425" fg:w="3"/><text x="18.2379%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (1 samples, 0.01%)</title><rect x="18.0131%" y="645" width="0.0126%" height="15" fill="rgb(235,172,48)" fg:x="1427" fg:w="1"/><text x="18.2631%" y="655.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (1 samples, 0.01%)</title><rect x="18.0131%" y="629" width="0.0126%" height="15" fill="rgb(249,201,17)" fg:x="1427" fg:w="1"/><text x="18.2631%" y="639.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (1 samples, 0.01%)</title><rect x="18.0131%" y="613" width="0.0126%" height="15" fill="rgb(219,208,6)" fg:x="1427" fg:w="1"/><text x="18.2631%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (17 samples, 0.21%)</title><rect x="17.8364%" y="773" width="0.2146%" height="15" fill="rgb(248,31,23)" fg:x="1413" fg:w="17"/><text x="18.0864%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (17 samples, 0.21%)</title><rect x="17.8364%" y="757" width="0.2146%" height="15" fill="rgb(245,15,42)" fg:x="1413" fg:w="17"/><text x="18.0864%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (17 samples, 0.21%)</title><rect x="17.8364%" y="741" width="0.2146%" height="15" fill="rgb(222,217,39)" fg:x="1413" fg:w="17"/><text x="18.0864%" y="751.50"></text></g><g><title>tokio::runtime::context::with_scheduler (17 samples, 0.21%)</title><rect x="17.8364%" y="725" width="0.2146%" height="15" fill="rgb(210,219,27)" fg:x="1413" fg:w="17"/><text x="18.0864%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (16 samples, 0.20%)</title><rect x="17.8490%" y="709" width="0.2020%" height="15" fill="rgb(252,166,36)" fg:x="1414" fg:w="16"/><text x="18.0990%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (14 samples, 0.18%)</title><rect x="17.8743%" y="693" width="0.1767%" height="15" fill="rgb(245,132,34)" fg:x="1416" fg:w="14"/><text x="18.1243%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (2 samples, 0.03%)</title><rect x="18.0258%" y="677" width="0.0252%" height="15" fill="rgb(236,54,3)" fg:x="1428" fg:w="2"/><text x="18.2758%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (2 samples, 0.03%)</title><rect x="18.0258%" y="661" width="0.0252%" height="15" fill="rgb(241,173,43)" fg:x="1428" fg:w="2"/><text x="18.2758%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (2 samples, 0.03%)</title><rect x="18.0258%" y="645" width="0.0252%" height="15" fill="rgb(215,190,9)" fg:x="1428" fg:w="2"/><text x="18.2758%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.03%)</title><rect x="18.0258%" y="629" width="0.0252%" height="15" fill="rgb(242,101,16)" fg:x="1428" fg:w="2"/><text x="18.2758%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.03%)</title><rect x="18.0258%" y="613" width="0.0252%" height="15" fill="rgb(223,190,21)" fg:x="1428" fg:w="2"/><text x="18.2758%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (5 samples, 0.06%)</title><rect x="18.1267%" y="613" width="0.0631%" height="15" fill="rgb(215,228,25)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="623.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="18.1267%" y="597" width="0.0631%" height="15" fill="rgb(225,36,22)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="607.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (5 samples, 0.06%)</title><rect x="18.1267%" y="581" width="0.0631%" height="15" fill="rgb(251,106,46)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="591.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.06%)</title><rect x="18.1267%" y="565" width="0.0631%" height="15" fill="rgb(208,90,1)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.06%)</title><rect x="18.1267%" y="549" width="0.0631%" height="15" fill="rgb(243,10,4)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="559.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (5 samples, 0.06%)</title><rect x="18.1267%" y="533" width="0.0631%" height="15" fill="rgb(212,137,27)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="543.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (5 samples, 0.06%)</title><rect x="18.1267%" y="517" width="0.0631%" height="15" fill="rgb(231,220,49)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.06%)</title><rect x="18.1267%" y="501" width="0.0631%" height="15" fill="rgb(237,96,20)" fg:x="1436" fg:w="5"/><text x="18.3767%" y="511.50"></text></g><g><title>&lt;atomic_counter::RelaxedCounter as atomic_counter::AtomicCounter&gt;::inc (4 samples, 0.05%)</title><rect x="18.2782%" y="597" width="0.0505%" height="15" fill="rgb(239,229,30)" fg:x="1448" fg:w="4"/><text x="18.5282%" y="607.50"></text></g><g><title>&lt;atomic_counter::RelaxedCounter as atomic_counter::AtomicCounter&gt;::add (4 samples, 0.05%)</title><rect x="18.2782%" y="581" width="0.0505%" height="15" fill="rgb(219,65,33)" fg:x="1448" fg:w="4"/><text x="18.5282%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.05%)</title><rect x="18.2782%" y="565" width="0.0505%" height="15" fill="rgb(243,134,7)" fg:x="1448" fg:w="4"/><text x="18.5282%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.05%)</title><rect x="18.2782%" y="549" width="0.0505%" height="15" fill="rgb(216,177,54)" fg:x="1448" fg:w="4"/><text x="18.5282%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="18.4802%" y="453" width="0.0757%" height="15" fill="rgb(211,160,20)" fg:x="1464" fg:w="6"/><text x="18.7302%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.08%)</title><rect x="18.4802%" y="437" width="0.0757%" height="15" fill="rgb(239,85,39)" fg:x="1464" fg:w="6"/><text x="18.7302%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.08%)</title><rect x="18.4802%" y="421" width="0.0757%" height="15" fill="rgb(232,125,22)" fg:x="1464" fg:w="6"/><text x="18.7302%" y="431.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.08%)</title><rect x="18.4802%" y="405" width="0.0757%" height="15" fill="rgb(244,57,34)" fg:x="1464" fg:w="6"/><text x="18.7302%" y="415.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.08%)</title><rect x="18.4802%" y="389" width="0.0757%" height="15" fill="rgb(214,203,32)" fg:x="1464" fg:w="6"/><text x="18.7302%" y="399.50"></text></g><g><title>[libc.so.6] (274 samples, 3.46%)</title><rect x="20.7397%" y="261" width="3.4587%" height="15" fill="rgb(207,58,43)" fg:x="1643" fg:w="274"/><text x="20.9897%" y="271.50">[li..</text></g><g><title>[libc.so.6] (15 samples, 0.19%)</title><rect x="24.0091%" y="245" width="0.1893%" height="15" fill="rgb(215,193,15)" fg:x="1902" fg:w="15"/><text x="24.2591%" y="255.50"></text></g><g><title>[libc.so.6] (339 samples, 4.28%)</title><rect x="19.9318%" y="277" width="4.2792%" height="15" fill="rgb(232,15,44)" fg:x="1579" fg:w="339"/><text x="20.1818%" y="287.50">[libc..</text></g><g><title>__madvise (1 samples, 0.01%)</title><rect x="24.1984%" y="261" width="0.0126%" height="15" fill="rgb(212,3,48)" fg:x="1917" fg:w="1"/><text x="24.4484%" y="271.50"></text></g><g><title>[libc.so.6] (437 samples, 5.52%)</title><rect x="18.9725%" y="293" width="5.5163%" height="15" fill="rgb(218,128,7)" fg:x="1503" fg:w="437"/><text x="19.2225%" y="303.50">[libc.s..</text></g><g><title>__lll_lock_wait_private (22 samples, 0.28%)</title><rect x="24.2111%" y="277" width="0.2777%" height="15" fill="rgb(226,216,39)" fg:x="1918" fg:w="22"/><text x="24.4611%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.4761%" y="261" width="0.0126%" height="15" fill="rgb(243,47,51)" fg:x="1939" fg:w="1"/><text x="24.7261%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (479 samples, 6.05%)</title><rect x="18.5559%" y="373" width="6.0465%" height="15" fill="rgb(241,183,40)" fg:x="1470" fg:w="479"/><text x="18.8059%" y="383.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (479 samples, 6.05%)</title><rect x="18.5559%" y="357" width="6.0465%" height="15" fill="rgb(231,217,32)" fg:x="1470" fg:w="479"/><text x="18.8059%" y="367.50">alloc::a..</text></g><g><title>__rdl_dealloc (479 samples, 6.05%)</title><rect x="18.5559%" y="341" width="6.0465%" height="15" fill="rgb(229,61,38)" fg:x="1470" fg:w="479"/><text x="18.8059%" y="351.50">__rdl_de..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (479 samples, 6.05%)</title><rect x="18.5559%" y="325" width="6.0465%" height="15" fill="rgb(225,210,5)" fg:x="1470" fg:w="479"/><text x="18.8059%" y="335.50">std::sys..</text></g><g><title>cfree (479 samples, 6.05%)</title><rect x="18.5559%" y="309" width="6.0465%" height="15" fill="rgb(231,79,45)" fg:x="1470" fg:w="479"/><text x="18.8059%" y="319.50">cfree</text></g><g><title>__lll_lock_wake_private (9 samples, 0.11%)</title><rect x="24.4888%" y="293" width="0.1136%" height="15" fill="rgb(224,100,7)" fg:x="1940" fg:w="9"/><text x="24.7388%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="24.5645%" y="277" width="0.0379%" height="15" fill="rgb(241,198,18)" fg:x="1946" fg:w="3"/><text x="24.8145%" y="287.50"></text></g><g><title>core::mem::drop (486 samples, 6.13%)</title><rect x="18.4802%" y="485" width="6.1348%" height="15" fill="rgb(252,97,53)" fg:x="1464" fg:w="486"/><text x="18.7302%" y="495.50">core::me..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (486 samples, 6.13%)</title><rect x="18.4802%" y="469" width="6.1348%" height="15" fill="rgb(220,88,7)" fg:x="1464" fg:w="486"/><text x="18.7302%" y="479.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (480 samples, 6.06%)</title><rect x="18.5559%" y="453" width="6.0591%" height="15" fill="rgb(213,176,14)" fg:x="1470" fg:w="480"/><text x="18.8059%" y="463.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (480 samples, 6.06%)</title><rect x="18.5559%" y="437" width="6.0591%" height="15" fill="rgb(246,73,7)" fg:x="1470" fg:w="480"/><text x="18.8059%" y="447.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (480 samples, 6.06%)</title><rect x="18.5559%" y="421" width="6.0591%" height="15" fill="rgb(245,64,36)" fg:x="1470" fg:w="480"/><text x="18.8059%" y="431.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (480 samples, 6.06%)</title><rect x="18.5559%" y="405" width="6.0591%" height="15" fill="rgb(245,80,10)" fg:x="1470" fg:w="480"/><text x="18.8059%" y="415.50">&lt;alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (480 samples, 6.06%)</title><rect x="18.5559%" y="389" width="6.0591%" height="15" fill="rgb(232,107,50)" fg:x="1470" fg:w="480"/><text x="18.8059%" y="399.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.01%)</title><rect x="24.6024%" y="373" width="0.0126%" height="15" fill="rgb(253,3,0)" fg:x="1949" fg:w="1"/><text x="24.8524%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.42%)</title><rect x="24.6150%" y="485" width="0.4166%" height="15" fill="rgb(212,99,53)" fg:x="1950" fg:w="33"/><text x="24.8650%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.42%)</title><rect x="24.6150%" y="469" width="0.4166%" height="15" fill="rgb(249,111,54)" fg:x="1950" fg:w="33"/><text x="24.8650%" y="479.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (523 samples, 6.60%)</title><rect x="18.4676%" y="549" width="6.6019%" height="15" fill="rgb(249,55,30)" fg:x="1463" fg:w="523"/><text x="18.7176%" y="559.50">bytes::by..</text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (523 samples, 6.60%)</title><rect x="18.4676%" y="533" width="6.6019%" height="15" fill="rgb(237,47,42)" fg:x="1463" fg:w="523"/><text x="18.7176%" y="543.50">&lt;core::sy..</text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (523 samples, 6.60%)</title><rect x="18.4676%" y="517" width="6.6019%" height="15" fill="rgb(211,20,18)" fg:x="1463" fg:w="523"/><text x="18.7176%" y="527.50">bytes::by..</text></g><g><title>bytes::bytes_mut::release_shared (523 samples, 6.60%)</title><rect x="18.4676%" y="501" width="6.6019%" height="15" fill="rgb(231,203,46)" fg:x="1463" fg:w="523"/><text x="18.7176%" y="511.50">bytes::by..</text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.04%)</title><rect x="25.0316%" y="485" width="0.0379%" height="15" fill="rgb(237,142,3)" fg:x="1983" fg:w="3"/><text x="25.2816%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.04%)</title><rect x="25.0316%" y="469" width="0.0379%" height="15" fill="rgb(241,107,1)" fg:x="1983" fg:w="3"/><text x="25.2816%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (611 samples, 7.71%)</title><rect x="18.3287%" y="597" width="7.7127%" height="15" fill="rgb(229,83,13)" fg:x="1452" fg:w="611"/><text x="18.5787%" y="607.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (609 samples, 7.69%)</title><rect x="18.3540%" y="581" width="7.6875%" height="15" fill="rgb(241,91,40)" fg:x="1454" fg:w="609"/><text x="18.6040%" y="591.50">core::ptr::..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (609 samples, 7.69%)</title><rect x="18.3540%" y="565" width="7.6875%" height="15" fill="rgb(225,3,45)" fg:x="1454" fg:w="609"/><text x="18.6040%" y="575.50">&lt;bytes::byt..</text></g><g><title>cfree (77 samples, 0.97%)</title><rect x="25.0694%" y="549" width="0.9720%" height="15" fill="rgb(244,223,14)" fg:x="1986" fg:w="77"/><text x="25.3194%" y="559.50"></text></g><g><title>[libc.so.6] (52 samples, 0.66%)</title><rect x="25.3850%" y="533" width="0.6564%" height="15" fill="rgb(224,124,37)" fg:x="2011" fg:w="52"/><text x="25.6350%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="26.6094%" y="485" width="0.0252%" height="15" fill="rgb(251,171,30)" fg:x="2108" fg:w="2"/><text x="26.8594%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2 samples, 0.03%)</title><rect x="26.6094%" y="469" width="0.0252%" height="15" fill="rgb(236,46,54)" fg:x="2108" fg:w="2"/><text x="26.8594%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="26.6094%" y="453" width="0.0252%" height="15" fill="rgb(245,213,5)" fg:x="2108" fg:w="2"/><text x="26.8594%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::future::FusedFuture&gt;::is_terminated (4 samples, 0.05%)</title><rect x="26.5968%" y="517" width="0.0505%" height="15" fill="rgb(230,144,27)" fg:x="2107" fg:w="4"/><text x="26.8468%" y="527.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as futures_core::future::FusedFuture&gt;::is_terminated (4 samples, 0.05%)</title><rect x="26.5968%" y="501" width="0.0505%" height="15" fill="rgb(220,86,6)" fg:x="2107" fg:w="4"/><text x="26.8468%" y="511.50"></text></g><g><title>flume::Shared&lt;T&gt;::is_disconnected (1 samples, 0.01%)</title><rect x="26.6347%" y="485" width="0.0126%" height="15" fill="rgb(240,20,13)" fg:x="2110" fg:w="1"/><text x="26.8847%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="26.6347%" y="469" width="0.0126%" height="15" fill="rgb(217,89,34)" fg:x="2110" fg:w="1"/><text x="26.8847%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="26.6347%" y="453" width="0.0126%" height="15" fill="rgb(229,13,5)" fg:x="2110" fg:w="1"/><text x="26.8847%" y="463.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (5 samples, 0.06%)</title><rect x="26.6473%" y="517" width="0.0631%" height="15" fill="rgb(244,67,35)" fg:x="2111" fg:w="5"/><text x="26.8973%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="26.7104%" y="453" width="0.0252%" height="15" fill="rgb(221,40,2)" fg:x="2116" fg:w="2"/><text x="26.9604%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="26.7230%" y="437" width="0.0126%" height="15" fill="rgb(237,157,21)" fg:x="2117" fg:w="1"/><text x="26.9730%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="26.7230%" y="421" width="0.0126%" height="15" fill="rgb(222,94,11)" fg:x="2117" fg:w="1"/><text x="26.9730%" y="431.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="26.7357%" y="453" width="0.0126%" height="15" fill="rgb(249,113,6)" fg:x="2118" fg:w="1"/><text x="26.9857%" y="463.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (1 samples, 0.01%)</title><rect x="26.7357%" y="437" width="0.0126%" height="15" fill="rgb(238,137,36)" fg:x="2118" fg:w="1"/><text x="26.9857%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="26.7357%" y="421" width="0.0126%" height="15" fill="rgb(210,102,26)" fg:x="2118" fg:w="1"/><text x="26.9857%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="26.8240%" y="405" width="0.0126%" height="15" fill="rgb(218,30,30)" fg:x="2125" fg:w="1"/><text x="27.0740%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (2 samples, 0.03%)</title><rect x="26.8240%" y="421" width="0.0252%" height="15" fill="rgb(214,67,26)" fg:x="2125" fg:w="2"/><text x="27.0740%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="26.8367%" y="405" width="0.0126%" height="15" fill="rgb(251,9,53)" fg:x="2126" fg:w="1"/><text x="27.0867%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (4 samples, 0.05%)</title><rect x="26.8114%" y="437" width="0.0505%" height="15" fill="rgb(228,204,25)" fg:x="2124" fg:w="4"/><text x="27.0614%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1 samples, 0.01%)</title><rect x="26.8493%" y="421" width="0.0126%" height="15" fill="rgb(207,153,8)" fg:x="2127" fg:w="1"/><text x="27.0993%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1 samples, 0.01%)</title><rect x="26.8493%" y="405" width="0.0126%" height="15" fill="rgb(242,9,16)" fg:x="2127" fg:w="1"/><text x="27.0993%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="26.8493%" y="389" width="0.0126%" height="15" fill="rgb(217,211,10)" fg:x="2127" fg:w="1"/><text x="27.0993%" y="399.50"></text></g><g><title>std::sync::poison::Flag::done (4 samples, 0.05%)</title><rect x="26.8619%" y="389" width="0.0505%" height="15" fill="rgb(219,228,52)" fg:x="2128" fg:w="4"/><text x="27.1119%" y="399.50"></text></g><g><title>std::thread::panicking (3 samples, 0.04%)</title><rect x="26.8745%" y="373" width="0.0379%" height="15" fill="rgb(231,92,29)" fg:x="2129" fg:w="3"/><text x="27.1245%" y="383.50"></text></g><g><title>std::panicking::panicking (3 samples, 0.04%)</title><rect x="26.8745%" y="357" width="0.0379%" height="15" fill="rgb(232,8,23)" fg:x="2129" fg:w="3"/><text x="27.1245%" y="367.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (3 samples, 0.04%)</title><rect x="26.8745%" y="341" width="0.0379%" height="15" fill="rgb(216,211,34)" fg:x="2129" fg:w="3"/><text x="27.1245%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="26.8871%" y="325" width="0.0252%" height="15" fill="rgb(236,151,0)" fg:x="2130" fg:w="2"/><text x="27.1371%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="26.8871%" y="309" width="0.0252%" height="15" fill="rgb(209,168,3)" fg:x="2130" fg:w="2"/><text x="27.1371%" y="319.50"></text></g><g><title>core::mem::drop (23 samples, 0.29%)</title><rect x="26.8619%" y="437" width="0.2903%" height="15" fill="rgb(208,129,28)" fg:x="2128" fg:w="23"/><text x="27.1119%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (23 samples, 0.29%)</title><rect x="26.8619%" y="421" width="0.2903%" height="15" fill="rgb(229,78,22)" fg:x="2128" fg:w="23"/><text x="27.1119%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.29%)</title><rect x="26.8619%" y="405" width="0.2903%" height="15" fill="rgb(228,187,13)" fg:x="2128" fg:w="23"/><text x="27.1119%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (19 samples, 0.24%)</title><rect x="26.9124%" y="389" width="0.2398%" height="15" fill="rgb(240,119,24)" fg:x="2132" fg:w="19"/><text x="27.1624%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.24%)</title><rect x="26.9124%" y="373" width="0.2398%" height="15" fill="rgb(209,194,42)" fg:x="2132" fg:w="19"/><text x="27.1624%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.24%)</title><rect x="26.9124%" y="357" width="0.2398%" height="15" fill="rgb(247,200,46)" fg:x="2132" fg:w="19"/><text x="27.1624%" y="367.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (7 samples, 0.09%)</title><rect x="27.1522%" y="437" width="0.0884%" height="15" fill="rgb(218,76,16)" fg:x="2151" fg:w="7"/><text x="27.4022%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.03%)</title><rect x="27.2153%" y="421" width="0.0252%" height="15" fill="rgb(225,21,48)" fg:x="2156" fg:w="2"/><text x="27.4653%" y="431.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (1 samples, 0.01%)</title><rect x="27.2406%" y="437" width="0.0126%" height="15" fill="rgb(239,223,50)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="447.50"></text></g><g><title>flume::async::AsyncSignal::new (1 samples, 0.01%)</title><rect x="27.2406%" y="421" width="0.0126%" height="15" fill="rgb(244,45,21)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="27.2406%" y="405" width="0.0126%" height="15" fill="rgb(232,33,43)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="415.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="27.2406%" y="389" width="0.0126%" height="15" fill="rgb(209,8,3)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="27.2406%" y="373" width="0.0126%" height="15" fill="rgb(214,25,53)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="27.2406%" y="357" width="0.0126%" height="15" fill="rgb(254,186,54)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="27.2406%" y="341" width="0.0126%" height="15" fill="rgb(208,174,49)" fg:x="2158" fg:w="1"/><text x="27.4906%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.01%)</title><rect x="27.2532%" y="389" width="0.0126%" height="15" fill="rgb(233,191,51)" fg:x="2159" fg:w="1"/><text x="27.5032%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.01%)</title><rect x="27.2532%" y="373" width="0.0126%" height="15" fill="rgb(222,134,10)" fg:x="2159" fg:w="1"/><text x="27.5032%" y="383.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (61 samples, 0.77%)</title><rect x="26.7483%" y="453" width="0.7700%" height="15" fill="rgb(230,226,20)" fg:x="2119" fg:w="61"/><text x="26.9983%" y="463.50"></text></g><g><title>flume::wait_lock (21 samples, 0.27%)</title><rect x="27.2532%" y="437" width="0.2651%" height="15" fill="rgb(251,111,25)" fg:x="2159" fg:w="21"/><text x="27.5032%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.27%)</title><rect x="27.2532%" y="421" width="0.2651%" height="15" fill="rgb(224,40,46)" fg:x="2159" fg:w="21"/><text x="27.5032%" y="431.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (21 samples, 0.27%)</title><rect x="27.2532%" y="405" width="0.2651%" height="15" fill="rgb(236,108,47)" fg:x="2159" fg:w="21"/><text x="27.5032%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.25%)</title><rect x="27.2658%" y="389" width="0.2525%" height="15" fill="rgb(234,93,0)" fg:x="2160" fg:w="20"/><text x="27.5158%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.25%)</title><rect x="27.2658%" y="373" width="0.2525%" height="15" fill="rgb(224,213,32)" fg:x="2160" fg:w="20"/><text x="27.5158%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (3 samples, 0.04%)</title><rect x="27.5183%" y="421" width="0.0379%" height="15" fill="rgb(251,11,48)" fg:x="2180" fg:w="3"/><text x="27.7683%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (3 samples, 0.04%)</title><rect x="27.5183%" y="405" width="0.0379%" height="15" fill="rgb(236,173,5)" fg:x="2180" fg:w="3"/><text x="27.7683%" y="415.50"></text></g><g><title>core::ptr::read (3 samples, 0.04%)</title><rect x="27.5183%" y="389" width="0.0379%" height="15" fill="rgb(230,95,12)" fg:x="2180" fg:w="3"/><text x="27.7683%" y="399.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.88%)</title><rect x="26.7104%" y="485" width="0.8836%" height="15" fill="rgb(232,209,1)" fg:x="2116" fg:w="70"/><text x="26.9604%" y="495.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (70 samples, 0.88%)</title><rect x="26.7104%" y="469" width="0.8836%" height="15" fill="rgb(232,6,1)" fg:x="2116" fg:w="70"/><text x="26.9604%" y="479.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (6 samples, 0.08%)</title><rect x="27.5183%" y="453" width="0.0757%" height="15" fill="rgb(210,224,50)" fg:x="2180" fg:w="6"/><text x="27.7683%" y="463.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (6 samples, 0.08%)</title><rect x="27.5183%" y="437" width="0.0757%" height="15" fill="rgb(228,127,35)" fg:x="2180" fg:w="6"/><text x="27.7683%" y="447.50"></text></g><g><title>flume::wait_lock (3 samples, 0.04%)</title><rect x="27.5562%" y="421" width="0.0379%" height="15" fill="rgb(245,102,45)" fg:x="2183" fg:w="3"/><text x="27.8062%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.04%)</title><rect x="27.5562%" y="405" width="0.0379%" height="15" fill="rgb(214,1,49)" fg:x="2183" fg:w="3"/><text x="27.8062%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (3 samples, 0.04%)</title><rect x="27.5562%" y="389" width="0.0379%" height="15" fill="rgb(226,163,40)" fg:x="2183" fg:w="3"/><text x="27.8062%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.04%)</title><rect x="27.5562%" y="373" width="0.0379%" height="15" fill="rgb(239,212,28)" fg:x="2183" fg:w="3"/><text x="27.8062%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.04%)</title><rect x="27.5562%" y="357" width="0.0379%" height="15" fill="rgb(220,20,13)" fg:x="2183" fg:w="3"/><text x="27.8062%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="27.6067%" y="421" width="0.0126%" height="15" fill="rgb(210,164,35)" fg:x="2187" fg:w="1"/><text x="27.8567%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="27.6067%" y="405" width="0.0126%" height="15" fill="rgb(248,109,41)" fg:x="2187" fg:w="1"/><text x="27.8567%" y="415.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="27.6067%" y="389" width="0.0126%" height="15" fill="rgb(238,23,50)" fg:x="2187" fg:w="1"/><text x="27.8567%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="27.6067%" y="373" width="0.0126%" height="15" fill="rgb(211,48,49)" fg:x="2187" fg:w="1"/><text x="27.8567%" y="383.50"></text></g><g><title>&lt;event_listener::sys::ListLock&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="27.6193%" y="405" width="0.0126%" height="15" fill="rgb(223,36,21)" fg:x="2188" fg:w="1"/><text x="27.8693%" y="415.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.01%)</title><rect x="27.6319%" y="373" width="0.0126%" height="15" fill="rgb(207,123,46)" fg:x="2189" fg:w="1"/><text x="27.8819%" y="383.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="27.6319%" y="357" width="0.0126%" height="15" fill="rgb(240,218,32)" fg:x="2189" fg:w="1"/><text x="27.8819%" y="367.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="27.6319%" y="341" width="0.0126%" height="15" fill="rgb(252,5,43)" fg:x="2189" fg:w="1"/><text x="27.8819%" y="351.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="27.6319%" y="325" width="0.0126%" height="15" fill="rgb(252,84,19)" fg:x="2189" fg:w="1"/><text x="27.8819%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (8 samples, 0.10%)</title><rect x="27.6193%" y="421" width="0.1010%" height="15" fill="rgb(243,152,39)" fg:x="2188" fg:w="8"/><text x="27.8693%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (7 samples, 0.09%)</title><rect x="27.6319%" y="405" width="0.0884%" height="15" fill="rgb(234,160,15)" fg:x="2189" fg:w="7"/><text x="27.8819%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.09%)</title><rect x="27.6319%" y="389" width="0.0884%" height="15" fill="rgb(237,34,20)" fg:x="2189" fg:w="7"/><text x="27.8819%" y="399.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (6 samples, 0.08%)</title><rect x="27.6445%" y="373" width="0.0757%" height="15" fill="rgb(229,97,13)" fg:x="2190" fg:w="6"/><text x="27.8945%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (6 samples, 0.08%)</title><rect x="27.6445%" y="357" width="0.0757%" height="15" fill="rgb(234,71,50)" fg:x="2190" fg:w="6"/><text x="27.8945%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.08%)</title><rect x="27.6445%" y="341" width="0.0757%" height="15" fill="rgb(253,155,4)" fg:x="2190" fg:w="6"/><text x="27.8945%" y="351.50"></text></g><g><title>event_listener::TaskRef::into_task (10 samples, 0.13%)</title><rect x="27.7203%" y="421" width="0.1262%" height="15" fill="rgb(222,185,37)" fg:x="2196" fg:w="10"/><text x="27.9703%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (10 samples, 0.13%)</title><rect x="27.7203%" y="405" width="0.1262%" height="15" fill="rgb(251,177,13)" fg:x="2196" fg:w="10"/><text x="27.9703%" y="415.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (9 samples, 0.11%)</title><rect x="27.7329%" y="389" width="0.1136%" height="15" fill="rgb(250,179,40)" fg:x="2197" fg:w="9"/><text x="27.9829%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (8 samples, 0.10%)</title><rect x="27.7455%" y="373" width="0.1010%" height="15" fill="rgb(242,44,2)" fg:x="2198" fg:w="8"/><text x="27.9955%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (8 samples, 0.10%)</title><rect x="27.7455%" y="357" width="0.1010%" height="15" fill="rgb(216,177,13)" fg:x="2198" fg:w="8"/><text x="27.9955%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (8 samples, 0.10%)</title><rect x="27.7455%" y="341" width="0.1010%" height="15" fill="rgb(216,106,43)" fg:x="2198" fg:w="8"/><text x="27.9955%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (122 samples, 1.54%)</title><rect x="26.4201%" y="549" width="1.5400%" height="15" fill="rgb(216,183,2)" fg:x="2093" fg:w="122"/><text x="26.6701%" y="559.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (122 samples, 1.54%)</title><rect x="26.4201%" y="533" width="1.5400%" height="15" fill="rgb(249,75,3)" fg:x="2093" fg:w="122"/><text x="26.6701%" y="543.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (99 samples, 1.25%)</title><rect x="26.7104%" y="517" width="1.2497%" height="15" fill="rgb(219,67,39)" fg:x="2116" fg:w="99"/><text x="26.9604%" y="527.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (99 samples, 1.25%)</title><rect x="26.7104%" y="501" width="1.2497%" height="15" fill="rgb(253,228,2)" fg:x="2116" fg:w="99"/><text x="26.9604%" y="511.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (29 samples, 0.37%)</title><rect x="27.5940%" y="485" width="0.3661%" height="15" fill="rgb(235,138,27)" fg:x="2186" fg:w="29"/><text x="27.8440%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.37%)</title><rect x="27.5940%" y="469" width="0.3661%" height="15" fill="rgb(236,97,51)" fg:x="2186" fg:w="29"/><text x="27.8440%" y="479.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (29 samples, 0.37%)</title><rect x="27.5940%" y="453" width="0.3661%" height="15" fill="rgb(240,80,30)" fg:x="2186" fg:w="29"/><text x="27.8440%" y="463.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (29 samples, 0.37%)</title><rect x="27.5940%" y="437" width="0.3661%" height="15" fill="rgb(230,178,19)" fg:x="2186" fg:w="29"/><text x="27.8440%" y="447.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (9 samples, 0.11%)</title><rect x="27.8465%" y="421" width="0.1136%" height="15" fill="rgb(210,190,27)" fg:x="2206" fg:w="9"/><text x="28.0965%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.11%)</title><rect x="27.8465%" y="405" width="0.1136%" height="15" fill="rgb(222,107,31)" fg:x="2206" fg:w="9"/><text x="28.0965%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (9 samples, 0.11%)</title><rect x="27.8465%" y="389" width="0.1136%" height="15" fill="rgb(216,127,34)" fg:x="2206" fg:w="9"/><text x="28.0965%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.11%)</title><rect x="27.8465%" y="373" width="0.1136%" height="15" fill="rgb(234,116,52)" fg:x="2206" fg:w="9"/><text x="28.0965%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.11%)</title><rect x="27.8465%" y="357" width="0.1136%" height="15" fill="rgb(222,124,15)" fg:x="2206" fg:w="9"/><text x="28.0965%" y="367.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.01%)</title><rect x="27.9601%" y="501" width="0.0126%" height="15" fill="rgb(231,179,28)" fg:x="2215" fg:w="1"/><text x="28.2101%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (23 samples, 0.29%)</title><rect x="27.9601%" y="533" width="0.2903%" height="15" fill="rgb(226,93,45)" fg:x="2215" fg:w="23"/><text x="28.2101%" y="543.50"></text></g><g><title>core::ptr::swap (23 samples, 0.29%)</title><rect x="27.9601%" y="517" width="0.2903%" height="15" fill="rgb(215,8,51)" fg:x="2215" fg:w="23"/><text x="28.2101%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.28%)</title><rect x="27.9727%" y="501" width="0.2777%" height="15" fill="rgb(223,106,5)" fg:x="2216" fg:w="22"/><text x="28.2227%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="28.2504%" y="469" width="0.0126%" height="15" fill="rgb(250,191,5)" fg:x="2238" fg:w="1"/><text x="28.5004%" y="479.50"></text></g><g><title>futures_util::async_await::random::random::RNG::_{{constant}}::_{{closure}} (1 samples, 0.01%)</title><rect x="28.2504%" y="453" width="0.0126%" height="15" fill="rgb(242,132,44)" fg:x="2238" fg:w="1"/><text x="28.5004%" y="463.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1 samples, 0.01%)</title><rect x="28.2504%" y="437" width="0.0126%" height="15" fill="rgb(251,152,29)" fg:x="2238" fg:w="1"/><text x="28.5004%" y="447.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (1 samples, 0.01%)</title><rect x="28.2631%" y="453" width="0.0126%" height="15" fill="rgb(218,179,5)" fg:x="2239" fg:w="1"/><text x="28.5131%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (1 samples, 0.01%)</title><rect x="28.2631%" y="437" width="0.0126%" height="15" fill="rgb(227,67,19)" fg:x="2239" fg:w="1"/><text x="28.5131%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (1 samples, 0.01%)</title><rect x="28.2631%" y="421" width="0.0126%" height="15" fill="rgb(233,119,31)" fg:x="2239" fg:w="1"/><text x="28.5131%" y="431.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (162 samples, 2.04%)</title><rect x="26.2434%" y="581" width="2.0449%" height="15" fill="rgb(241,120,22)" fg:x="2079" fg:w="162"/><text x="26.4934%" y="591.50">&lt;..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (162 samples, 2.04%)</title><rect x="26.2434%" y="565" width="2.0449%" height="15" fill="rgb(224,102,30)" fg:x="2079" fg:w="162"/><text x="26.4934%" y="575.50">w..</text></g><g><title>futures_util::async_await::random::shuffle (26 samples, 0.33%)</title><rect x="27.9601%" y="549" width="0.3282%" height="15" fill="rgb(210,164,37)" fg:x="2215" fg:w="26"/><text x="28.2101%" y="559.50"></text></g><g><title>futures_util::async_await::random::gen_index (3 samples, 0.04%)</title><rect x="28.2504%" y="533" width="0.0379%" height="15" fill="rgb(226,191,16)" fg:x="2238" fg:w="3"/><text x="28.5004%" y="543.50"></text></g><g><title>futures_util::async_await::random::random (3 samples, 0.04%)</title><rect x="28.2504%" y="517" width="0.0379%" height="15" fill="rgb(214,40,45)" fg:x="2238" fg:w="3"/><text x="28.5004%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.04%)</title><rect x="28.2504%" y="501" width="0.0379%" height="15" fill="rgb(244,29,26)" fg:x="2238" fg:w="3"/><text x="28.5004%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.04%)</title><rect x="28.2504%" y="485" width="0.0379%" height="15" fill="rgb(216,16,5)" fg:x="2238" fg:w="3"/><text x="28.5004%" y="495.50"></text></g><g><title>futures_util::async_await::random::random::_{{closure}} (2 samples, 0.03%)</title><rect x="28.2631%" y="469" width="0.0252%" height="15" fill="rgb(249,76,35)" fg:x="2239" fg:w="2"/><text x="28.5131%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="28.2757%" y="453" width="0.0126%" height="15" fill="rgb(207,11,44)" fg:x="2240" fg:w="1"/><text x="28.5257%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="28.2757%" y="437" width="0.0126%" height="15" fill="rgb(228,190,49)" fg:x="2240" fg:w="1"/><text x="28.5257%" y="447.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="28.2757%" y="421" width="0.0126%" height="15" fill="rgb(214,173,12)" fg:x="2240" fg:w="1"/><text x="28.5257%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="28.2757%" y="405" width="0.0126%" height="15" fill="rgb(218,26,35)" fg:x="2240" fg:w="1"/><text x="28.5257%" y="415.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_ref (2 samples, 0.03%)</title><rect x="28.3262%" y="533" width="0.0252%" height="15" fill="rgb(220,200,19)" fg:x="2244" fg:w="2"/><text x="28.5762%" y="543.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (2 samples, 0.03%)</title><rect x="28.3262%" y="517" width="0.0252%" height="15" fill="rgb(239,95,49)" fg:x="2244" fg:w="2"/><text x="28.5762%" y="527.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (2 samples, 0.03%)</title><rect x="28.3262%" y="501" width="0.0252%" height="15" fill="rgb(235,85,53)" fg:x="2244" fg:w="2"/><text x="28.5762%" y="511.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::as_any (2 samples, 0.03%)</title><rect x="28.3514%" y="533" width="0.0252%" height="15" fill="rgb(233,133,31)" fg:x="2246" fg:w="2"/><text x="28.6014%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.03%)</title><rect x="28.3767%" y="485" width="0.0252%" height="15" fill="rgb(218,25,20)" fg:x="2248" fg:w="2"/><text x="28.6267%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;,&amp;alloc::alloc::Global&gt;&gt; (2 samples, 0.03%)</title><rect x="28.3767%" y="469" width="0.0252%" height="15" fill="rgb(252,210,38)" fg:x="2248" fg:w="2"/><text x="28.6267%" y="479.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="28.3767%" y="453" width="0.0252%" height="15" fill="rgb(242,134,21)" fg:x="2248" fg:w="2"/><text x="28.6267%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="28.3767%" y="437" width="0.0252%" height="15" fill="rgb(213,28,48)" fg:x="2248" fg:w="2"/><text x="28.6267%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="28.3767%" y="421" width="0.0252%" height="15" fill="rgb(250,196,2)" fg:x="2248" fg:w="2"/><text x="28.6267%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::AsyncSignal&gt; (5 samples, 0.06%)</title><rect x="28.4019%" y="469" width="0.0631%" height="15" fill="rgb(227,5,17)" fg:x="2250" fg:w="5"/><text x="28.6519%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.10%)</title><rect x="28.3767%" y="501" width="0.1010%" height="15" fill="rgb(221,226,24)" fg:x="2248" fg:w="8"/><text x="28.6267%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt; (6 samples, 0.08%)</title><rect x="28.4019%" y="485" width="0.0757%" height="15" fill="rgb(211,5,48)" fg:x="2250" fg:w="6"/><text x="28.6519%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.01%)</title><rect x="28.4650%" y="469" width="0.0126%" height="15" fill="rgb(219,150,6)" fg:x="2255" fg:w="1"/><text x="28.7150%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (1 samples, 0.01%)</title><rect x="28.4650%" y="453" width="0.0126%" height="15" fill="rgb(251,46,16)" fg:x="2255" fg:w="1"/><text x="28.7150%" y="463.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.01%)</title><rect x="28.4650%" y="437" width="0.0126%" height="15" fill="rgb(220,204,40)" fg:x="2255" fg:w="1"/><text x="28.7150%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="28.4650%" y="421" width="0.0126%" height="15" fill="rgb(211,85,2)" fg:x="2255" fg:w="1"/><text x="28.7150%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="28.4650%" y="405" width="0.0126%" height="15" fill="rgb(229,17,7)" fg:x="2255" fg:w="1"/><text x="28.7150%" y="415.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="28.4777%" y="501" width="0.0126%" height="15" fill="rgb(239,72,28)" fg:x="2256" fg:w="1"/><text x="28.7277%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="28.4777%" y="485" width="0.0126%" height="15" fill="rgb(230,47,54)" fg:x="2256" fg:w="1"/><text x="28.7277%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt; (11 samples, 0.14%)</title><rect x="28.3767%" y="533" width="0.1389%" height="15" fill="rgb(214,50,8)" fg:x="2248" fg:w="11"/><text x="28.6267%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.14%)</title><rect x="28.3767%" y="517" width="0.1389%" height="15" fill="rgb(216,198,43)" fg:x="2248" fg:w="11"/><text x="28.6267%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="28.4903%" y="501" width="0.0252%" height="15" fill="rgb(234,20,35)" fg:x="2257" fg:w="2"/><text x="28.7403%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="28.4903%" y="485" width="0.0252%" height="15" fill="rgb(254,45,19)" fg:x="2257" fg:w="2"/><text x="28.7403%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="28.5155%" y="533" width="0.0126%" height="15" fill="rgb(219,14,44)" fg:x="2259" fg:w="1"/><text x="28.7655%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="28.5155%" y="517" width="0.0126%" height="15" fill="rgb(217,220,26)" fg:x="2259" fg:w="1"/><text x="28.7655%" y="527.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1 samples, 0.01%)</title><rect x="28.5155%" y="501" width="0.0126%" height="15" fill="rgb(213,158,28)" fg:x="2259" fg:w="1"/><text x="28.7655%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="28.5281%" y="533" width="0.0126%" height="15" fill="rgb(252,51,52)" fg:x="2260" fg:w="1"/><text x="28.7781%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="28.5281%" y="517" width="0.0126%" height="15" fill="rgb(246,89,16)" fg:x="2260" fg:w="1"/><text x="28.7781%" y="527.50"></text></g><g><title>flume::Chan&lt;T&gt;::try_wake_receiver_if_pending (1 samples, 0.01%)</title><rect x="28.5408%" y="533" width="0.0126%" height="15" fill="rgb(216,158,49)" fg:x="2261" fg:w="1"/><text x="28.7908%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.01%)</title><rect x="28.5408%" y="517" width="0.0126%" height="15" fill="rgb(236,107,19)" fg:x="2261" fg:w="1"/><text x="28.7908%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.01%)</title><rect x="28.5408%" y="501" width="0.0126%" height="15" fill="rgb(228,185,30)" fg:x="2261" fg:w="1"/><text x="28.7908%" y="511.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.28%)</title><rect x="28.2883%" y="565" width="0.2777%" height="15" fill="rgb(246,134,8)" fg:x="2241" fg:w="22"/><text x="28.5383%" y="575.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (22 samples, 0.28%)</title><rect x="28.2883%" y="549" width="0.2777%" height="15" fill="rgb(214,143,50)" fg:x="2241" fg:w="22"/><text x="28.5383%" y="559.50"></text></g><g><title>flume::wait_lock (1 samples, 0.01%)</title><rect x="28.5534%" y="533" width="0.0126%" height="15" fill="rgb(228,75,8)" fg:x="2262" fg:w="1"/><text x="28.8034%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="28.5534%" y="517" width="0.0126%" height="15" fill="rgb(207,175,4)" fg:x="2262" fg:w="1"/><text x="28.8034%" y="527.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.01%)</title><rect x="28.5534%" y="501" width="0.0126%" height="15" fill="rgb(205,108,24)" fg:x="2262" fg:w="1"/><text x="28.8034%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.01%)</title><rect x="28.5534%" y="485" width="0.0126%" height="15" fill="rgb(244,120,49)" fg:x="2262" fg:w="1"/><text x="28.8034%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="28.5534%" y="469" width="0.0126%" height="15" fill="rgb(223,47,38)" fg:x="2262" fg:w="1"/><text x="28.8034%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,flume::async::AsyncSignal&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="28.5660%" y="565" width="0.0126%" height="15" fill="rgb(229,179,11)" fg:x="2263" fg:w="1"/><text x="28.8160%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (24 samples, 0.30%)</title><rect x="28.2883%" y="581" width="0.3030%" height="15" fill="rgb(231,122,1)" fg:x="2241" fg:w="24"/><text x="28.5383%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::OwnedOrRef&lt;flume::Receiver&lt;bytes::bytes::Bytes&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="28.5786%" y="565" width="0.0126%" height="15" fill="rgb(245,119,9)" fg:x="2264" fg:w="1"/><text x="28.8286%" y="575.50"></text></g><g><title>cfree (29 samples, 0.37%)</title><rect x="28.5913%" y="549" width="0.3661%" height="15" fill="rgb(241,163,25)" fg:x="2265" fg:w="29"/><text x="28.8413%" y="559.50"></text></g><g><title>[libc.so.6] (18 samples, 0.23%)</title><rect x="28.7301%" y="533" width="0.2272%" height="15" fill="rgb(217,214,3)" fg:x="2276" fg:w="18"/><text x="28.9801%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="28.9573%" y="453" width="0.0126%" height="15" fill="rgb(240,86,28)" fg:x="2294" fg:w="1"/><text x="29.2073%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="28.9573%" y="437" width="0.0126%" height="15" fill="rgb(215,47,9)" fg:x="2294" fg:w="1"/><text x="29.2073%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt; (18 samples, 0.23%)</title><rect x="28.9573%" y="485" width="0.2272%" height="15" fill="rgb(252,25,45)" fg:x="2294" fg:w="18"/><text x="29.2073%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.23%)</title><rect x="28.9573%" y="469" width="0.2272%" height="15" fill="rgb(251,164,9)" fg:x="2294" fg:w="18"/><text x="29.2073%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.21%)</title><rect x="28.9700%" y="453" width="0.2146%" height="15" fill="rgb(233,194,0)" fg:x="2295" fg:w="17"/><text x="29.2200%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.21%)</title><rect x="28.9700%" y="437" width="0.2146%" height="15" fill="rgb(249,111,24)" fg:x="2295" fg:w="17"/><text x="29.2200%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.03%)</title><rect x="29.1972%" y="453" width="0.0252%" height="15" fill="rgb(250,223,3)" fg:x="2313" fg:w="2"/><text x="29.4472%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="29.1972%" y="437" width="0.0252%" height="15" fill="rgb(236,178,37)" fg:x="2313" fg:w="2"/><text x="29.4472%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::State&lt;()&gt;&gt;&gt; (17 samples, 0.21%)</title><rect x="29.2224%" y="453" width="0.2146%" height="15" fill="rgb(241,158,50)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&lt;()&gt;&gt; (17 samples, 0.21%)</title><rect x="29.2224%" y="437" width="0.2146%" height="15" fill="rgb(213,121,41)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::Task&gt; (17 samples, 0.21%)</title><rect x="29.2224%" y="421" width="0.2146%" height="15" fill="rgb(240,92,3)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (17 samples, 0.21%)</title><rect x="29.2224%" y="405" width="0.2146%" height="15" fill="rgb(205,123,3)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (17 samples, 0.21%)</title><rect x="29.2224%" y="389" width="0.2146%" height="15" fill="rgb(205,97,47)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="399.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (17 samples, 0.21%)</title><rect x="29.2224%" y="373" width="0.2146%" height="15" fill="rgb(247,152,14)" fg:x="2315" fg:w="17"/><text x="29.4724%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (12 samples, 0.15%)</title><rect x="29.2855%" y="357" width="0.1515%" height="15" fill="rgb(248,195,53)" fg:x="2320" fg:w="12"/><text x="29.5355%" y="367.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (12 samples, 0.15%)</title><rect x="29.2855%" y="341" width="0.1515%" height="15" fill="rgb(226,201,16)" fg:x="2320" fg:w="12"/><text x="29.5355%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.15%)</title><rect x="29.2855%" y="325" width="0.1515%" height="15" fill="rgb(205,98,0)" fg:x="2320" fg:w="12"/><text x="29.5355%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.15%)</title><rect x="29.2855%" y="309" width="0.1515%" height="15" fill="rgb(214,191,48)" fg:x="2320" fg:w="12"/><text x="29.5355%" y="319.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.01%)</title><rect x="29.4496%" y="389" width="0.0126%" height="15" fill="rgb(237,112,39)" fg:x="2333" fg:w="1"/><text x="29.6996%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (17 samples, 0.21%)</title><rect x="29.4496%" y="437" width="0.2146%" height="15" fill="rgb(247,203,27)" fg:x="2333" fg:w="17"/><text x="29.6996%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (17 samples, 0.21%)</title><rect x="29.4496%" y="421" width="0.2146%" height="15" fill="rgb(235,124,28)" fg:x="2333" fg:w="17"/><text x="29.6996%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.21%)</title><rect x="29.4496%" y="405" width="0.2146%" height="15" fill="rgb(208,207,46)" fg:x="2333" fg:w="17"/><text x="29.6996%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (16 samples, 0.20%)</title><rect x="29.4623%" y="389" width="0.2020%" height="15" fill="rgb(234,176,4)" fg:x="2334" fg:w="16"/><text x="29.7123%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (16 samples, 0.20%)</title><rect x="29.4623%" y="373" width="0.2020%" height="15" fill="rgb(230,133,28)" fg:x="2334" fg:w="16"/><text x="29.7123%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.20%)</title><rect x="29.4623%" y="357" width="0.2020%" height="15" fill="rgb(211,137,40)" fg:x="2334" fg:w="16"/><text x="29.7123%" y="367.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="29.6642%" y="405" width="0.0252%" height="15" fill="rgb(254,35,13)" fg:x="2350" fg:w="2"/><text x="29.9142%" y="415.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.03%)</title><rect x="29.6642%" y="389" width="0.0252%" height="15" fill="rgb(225,49,51)" fg:x="2350" fg:w="2"/><text x="29.9142%" y="399.50"></text></g><g><title>std::thread::panicking (2 samples, 0.03%)</title><rect x="29.6642%" y="373" width="0.0252%" height="15" fill="rgb(251,10,15)" fg:x="2350" fg:w="2"/><text x="29.9142%" y="383.50"></text></g><g><title>std::panicking::panicking (2 samples, 0.03%)</title><rect x="29.6642%" y="357" width="0.0252%" height="15" fill="rgb(228,207,15)" fg:x="2350" fg:w="2"/><text x="29.9142%" y="367.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (2 samples, 0.03%)</title><rect x="29.6642%" y="341" width="0.0252%" height="15" fill="rgb(241,99,19)" fg:x="2350" fg:w="2"/><text x="29.9142%" y="351.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (17 samples, 0.21%)</title><rect x="29.6642%" y="437" width="0.2146%" height="15" fill="rgb(207,104,49)" fg:x="2350" fg:w="17"/><text x="29.9142%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.21%)</title><rect x="29.6642%" y="421" width="0.2146%" height="15" fill="rgb(234,99,18)" fg:x="2350" fg:w="17"/><text x="29.9142%" y="431.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (15 samples, 0.19%)</title><rect x="29.6895%" y="405" width="0.1893%" height="15" fill="rgb(213,191,49)" fg:x="2352" fg:w="15"/><text x="29.9395%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.19%)</title><rect x="29.6895%" y="389" width="0.1893%" height="15" fill="rgb(210,226,19)" fg:x="2352" fg:w="15"/><text x="29.9395%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.19%)</title><rect x="29.6895%" y="373" width="0.1893%" height="15" fill="rgb(229,97,18)" fg:x="2352" fg:w="15"/><text x="29.9395%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;event_listener::EventListener&gt;&gt; (109 samples, 1.38%)</title><rect x="28.5913%" y="581" width="1.3759%" height="15" fill="rgb(211,167,15)" fg:x="2265" fg:w="109"/><text x="28.8413%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (109 samples, 1.38%)</title><rect x="28.5913%" y="565" width="1.3759%" height="15" fill="rgb(210,169,34)" fg:x="2265" fg:w="109"/><text x="28.8413%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (80 samples, 1.01%)</title><rect x="28.9573%" y="549" width="1.0098%" height="15" fill="rgb(241,121,31)" fg:x="2294" fg:w="80"/><text x="29.2073%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (80 samples, 1.01%)</title><rect x="28.9573%" y="533" width="1.0098%" height="15" fill="rgb(232,40,11)" fg:x="2294" fg:w="80"/><text x="29.2073%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (80 samples, 1.01%)</title><rect x="28.9573%" y="517" width="1.0098%" height="15" fill="rgb(205,86,26)" fg:x="2294" fg:w="80"/><text x="29.2073%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt; (80 samples, 1.01%)</title><rect x="28.9573%" y="501" width="1.0098%" height="15" fill="rgb(231,126,28)" fg:x="2294" fg:w="80"/><text x="29.2073%" y="511.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop (62 samples, 0.78%)</title><rect x="29.1845%" y="485" width="0.7826%" height="15" fill="rgb(219,221,18)" fg:x="2312" fg:w="62"/><text x="29.4345%" y="495.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop::__drop_inner (62 samples, 0.78%)</title><rect x="29.1845%" y="469" width="0.7826%" height="15" fill="rgb(211,40,0)" fg:x="2312" fg:w="62"/><text x="29.4345%" y="479.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::remove (42 samples, 0.53%)</title><rect x="29.4370%" y="453" width="0.5302%" height="15" fill="rgb(239,85,43)" fg:x="2332" fg:w="42"/><text x="29.6870%" y="463.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (7 samples, 0.09%)</title><rect x="29.8788%" y="437" width="0.0884%" height="15" fill="rgb(231,55,21)" fg:x="2367" fg:w="7"/><text x="30.1288%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="29.9546%" y="421" width="0.0126%" height="15" fill="rgb(225,184,43)" fg:x="2373" fg:w="1"/><text x="30.2046%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="29.9672%" y="581" width="0.0126%" height="15" fill="rgb(251,158,41)" fg:x="2374" fg:w="1"/><text x="30.2172%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="29.9672%" y="565" width="0.0126%" height="15" fill="rgb(234,159,37)" fg:x="2374" fg:w="1"/><text x="30.2172%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.24%)</title><rect x="29.9798%" y="565" width="0.2398%" height="15" fill="rgb(216,204,22)" fg:x="2375" fg:w="19"/><text x="30.2298%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.24%)</title><rect x="29.9798%" y="549" width="0.2398%" height="15" fill="rgb(214,17,3)" fg:x="2375" fg:w="19"/><text x="30.2298%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.24%)</title><rect x="29.9798%" y="533" width="0.2398%" height="15" fill="rgb(212,111,17)" fg:x="2375" fg:w="19"/><text x="30.2298%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (22 samples, 0.28%)</title><rect x="30.2196%" y="565" width="0.2777%" height="15" fill="rgb(221,157,24)" fg:x="2394" fg:w="22"/><text x="30.4696%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.28%)</title><rect x="30.2196%" y="549" width="0.2777%" height="15" fill="rgb(252,16,13)" fg:x="2394" fg:w="22"/><text x="30.4696%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.25%)</title><rect x="30.2449%" y="533" width="0.2525%" height="15" fill="rgb(221,62,2)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.25%)</title><rect x="30.2449%" y="517" width="0.2525%" height="15" fill="rgb(247,87,22)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.25%)</title><rect x="30.2449%" y="501" width="0.2525%" height="15" fill="rgb(215,73,9)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="511.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.25%)</title><rect x="30.2449%" y="485" width="0.2525%" height="15" fill="rgb(207,175,33)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="495.50"></text></g><g><title>__rdl_alloc (20 samples, 0.25%)</title><rect x="30.2449%" y="469" width="0.2525%" height="15" fill="rgb(243,129,54)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="479.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.25%)</title><rect x="30.2449%" y="453" width="0.2525%" height="15" fill="rgb(227,119,45)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="463.50"></text></g><g><title>malloc (20 samples, 0.25%)</title><rect x="30.2449%" y="437" width="0.2525%" height="15" fill="rgb(205,109,36)" fg:x="2396" fg:w="20"/><text x="30.4949%" y="447.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (1 samples, 0.01%)</title><rect x="30.4973%" y="565" width="0.0126%" height="15" fill="rgb(205,6,39)" fg:x="2416" fg:w="1"/><text x="30.7473%" y="575.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="30.5352%" y="533" width="0.0126%" height="15" fill="rgb(221,32,16)" fg:x="2419" fg:w="1"/><text x="30.7852%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="30.5352%" y="517" width="0.0126%" height="15" fill="rgb(228,144,50)" fg:x="2419" fg:w="1"/><text x="30.7852%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.01%)</title><rect x="30.5478%" y="533" width="0.0126%" height="15" fill="rgb(229,201,53)" fg:x="2420" fg:w="1"/><text x="30.7978%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="30.5478%" y="517" width="0.0126%" height="15" fill="rgb(249,153,27)" fg:x="2420" fg:w="1"/><text x="30.7978%" y="527.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (2 samples, 0.03%)</title><rect x="30.5605%" y="533" width="0.0252%" height="15" fill="rgb(227,106,25)" fg:x="2421" fg:w="2"/><text x="30.8105%" y="543.50"></text></g><g><title>std::sync::poison::Flag::done (2 samples, 0.03%)</title><rect x="30.5857%" y="485" width="0.0252%" height="15" fill="rgb(230,65,29)" fg:x="2423" fg:w="2"/><text x="30.8357%" y="495.50"></text></g><g><title>std::thread::panicking (1 samples, 0.01%)</title><rect x="30.5983%" y="469" width="0.0126%" height="15" fill="rgb(221,57,46)" fg:x="2424" fg:w="1"/><text x="30.8483%" y="479.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.01%)</title><rect x="30.5983%" y="453" width="0.0126%" height="15" fill="rgb(229,161,17)" fg:x="2424" fg:w="1"/><text x="30.8483%" y="463.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.01%)</title><rect x="30.5983%" y="437" width="0.0126%" height="15" fill="rgb(222,213,11)" fg:x="2424" fg:w="1"/><text x="30.8483%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (14 samples, 0.18%)</title><rect x="30.5857%" y="533" width="0.1767%" height="15" fill="rgb(235,35,13)" fg:x="2423" fg:w="14"/><text x="30.8357%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (14 samples, 0.18%)</title><rect x="30.5857%" y="517" width="0.1767%" height="15" fill="rgb(233,158,34)" fg:x="2423" fg:w="14"/><text x="30.8357%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.18%)</title><rect x="30.5857%" y="501" width="0.1767%" height="15" fill="rgb(215,151,48)" fg:x="2423" fg:w="14"/><text x="30.8357%" y="511.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (12 samples, 0.15%)</title><rect x="30.6110%" y="485" width="0.1515%" height="15" fill="rgb(229,84,14)" fg:x="2425" fg:w="12"/><text x="30.8610%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (12 samples, 0.15%)</title><rect x="30.6110%" y="469" width="0.1515%" height="15" fill="rgb(229,68,14)" fg:x="2425" fg:w="12"/><text x="30.8610%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (12 samples, 0.15%)</title><rect x="30.6110%" y="453" width="0.1515%" height="15" fill="rgb(243,106,26)" fg:x="2425" fg:w="12"/><text x="30.8610%" y="463.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.01%)</title><rect x="30.7624%" y="469" width="0.0126%" height="15" fill="rgb(206,45,38)" fg:x="2437" fg:w="1"/><text x="31.0124%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="30.7624%" y="453" width="0.0126%" height="15" fill="rgb(226,6,15)" fg:x="2437" fg:w="1"/><text x="31.0124%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="30.7624%" y="437" width="0.0126%" height="15" fill="rgb(232,22,54)" fg:x="2437" fg:w="1"/><text x="31.0124%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="30.7624%" y="501" width="0.0379%" height="15" fill="rgb(229,222,32)" fg:x="2437" fg:w="3"/><text x="31.0124%" y="511.50"></text></g><g><title>std::sync::poison::Flag::guard (3 samples, 0.04%)</title><rect x="30.7624%" y="485" width="0.0379%" height="15" fill="rgb(228,62,29)" fg:x="2437" fg:w="3"/><text x="31.0124%" y="495.50"></text></g><g><title>std::thread::panicking (2 samples, 0.03%)</title><rect x="30.7751%" y="469" width="0.0252%" height="15" fill="rgb(251,103,34)" fg:x="2438" fg:w="2"/><text x="31.0251%" y="479.50"></text></g><g><title>std::panicking::panicking (2 samples, 0.03%)</title><rect x="30.7751%" y="453" width="0.0252%" height="15" fill="rgb(233,12,30)" fg:x="2438" fg:w="2"/><text x="31.0251%" y="463.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (2 samples, 0.03%)</title><rect x="30.7751%" y="437" width="0.0252%" height="15" fill="rgb(238,52,0)" fg:x="2438" fg:w="2"/><text x="31.0251%" y="447.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (77 samples, 0.97%)</title><rect x="29.9798%" y="581" width="0.9720%" height="15" fill="rgb(223,98,5)" fg:x="2375" fg:w="77"/><text x="30.2298%" y="591.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::listen (35 samples, 0.44%)</title><rect x="30.5100%" y="565" width="0.4418%" height="15" fill="rgb(228,75,37)" fg:x="2417" fg:w="35"/><text x="30.7600%" y="575.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::insert (35 samples, 0.44%)</title><rect x="30.5100%" y="549" width="0.4418%" height="15" fill="rgb(205,115,49)" fg:x="2417" fg:w="35"/><text x="30.7600%" y="559.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (15 samples, 0.19%)</title><rect x="30.7624%" y="533" width="0.1893%" height="15" fill="rgb(250,154,43)" fg:x="2437" fg:w="15"/><text x="31.0124%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.19%)</title><rect x="30.7624%" y="517" width="0.1893%" height="15" fill="rgb(226,43,29)" fg:x="2437" fg:w="15"/><text x="31.0124%" y="527.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (12 samples, 0.15%)</title><rect x="30.8003%" y="501" width="0.1515%" height="15" fill="rgb(249,228,39)" fg:x="2440" fg:w="12"/><text x="31.0503%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.15%)</title><rect x="30.8003%" y="485" width="0.1515%" height="15" fill="rgb(216,79,43)" fg:x="2440" fg:w="12"/><text x="31.0503%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.15%)</title><rect x="30.8003%" y="469" width="0.1515%" height="15" fill="rgb(228,95,12)" fg:x="2440" fg:w="12"/><text x="31.0503%" y="479.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (391 samples, 4.94%)</title><rect x="26.0414%" y="597" width="4.9356%" height="15" fill="rgb(249,221,15)" fg:x="2063" fg:w="391"/><text x="26.2914%" y="607.50">wisp_m..</text></g><g><title>flume::async::&lt;impl flume::Receiver&lt;T&gt;&gt;::recv_async (2 samples, 0.03%)</title><rect x="30.9518%" y="581" width="0.0252%" height="15" fill="rgb(233,34,13)" fg:x="2452" fg:w="2"/><text x="31.2018%" y="591.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="30.9518%" y="565" width="0.0252%" height="15" fill="rgb(214,103,39)" fg:x="2452" fg:w="2"/><text x="31.2018%" y="575.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.03%)</title><rect x="31.1033%" y="485" width="0.0252%" height="15" fill="rgb(251,126,39)" fg:x="2464" fg:w="2"/><text x="31.3533%" y="495.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (7 samples, 0.09%)</title><rect x="31.1033%" y="501" width="0.0884%" height="15" fill="rgb(214,216,36)" fg:x="2464" fg:w="7"/><text x="31.3533%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.06%)</title><rect x="31.1285%" y="485" width="0.0631%" height="15" fill="rgb(220,221,8)" fg:x="2466" fg:w="5"/><text x="31.3785%" y="495.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="31.1285%" y="469" width="0.0631%" height="15" fill="rgb(240,216,3)" fg:x="2466" fg:w="5"/><text x="31.3785%" y="479.50"></text></g><g><title>&lt;wisp_mux::packet::PacketType as wisp_mux::packet::Encode&gt;::encode (9 samples, 0.11%)</title><rect x="31.0906%" y="517" width="0.1136%" height="15" fill="rgb(232,218,17)" fg:x="2463" fg:w="9"/><text x="31.3406%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::Payload&gt; (1 samples, 0.01%)</title><rect x="31.1916%" y="501" width="0.0126%" height="15" fill="rgb(229,163,45)" fg:x="2471" fg:w="1"/><text x="31.4416%" y="511.50"></text></g><g><title>&lt;wisp_mux::packet::Packet as wisp_mux::packet::Encode&gt;::encode (10 samples, 0.13%)</title><rect x="31.0906%" y="533" width="0.1262%" height="15" fill="rgb(231,110,42)" fg:x="2463" fg:w="10"/><text x="31.3406%" y="543.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u32_le (1 samples, 0.01%)</title><rect x="31.2042%" y="517" width="0.0126%" height="15" fill="rgb(208,170,48)" fg:x="2472" fg:w="1"/><text x="31.4542%" y="527.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (1 samples, 0.01%)</title><rect x="31.2042%" y="501" width="0.0126%" height="15" fill="rgb(239,116,25)" fg:x="2472" fg:w="1"/><text x="31.4542%" y="511.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.01%)</title><rect x="31.2042%" y="485" width="0.0126%" height="15" fill="rgb(219,200,50)" fg:x="2472" fg:w="1"/><text x="31.4542%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="31.2042%" y="469" width="0.0126%" height="15" fill="rgb(245,200,0)" fg:x="2472" fg:w="1"/><text x="31.4542%" y="479.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (31 samples, 0.39%)</title><rect x="31.0528%" y="565" width="0.3913%" height="15" fill="rgb(245,119,33)" fg:x="2460" fg:w="31"/><text x="31.3028%" y="575.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (31 samples, 0.39%)</title><rect x="31.0528%" y="549" width="0.3913%" height="15" fill="rgb(231,125,12)" fg:x="2460" fg:w="31"/><text x="31.3028%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (18 samples, 0.23%)</title><rect x="31.2169%" y="533" width="0.2272%" height="15" fill="rgb(216,96,41)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.23%)</title><rect x="31.2169%" y="517" width="0.2272%" height="15" fill="rgb(248,43,45)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.23%)</title><rect x="31.2169%" y="501" width="0.2272%" height="15" fill="rgb(217,222,7)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.23%)</title><rect x="31.2169%" y="485" width="0.2272%" height="15" fill="rgb(233,28,6)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (18 samples, 0.23%)</title><rect x="31.2169%" y="469" width="0.2272%" height="15" fill="rgb(231,218,15)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (18 samples, 0.23%)</title><rect x="31.2169%" y="453" width="0.2272%" height="15" fill="rgb(226,171,48)" fg:x="2473" fg:w="18"/><text x="31.4669%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.20%)</title><rect x="31.2421%" y="437" width="0.2020%" height="15" fill="rgb(235,201,9)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.20%)</title><rect x="31.2421%" y="421" width="0.2020%" height="15" fill="rgb(217,80,15)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="431.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.20%)</title><rect x="31.2421%" y="405" width="0.2020%" height="15" fill="rgb(219,152,8)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="415.50"></text></g><g><title>__rdl_alloc (16 samples, 0.20%)</title><rect x="31.2421%" y="389" width="0.2020%" height="15" fill="rgb(243,107,38)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.20%)</title><rect x="31.2421%" y="373" width="0.2020%" height="15" fill="rgb(231,17,5)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="383.50"></text></g><g><title>malloc (16 samples, 0.20%)</title><rect x="31.2421%" y="357" width="0.2020%" height="15" fill="rgb(209,25,54)" fg:x="2475" fg:w="16"/><text x="31.4921%" y="367.50"></text></g><g><title>wisp_mux::packet::Packet::new_data (1 samples, 0.01%)</title><rect x="31.4441%" y="565" width="0.0126%" height="15" fill="rgb(219,0,2)" fg:x="2491" fg:w="1"/><text x="31.6941%" y="575.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="31.6208%" y="549" width="0.0126%" height="15" fill="rgb(246,9,5)" fg:x="2505" fg:w="1"/><text x="31.8708%" y="559.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (1 samples, 0.01%)</title><rect x="31.6208%" y="533" width="0.0126%" height="15" fill="rgb(226,159,4)" fg:x="2505" fg:w="1"/><text x="31.8708%" y="543.50"></text></g><g><title>&lt;wisp_mux::Role as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="31.6334%" y="549" width="0.0126%" height="15" fill="rgb(219,175,34)" fg:x="2506" fg:w="1"/><text x="31.8834%" y="559.50"></text></g><g><title>&lt;wisp_mux::packet::StreamType as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="31.6460%" y="549" width="0.0126%" height="15" fill="rgb(236,10,46)" fg:x="2507" fg:w="1"/><text x="31.8960%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (3 samples, 0.04%)</title><rect x="31.6587%" y="549" width="0.0379%" height="15" fill="rgb(240,211,16)" fg:x="2508" fg:w="3"/><text x="31.9087%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.04%)</title><rect x="31.6587%" y="533" width="0.0379%" height="15" fill="rgb(205,3,43)" fg:x="2508" fg:w="3"/><text x="31.9087%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (5 samples, 0.06%)</title><rect x="31.6965%" y="549" width="0.0631%" height="15" fill="rgb(245,7,22)" fg:x="2511" fg:w="5"/><text x="31.9465%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="31.6965%" y="533" width="0.0631%" height="15" fill="rgb(239,132,32)" fg:x="2511" fg:w="5"/><text x="31.9465%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt; as wisp_mux::ws::WebSocketWrite&gt;::wisp_write_split (1 samples, 0.01%)</title><rect x="31.9111%" y="533" width="0.0126%" height="15" fill="rgb(228,202,34)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1 samples, 0.01%)</title><rect x="31.9111%" y="517" width="0.0126%" height="15" fill="rgb(254,200,22)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="31.9111%" y="501" width="0.0126%" height="15" fill="rgb(219,10,39)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="31.9111%" y="485" width="0.0126%" height="15" fill="rgb(226,210,39)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="31.9111%" y="469" width="0.0126%" height="15" fill="rgb(208,219,16)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="31.9111%" y="453" width="0.0126%" height="15" fill="rgb(216,158,51)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="31.9111%" y="437" width="0.0126%" height="15" fill="rgb(233,14,44)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="31.9111%" y="421" width="0.0126%" height="15" fill="rgb(237,97,39)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="431.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="31.9111%" y="405" width="0.0126%" height="15" fill="rgb(218,198,43)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="415.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="31.9111%" y="389" width="0.0126%" height="15" fill="rgb(231,104,20)" fg:x="2528" fg:w="1"/><text x="32.1611%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="32.3529%" y="453" width="0.0126%" height="15" fill="rgb(254,36,13)" fg:x="2563" fg:w="1"/><text x="32.6029%" y="463.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (7 samples, 0.09%)</title><rect x="32.4665%" y="437" width="0.0884%" height="15" fill="rgb(248,14,50)" fg:x="2572" fg:w="7"/><text x="32.7165%" y="447.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="32.5549%" y="437" width="0.0126%" height="15" fill="rgb(217,107,29)" fg:x="2579" fg:w="1"/><text x="32.8049%" y="447.50"></text></g><g><title>[libc.so.6] (8 samples, 0.10%)</title><rect x="32.8579%" y="245" width="0.1010%" height="15" fill="rgb(251,169,33)" fg:x="2603" fg:w="8"/><text x="33.1079%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (27 samples, 0.34%)</title><rect x="32.6559%" y="357" width="0.3408%" height="15" fill="rgb(217,108,32)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="367.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (27 samples, 0.34%)</title><rect x="32.6559%" y="341" width="0.3408%" height="15" fill="rgb(219,66,42)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="351.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (27 samples, 0.34%)</title><rect x="32.6559%" y="325" width="0.3408%" height="15" fill="rgb(206,180,7)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="335.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (27 samples, 0.34%)</title><rect x="32.6559%" y="309" width="0.3408%" height="15" fill="rgb(208,226,31)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="319.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (27 samples, 0.34%)</title><rect x="32.6559%" y="293" width="0.3408%" height="15" fill="rgb(218,26,49)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="303.50"></text></g><g><title>std::sys_common::net::TcpStream::write (27 samples, 0.34%)</title><rect x="32.6559%" y="277" width="0.3408%" height="15" fill="rgb(233,197,48)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="287.50"></text></g><g><title>__send (27 samples, 0.34%)</title><rect x="32.6559%" y="261" width="0.3408%" height="15" fill="rgb(252,181,51)" fg:x="2587" fg:w="27"/><text x="32.9059%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="32.9588%" y="245" width="0.0379%" height="15" fill="rgb(253,90,19)" fg:x="2611" fg:w="3"/><text x="33.2088%" y="255.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (2 samples, 0.03%)</title><rect x="33.0093%" y="325" width="0.0252%" height="15" fill="rgb(215,171,30)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="335.50"></text></g><g><title>tokio::runtime::context::budget (2 samples, 0.03%)</title><rect x="33.0093%" y="309" width="0.0252%" height="15" fill="rgb(214,222,9)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.03%)</title><rect x="33.0093%" y="293" width="0.0252%" height="15" fill="rgb(223,3,22)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="303.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (2 samples, 0.03%)</title><rect x="33.0093%" y="277" width="0.0252%" height="15" fill="rgb(225,196,46)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="287.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (2 samples, 0.03%)</title><rect x="33.0093%" y="261" width="0.0252%" height="15" fill="rgb(209,110,37)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="271.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (2 samples, 0.03%)</title><rect x="33.0093%" y="245" width="0.0252%" height="15" fill="rgb(249,89,12)" fg:x="2615" fg:w="2"/><text x="33.2593%" y="255.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (41 samples, 0.52%)</title><rect x="32.5802%" y="421" width="0.5175%" height="15" fill="rgb(226,27,33)" fg:x="2581" fg:w="41"/><text x="32.8302%" y="431.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (41 samples, 0.52%)</title><rect x="32.5802%" y="405" width="0.5175%" height="15" fill="rgb(213,82,22)" fg:x="2581" fg:w="41"/><text x="32.8302%" y="415.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (41 samples, 0.52%)</title><rect x="32.5802%" y="389" width="0.5175%" height="15" fill="rgb(248,140,0)" fg:x="2581" fg:w="41"/><text x="32.8302%" y="399.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (36 samples, 0.45%)</title><rect x="32.6433%" y="373" width="0.4544%" height="15" fill="rgb(228,106,3)" fg:x="2586" fg:w="36"/><text x="32.8933%" y="383.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (8 samples, 0.10%)</title><rect x="32.9967%" y="357" width="0.1010%" height="15" fill="rgb(209,23,37)" fg:x="2614" fg:w="8"/><text x="33.2467%" y="367.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (7 samples, 0.09%)</title><rect x="33.0093%" y="341" width="0.0884%" height="15" fill="rgb(241,93,50)" fg:x="2615" fg:w="7"/><text x="33.2593%" y="351.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (5 samples, 0.06%)</title><rect x="33.0346%" y="325" width="0.0631%" height="15" fill="rgb(253,46,43)" fg:x="2617" fg:w="5"/><text x="33.2846%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.06%)</title><rect x="33.0346%" y="309" width="0.0631%" height="15" fill="rgb(226,206,43)" fg:x="2617" fg:w="5"/><text x="33.2846%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="33.0346%" y="293" width="0.0631%" height="15" fill="rgb(217,54,7)" fg:x="2617" fg:w="5"/><text x="33.2846%" y="303.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (43 samples, 0.54%)</title><rect x="32.5675%" y="437" width="0.5428%" height="15" fill="rgb(223,5,52)" fg:x="2580" fg:w="43"/><text x="32.8175%" y="447.50"></text></g><g><title>core::mem::take (1 samples, 0.01%)</title><rect x="33.0977%" y="421" width="0.0126%" height="15" fill="rgb(206,52,46)" fg:x="2622" fg:w="1"/><text x="33.3477%" y="431.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="33.0977%" y="405" width="0.0126%" height="15" fill="rgb(253,136,11)" fg:x="2622" fg:w="1"/><text x="33.3477%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="33.0977%" y="389" width="0.0126%" height="15" fill="rgb(208,106,33)" fg:x="2622" fg:w="1"/><text x="33.3477%" y="399.50"></text></g><g><title>cfree (66 samples, 0.83%)</title><rect x="33.1734%" y="405" width="0.8331%" height="15" fill="rgb(206,54,4)" fg:x="2628" fg:w="66"/><text x="33.4234%" y="415.50"></text></g><g><title>[libc.so.6] (29 samples, 0.37%)</title><rect x="33.6405%" y="389" width="0.3661%" height="15" fill="rgb(213,3,15)" fg:x="2665" fg:w="29"/><text x="33.8905%" y="399.50"></text></g><g><title>[libc.so.6] (16 samples, 0.20%)</title><rect x="33.8046%" y="373" width="0.2020%" height="15" fill="rgb(252,211,39)" fg:x="2678" fg:w="16"/><text x="34.0546%" y="383.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="33.9561%" y="357" width="0.0505%" height="15" fill="rgb(223,6,36)" fg:x="2690" fg:w="4"/><text x="34.2061%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="34.0066%" y="405" width="0.0126%" height="15" fill="rgb(252,169,45)" fg:x="2694" fg:w="1"/><text x="34.2566%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="34.0066%" y="389" width="0.0126%" height="15" fill="rgb(212,48,26)" fg:x="2694" fg:w="1"/><text x="34.2566%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="34.0066%" y="373" width="0.0126%" height="15" fill="rgb(251,102,48)" fg:x="2694" fg:w="1"/><text x="34.2566%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.01%)</title><rect x="34.0066%" y="357" width="0.0126%" height="15" fill="rgb(243,208,16)" fg:x="2694" fg:w="1"/><text x="34.2566%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.01%)</title><rect x="34.0066%" y="341" width="0.0126%" height="15" fill="rgb(219,96,24)" fg:x="2694" fg:w="1"/><text x="34.2566%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::kind (1 samples, 0.01%)</title><rect x="34.0192%" y="373" width="0.0126%" height="15" fill="rgb(219,33,29)" fg:x="2695" fg:w="1"/><text x="34.2692%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (74 samples, 0.93%)</title><rect x="33.1103%" y="437" width="0.9341%" height="15" fill="rgb(223,176,5)" fg:x="2623" fg:w="74"/><text x="33.3603%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (74 samples, 0.93%)</title><rect x="33.1103%" y="421" width="0.9341%" height="15" fill="rgb(228,140,14)" fg:x="2623" fg:w="74"/><text x="33.3603%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (2 samples, 0.03%)</title><rect x="34.0192%" y="405" width="0.0252%" height="15" fill="rgb(217,179,31)" fg:x="2695" fg:w="2"/><text x="34.2692%" y="415.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="34.0192%" y="389" width="0.0252%" height="15" fill="rgb(230,9,30)" fg:x="2695" fg:w="2"/><text x="34.2692%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="34.0318%" y="373" width="0.0126%" height="15" fill="rgb(230,136,20)" fg:x="2696" fg:w="1"/><text x="34.2818%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="34.0318%" y="357" width="0.0126%" height="15" fill="rgb(215,210,22)" fg:x="2696" fg:w="1"/><text x="34.2818%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="34.0318%" y="341" width="0.0126%" height="15" fill="rgb(218,43,5)" fg:x="2696" fg:w="1"/><text x="34.2818%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.01%)</title><rect x="34.0318%" y="325" width="0.0126%" height="15" fill="rgb(216,11,5)" fg:x="2696" fg:w="1"/><text x="34.2818%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.01%)</title><rect x="34.0318%" y="309" width="0.0126%" height="15" fill="rgb(209,82,29)" fg:x="2696" fg:w="1"/><text x="34.2818%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.50%)</title><rect x="34.2464%" y="261" width="0.5049%" height="15" fill="rgb(244,115,12)" fg:x="2713" fg:w="40"/><text x="34.4964%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.50%)</title><rect x="34.2464%" y="245" width="0.5049%" height="15" fill="rgb(222,82,18)" fg:x="2713" fg:w="40"/><text x="34.4964%" y="255.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.50%)</title><rect x="34.2464%" y="229" width="0.5049%" height="15" fill="rgb(249,227,8)" fg:x="2713" fg:w="40"/><text x="34.4964%" y="239.50"></text></g><g><title>__rdl_alloc (40 samples, 0.50%)</title><rect x="34.2464%" y="213" width="0.5049%" height="15" fill="rgb(253,141,45)" fg:x="2713" fg:w="40"/><text x="34.4964%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (40 samples, 0.50%)</title><rect x="34.2464%" y="197" width="0.5049%" height="15" fill="rgb(234,184,4)" fg:x="2713" fg:w="40"/><text x="34.4964%" y="207.50"></text></g><g><title>malloc (39 samples, 0.49%)</title><rect x="34.2590%" y="181" width="0.4923%" height="15" fill="rgb(218,194,23)" fg:x="2714" fg:w="39"/><text x="34.5090%" y="191.50"></text></g><g><title>[libc.so.6] (20 samples, 0.25%)</title><rect x="34.4989%" y="165" width="0.2525%" height="15" fill="rgb(235,66,41)" fg:x="2733" fg:w="20"/><text x="34.7489%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="34.7261%" y="149" width="0.0252%" height="15" fill="rgb(245,217,1)" fg:x="2751" fg:w="2"/><text x="34.9761%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 0.52%)</title><rect x="34.2464%" y="325" width="0.5175%" height="15" fill="rgb(229,91,1)" fg:x="2713" fg:w="41"/><text x="34.4964%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41 samples, 0.52%)</title><rect x="34.2464%" y="309" width="0.5175%" height="15" fill="rgb(207,101,30)" fg:x="2713" fg:w="41"/><text x="34.4964%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41 samples, 0.52%)</title><rect x="34.2464%" y="293" width="0.5175%" height="15" fill="rgb(223,82,49)" fg:x="2713" fg:w="41"/><text x="34.4964%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41 samples, 0.52%)</title><rect x="34.2464%" y="277" width="0.5175%" height="15" fill="rgb(218,167,17)" fg:x="2713" fg:w="41"/><text x="34.4964%" y="287.50"></text></g><g><title>alloc::raw_vec::layout_array (1 samples, 0.01%)</title><rect x="34.7513%" y="261" width="0.0126%" height="15" fill="rgb(208,103,14)" fg:x="2753" fg:w="1"/><text x="35.0013%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.01%)</title><rect x="34.7513%" y="245" width="0.0126%" height="15" fill="rgb(238,20,8)" fg:x="2753" fg:w="1"/><text x="35.0013%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.01%)</title><rect x="34.7513%" y="229" width="0.0126%" height="15" fill="rgb(218,80,54)" fg:x="2753" fg:w="1"/><text x="35.0013%" y="239.50"></text></g><g><title>fastwebsockets::frame::Payload::to_mut (1,112 samples, 14.04%)</title><rect x="34.2212%" y="421" width="14.0369%" height="15" fill="rgb(240,144,17)" fg:x="2711" fg:w="1112"/><text x="34.4712%" y="431.50">fastwebsockets::frame..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,110 samples, 14.01%)</title><rect x="34.2464%" y="405" width="14.0116%" height="15" fill="rgb(245,27,50)" fg:x="2713" fg:w="1110"/><text x="34.4964%" y="415.50">alloc::slice::&lt;impl a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,110 samples, 14.01%)</title><rect x="34.2464%" y="389" width="14.0116%" height="15" fill="rgb(251,51,7)" fg:x="2713" fg:w="1110"/><text x="34.4964%" y="399.50">alloc::slice::&lt;impl [..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,110 samples, 14.01%)</title><rect x="34.2464%" y="373" width="14.0116%" height="15" fill="rgb(245,217,29)" fg:x="2713" fg:w="1110"/><text x="34.4964%" y="383.50">alloc::slice::&lt;impl [..</text></g><g><title>alloc::slice::hack::to_vec (1,110 samples, 14.01%)</title><rect x="34.2464%" y="357" width="14.0116%" height="15" fill="rgb(221,176,29)" fg:x="2713" fg:w="1110"/><text x="34.4964%" y="367.50">alloc::slice::hack::t..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,110 samples, 14.01%)</title><rect x="34.2464%" y="341" width="14.0116%" height="15" fill="rgb(212,180,24)" fg:x="2713" fg:w="1110"/><text x="34.4964%" y="351.50">&lt;T as alloc::slice::h..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,069 samples, 13.49%)</title><rect x="34.7639%" y="325" width="13.4941%" height="15" fill="rgb(254,24,2)" fg:x="2754" fg:w="1069"/><text x="35.0139%" y="335.50">core::ptr::const_ptr..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,069 samples, 13.49%)</title><rect x="34.7639%" y="309" width="13.4941%" height="15" fill="rgb(230,100,2)" fg:x="2754" fg:w="1069"/><text x="35.0139%" y="319.50">core::intrinsics::co..</text></g><g><title>[libc.so.6] (1,068 samples, 13.48%)</title><rect x="34.7766%" y="293" width="13.4814%" height="15" fill="rgb(219,142,25)" fg:x="2755" fg:w="1068"/><text x="35.0266%" y="303.50">[libc.so.6]</text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to_mut (2 samples, 0.03%)</title><rect x="55.3901%" y="389" width="0.0252%" height="15" fill="rgb(240,73,43)" fg:x="4388" fg:w="2"/><text x="55.6401%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="55.4027%" y="373" width="0.0126%" height="15" fill="rgb(214,114,15)" fg:x="4389" fg:w="1"/><text x="55.6527%" y="383.50"></text></g><g><title>fastwebsockets::mask::unmask (568 samples, 7.17%)</title><rect x="48.2580%" y="421" width="7.1699%" height="15" fill="rgb(207,130,4)" fg:x="3823" fg:w="568"/><text x="48.5080%" y="431.50">fastwebsoc..</text></g><g><title>fastwebsockets::mask::unmask_fallback (568 samples, 7.17%)</title><rect x="48.2580%" y="405" width="7.1699%" height="15" fill="rgb(221,25,40)" fg:x="3823" fg:w="568"/><text x="48.5080%" y="415.50">fastwebsoc..</text></g><g><title>fastwebsockets::mask::unmask_easy (1 samples, 0.01%)</title><rect x="55.4153%" y="389" width="0.0126%" height="15" fill="rgb(241,184,7)" fg:x="4390" fg:w="1"/><text x="55.6653%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="55.4153%" y="373" width="0.0126%" height="15" fill="rgb(235,159,4)" fg:x="4390" fg:w="1"/><text x="55.6653%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="55.4153%" y="357" width="0.0126%" height="15" fill="rgb(214,87,48)" fg:x="4390" fg:w="1"/><text x="55.6653%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="55.4153%" y="341" width="0.0126%" height="15" fill="rgb(246,198,24)" fg:x="4390" fg:w="1"/><text x="55.6653%" y="351.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (1 samples, 0.01%)</title><rect x="55.5289%" y="165" width="0.0126%" height="15" fill="rgb(209,66,40)" fg:x="4399" fg:w="1"/><text x="55.7789%" y="175.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (1 samples, 0.01%)</title><rect x="55.5289%" y="149" width="0.0126%" height="15" fill="rgb(233,147,39)" fg:x="4399" fg:w="1"/><text x="55.7789%" y="159.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (1 samples, 0.01%)</title><rect x="55.5415%" y="165" width="0.0126%" height="15" fill="rgb(231,145,52)" fg:x="4400" fg:w="1"/><text x="55.7915%" y="175.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (1 samples, 0.01%)</title><rect x="55.5415%" y="149" width="0.0126%" height="15" fill="rgb(206,20,26)" fg:x="4400" fg:w="1"/><text x="55.7915%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (1 samples, 0.01%)</title><rect x="55.5415%" y="133" width="0.0126%" height="15" fill="rgb(238,220,4)" fg:x="4400" fg:w="1"/><text x="55.7915%" y="143.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (1 samples, 0.01%)</title><rect x="55.5415%" y="117" width="0.0126%" height="15" fill="rgb(252,195,42)" fg:x="4400" fg:w="1"/><text x="55.7915%" y="127.50"></text></g><g><title>rand_chacha::guts::diagonalize (1 samples, 0.01%)</title><rect x="55.5542%" y="165" width="0.0126%" height="15" fill="rgb(209,10,6)" fg:x="4401" fg:w="1"/><text x="55.8042%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (1 samples, 0.01%)</title><rect x="55.5542%" y="149" width="0.0126%" height="15" fill="rgb(229,3,52)" fg:x="4401" fg:w="1"/><text x="55.8042%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (1 samples, 0.01%)</title><rect x="55.5542%" y="133" width="0.0126%" height="15" fill="rgb(253,49,37)" fg:x="4401" fg:w="1"/><text x="55.8042%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (1 samples, 0.01%)</title><rect x="55.5542%" y="117" width="0.0126%" height="15" fill="rgb(240,103,49)" fg:x="4401" fg:w="1"/><text x="55.8042%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="55.5668%" y="149" width="0.0126%" height="15" fill="rgb(250,182,30)" fg:x="4402" fg:w="1"/><text x="55.8168%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="55.5668%" y="133" width="0.0126%" height="15" fill="rgb(248,8,30)" fg:x="4402" fg:w="1"/><text x="55.8168%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.01%)</title><rect x="55.5668%" y="117" width="0.0126%" height="15" fill="rgb(237,120,30)" fg:x="4402" fg:w="1"/><text x="55.8168%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (1 samples, 0.01%)</title><rect x="55.5668%" y="101" width="0.0126%" height="15" fill="rgb(221,146,34)" fg:x="4402" fg:w="1"/><text x="55.8168%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.03%)</title><rect x="55.5794%" y="149" width="0.0252%" height="15" fill="rgb(242,55,13)" fg:x="4403" fg:w="2"/><text x="55.8294%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.03%)</title><rect x="55.5794%" y="133" width="0.0252%" height="15" fill="rgb(242,112,31)" fg:x="4403" fg:w="2"/><text x="55.8294%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.03%)</title><rect x="55.5794%" y="117" width="0.0252%" height="15" fill="rgb(249,192,27)" fg:x="4403" fg:w="2"/><text x="55.8294%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (4 samples, 0.05%)</title><rect x="55.6046%" y="149" width="0.0505%" height="15" fill="rgb(208,204,44)" fg:x="4405" fg:w="4"/><text x="55.8546%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (4 samples, 0.05%)</title><rect x="55.6046%" y="133" width="0.0505%" height="15" fill="rgb(208,93,54)" fg:x="4405" fg:w="4"/><text x="55.8546%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (4 samples, 0.05%)</title><rect x="55.6046%" y="117" width="0.0505%" height="15" fill="rgb(242,1,31)" fg:x="4405" fg:w="4"/><text x="55.8546%" y="127.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (19 samples, 0.24%)</title><rect x="55.4279%" y="325" width="0.2398%" height="15" fill="rgb(241,83,25)" fg:x="4391" fg:w="19"/><text x="55.6779%" y="335.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (19 samples, 0.24%)</title><rect x="55.4279%" y="309" width="0.2398%" height="15" fill="rgb(205,169,50)" fg:x="4391" fg:w="19"/><text x="55.6779%" y="319.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (12 samples, 0.15%)</title><rect x="55.5163%" y="293" width="0.1515%" height="15" fill="rgb(239,186,37)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="303.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (12 samples, 0.15%)</title><rect x="55.5163%" y="277" width="0.1515%" height="15" fill="rgb(205,221,10)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (12 samples, 0.15%)</title><rect x="55.5163%" y="261" width="0.1515%" height="15" fill="rgb(218,196,15)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="271.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (12 samples, 0.15%)</title><rect x="55.5163%" y="245" width="0.1515%" height="15" fill="rgb(218,196,35)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide (12 samples, 0.15%)</title><rect x="55.5163%" y="229" width="0.1515%" height="15" fill="rgb(233,63,24)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (12 samples, 0.15%)</title><rect x="55.5163%" y="213" width="0.1515%" height="15" fill="rgb(225,8,4)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (12 samples, 0.15%)</title><rect x="55.5163%" y="197" width="0.1515%" height="15" fill="rgb(234,105,35)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (12 samples, 0.15%)</title><rect x="55.5163%" y="181" width="0.1515%" height="15" fill="rgb(236,21,32)" fg:x="4398" fg:w="12"/><text x="55.7663%" y="191.50"></text></g><g><title>rand_chacha::guts::round (8 samples, 0.10%)</title><rect x="55.5668%" y="165" width="0.1010%" height="15" fill="rgb(228,109,6)" fg:x="4402" fg:w="8"/><text x="55.8168%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.01%)</title><rect x="55.6551%" y="149" width="0.0126%" height="15" fill="rgb(229,215,31)" fg:x="4409" fg:w="1"/><text x="55.9051%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.01%)</title><rect x="55.6551%" y="133" width="0.0126%" height="15" fill="rgb(221,52,54)" fg:x="4409" fg:w="1"/><text x="55.9051%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (1 samples, 0.01%)</title><rect x="55.6551%" y="117" width="0.0126%" height="15" fill="rgb(252,129,43)" fg:x="4409" fg:w="1"/><text x="55.9051%" y="127.50"></text></g><g><title>rand::rng::Rng::gen (20 samples, 0.25%)</title><rect x="55.4279%" y="405" width="0.2525%" height="15" fill="rgb(248,183,27)" fg:x="4391" fg:w="20"/><text x="55.6779%" y="415.50"></text></g><g><title>rand::distributions::other::_&lt;impl rand::distributions::distribution::Distribution&lt;[T: _]&gt; for rand::distributions::Standard&gt;::sample (20 samples, 0.25%)</title><rect x="55.4279%" y="389" width="0.2525%" height="15" fill="rgb(250,0,22)" fg:x="4391" fg:w="20"/><text x="55.6779%" y="399.50"></text></g><g><title>rand::rng::Rng::gen (20 samples, 0.25%)</title><rect x="55.4279%" y="373" width="0.2525%" height="15" fill="rgb(213,166,10)" fg:x="4391" fg:w="20"/><text x="55.6779%" y="383.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u8&gt; for rand::distributions::Standard&gt;::sample (20 samples, 0.25%)</title><rect x="55.4279%" y="357" width="0.2525%" height="15" fill="rgb(207,163,36)" fg:x="4391" fg:w="20"/><text x="55.6779%" y="367.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (20 samples, 0.25%)</title><rect x="55.4279%" y="341" width="0.2525%" height="15" fill="rgb(208,122,22)" fg:x="4391" fg:w="20"/><text x="55.6779%" y="351.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="55.6678%" y="325" width="0.0126%" height="15" fill="rgb(207,104,49)" fg:x="4410" fg:w="1"/><text x="55.9178%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="55.6804%" y="357" width="0.0252%" height="15" fill="rgb(248,211,50)" fg:x="4411" fg:w="2"/><text x="55.9304%" y="367.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::_{{constant}}::_{{closure}} (2 samples, 0.03%)</title><rect x="55.6804%" y="341" width="0.0252%" height="15" fill="rgb(217,13,45)" fg:x="4411" fg:w="2"/><text x="55.9304%" y="351.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (2 samples, 0.03%)</title><rect x="55.6804%" y="325" width="0.0252%" height="15" fill="rgb(211,216,49)" fg:x="4411" fg:w="2"/><text x="55.9304%" y="335.50"></text></g><g><title>fastwebsockets::frame::Frame::mask (1,718 samples, 21.69%)</title><rect x="34.0444%" y="437" width="21.6864%" height="15" fill="rgb(221,58,53)" fg:x="2697" fg:w="1718"/><text x="34.2944%" y="447.50">fastwebsockets::frame::Frame::mask</text></g><g><title>rand::random (24 samples, 0.30%)</title><rect x="55.4279%" y="421" width="0.3030%" height="15" fill="rgb(220,112,41)" fg:x="4391" fg:w="24"/><text x="55.6779%" y="431.50"></text></g><g><title>rand::rngs::thread::thread_rng (4 samples, 0.05%)</title><rect x="55.6804%" y="405" width="0.0505%" height="15" fill="rgb(236,38,28)" fg:x="4411" fg:w="4"/><text x="55.9304%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.05%)</title><rect x="55.6804%" y="389" width="0.0505%" height="15" fill="rgb(227,195,22)" fg:x="4411" fg:w="4"/><text x="55.9304%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.05%)</title><rect x="55.6804%" y="373" width="0.0505%" height="15" fill="rgb(214,55,33)" fg:x="4411" fg:w="4"/><text x="55.9304%" y="383.50"></text></g><g><title>rand::rngs::thread::thread_rng::_{{closure}} (2 samples, 0.03%)</title><rect x="55.7056%" y="357" width="0.0252%" height="15" fill="rgb(248,80,13)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="55.7056%" y="341" width="0.0252%" height="15" fill="rgb(238,52,6)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.03%)</title><rect x="55.7056%" y="325" width="0.0252%" height="15" fill="rgb(224,198,47)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="55.7056%" y="309" width="0.0252%" height="15" fill="rgb(233,171,20)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.03%)</title><rect x="55.7056%" y="293" width="0.0252%" height="15" fill="rgb(241,30,25)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="303.50"></text></g><g><title>core::mem::replace (2 samples, 0.03%)</title><rect x="55.7056%" y="277" width="0.0252%" height="15" fill="rgb(207,171,38)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="287.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="55.7056%" y="261" width="0.0252%" height="15" fill="rgb(234,70,1)" fg:x="4413" fg:w="2"/><text x="55.9556%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="55.7435%" y="421" width="0.0126%" height="15" fill="rgb(232,178,18)" fg:x="4416" fg:w="1"/><text x="55.9935%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.01%)</title><rect x="55.7435%" y="405" width="0.0126%" height="15" fill="rgb(241,78,40)" fg:x="4416" fg:w="1"/><text x="55.9935%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="55.7435%" y="389" width="0.0126%" height="15" fill="rgb(222,35,25)" fg:x="4416" fg:w="1"/><text x="55.9935%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.03%)</title><rect x="55.7561%" y="421" width="0.0252%" height="15" fill="rgb(207,92,16)" fg:x="4417" fg:w="2"/><text x="56.0061%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="55.7561%" y="405" width="0.0252%" height="15" fill="rgb(216,59,51)" fg:x="4417" fg:w="2"/><text x="56.0061%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="55.7561%" y="389" width="0.0252%" height="15" fill="rgb(213,80,28)" fg:x="4417" fg:w="2"/><text x="56.0061%" y="399.50"></text></g><g><title>fastwebsockets::frame::Frame::fmt_head (2 samples, 0.03%)</title><rect x="55.7814%" y="421" width="0.0252%" height="15" fill="rgb(220,93,7)" fg:x="4419" fg:w="2"/><text x="56.0314%" y="431.50"></text></g><g><title>fastwebsockets::frame::Frame::write (7 samples, 0.09%)</title><rect x="55.7309%" y="437" width="0.0884%" height="15" fill="rgb(225,24,44)" fg:x="4415" fg:w="7"/><text x="55.9809%" y="447.50"></text></g><g><title>fastwebsockets::frame::Frame::write::reserve_enough (1 samples, 0.01%)</title><rect x="55.8066%" y="421" width="0.0126%" height="15" fill="rgb(243,74,40)" fg:x="4421" fg:w="1"/><text x="56.0566%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="55.8066%" y="405" width="0.0126%" height="15" fill="rgb(228,39,7)" fg:x="4421" fg:w="1"/><text x="56.0566%" y="415.50"></text></g><g><title>std::sys::pal::unix::cvt (1 samples, 0.01%)</title><rect x="55.9833%" y="181" width="0.0126%" height="15" fill="rgb(227,79,8)" fg:x="4435" fg:w="1"/><text x="56.2333%" y="191.50"></text></g><g><title>[libc.so.6] (31 samples, 0.39%)</title><rect x="56.2358%" y="165" width="0.3913%" height="15" fill="rgb(236,58,11)" fg:x="4455" fg:w="31"/><text x="56.4858%" y="175.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored::_{{closure}} (55 samples, 0.69%)</title><rect x="55.9833%" y="309" width="0.6943%" height="15" fill="rgb(249,63,35)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="319.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (55 samples, 0.69%)</title><rect x="55.9833%" y="293" width="0.6943%" height="15" fill="rgb(252,114,16)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="303.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (55 samples, 0.69%)</title><rect x="55.9833%" y="277" width="0.6943%" height="15" fill="rgb(254,151,24)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="287.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (55 samples, 0.69%)</title><rect x="55.9833%" y="261" width="0.6943%" height="15" fill="rgb(253,54,39)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="271.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored::_{{closure}} (55 samples, 0.69%)</title><rect x="55.9833%" y="245" width="0.6943%" height="15" fill="rgb(243,25,45)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="255.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write_vectored (55 samples, 0.69%)</title><rect x="55.9833%" y="229" width="0.6943%" height="15" fill="rgb(234,134,9)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="239.50"></text></g><g><title>std::sys::pal::unix::fs::File::write_vectored (55 samples, 0.69%)</title><rect x="55.9833%" y="213" width="0.6943%" height="15" fill="rgb(227,166,31)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="223.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write_vectored (55 samples, 0.69%)</title><rect x="55.9833%" y="197" width="0.6943%" height="15" fill="rgb(245,143,41)" fg:x="4435" fg:w="55"/><text x="56.2333%" y="207.50"></text></g><g><title>writev (54 samples, 0.68%)</title><rect x="55.9960%" y="181" width="0.6816%" height="15" fill="rgb(238,181,32)" fg:x="4436" fg:w="54"/><text x="56.2460%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="56.6271%" y="165" width="0.0505%" height="15" fill="rgb(224,113,18)" fg:x="4486" fg:w="4"/><text x="56.8771%" y="175.50"></text></g><g><title>&lt;tokio::io::util::write_vectored::WriteVectored&lt;W&gt; as core::future::future::Future&gt;::poll (69 samples, 0.87%)</title><rect x="55.9455%" y="421" width="0.8710%" height="15" fill="rgb(240,229,28)" fg:x="4432" fg:w="69"/><text x="56.1955%" y="431.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (69 samples, 0.87%)</title><rect x="55.9455%" y="405" width="0.8710%" height="15" fill="rgb(250,185,3)" fg:x="4432" fg:w="69"/><text x="56.1955%" y="415.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (69 samples, 0.87%)</title><rect x="55.9455%" y="389" width="0.8710%" height="15" fill="rgb(212,59,25)" fg:x="4432" fg:w="69"/><text x="56.1955%" y="399.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (68 samples, 0.86%)</title><rect x="55.9581%" y="373" width="0.8584%" height="15" fill="rgb(221,87,20)" fg:x="4433" fg:w="68"/><text x="56.2081%" y="383.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored (67 samples, 0.85%)</title><rect x="55.9707%" y="357" width="0.8457%" height="15" fill="rgb(213,74,28)" fg:x="4434" fg:w="67"/><text x="56.2207%" y="367.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_io (67 samples, 0.85%)</title><rect x="55.9707%" y="341" width="0.8457%" height="15" fill="rgb(224,132,34)" fg:x="4434" fg:w="67"/><text x="56.2207%" y="351.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (67 samples, 0.85%)</title><rect x="55.9707%" y="325" width="0.8457%" height="15" fill="rgb(222,101,24)" fg:x="4434" fg:w="67"/><text x="56.2207%" y="335.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (11 samples, 0.14%)</title><rect x="56.6776%" y="309" width="0.1389%" height="15" fill="rgb(254,142,4)" fg:x="4490" fg:w="11"/><text x="56.9276%" y="319.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.13%)</title><rect x="56.6902%" y="293" width="0.1262%" height="15" fill="rgb(230,229,49)" fg:x="4491" fg:w="10"/><text x="56.9402%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (10 samples, 0.13%)</title><rect x="56.6902%" y="277" width="0.1262%" height="15" fill="rgb(238,70,47)" fg:x="4491" fg:w="10"/><text x="56.9402%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (10 samples, 0.13%)</title><rect x="56.6902%" y="261" width="0.1262%" height="15" fill="rgb(231,160,17)" fg:x="4491" fg:w="10"/><text x="56.9402%" y="271.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (1,949 samples, 24.60%)</title><rect x="32.2393%" y="469" width="24.6024%" height="15" fill="rgb(218,68,53)" fg:x="2554" fg:w="1949"/><text x="32.4893%" y="479.50">fastwebsockets::WebSocketWrite&lt;S&gt;::writ..</text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (1,939 samples, 24.48%)</title><rect x="32.3656%" y="453" width="24.4761%" height="15" fill="rgb(236,111,10)" fg:x="2564" fg:w="1939"/><text x="32.6156%" y="463.50">fastwebsockets::WriteHalf::write_frame:..</text></g><g><title>fastwebsockets::frame::Frame::writev::_{{closure}} (81 samples, 1.02%)</title><rect x="55.8192%" y="437" width="1.0225%" height="15" fill="rgb(224,34,41)" fg:x="4422" fg:w="81"/><text x="56.0692%" y="447.50"></text></g><g><title>fastwebsockets::frame::Frame::fmt_head (2 samples, 0.03%)</title><rect x="56.8165%" y="421" width="0.0252%" height="15" fill="rgb(241,118,19)" fg:x="4501" fg:w="2"/><text x="57.0665%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.01%)</title><rect x="56.8291%" y="405" width="0.0126%" height="15" fill="rgb(238,129,25)" fg:x="4502" fg:w="1"/><text x="57.0791%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="56.8291%" y="389" width="0.0126%" height="15" fill="rgb(238,22,31)" fg:x="4502" fg:w="1"/><text x="57.0791%" y="399.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,970 samples, 24.87%)</title><rect x="31.9995%" y="501" width="24.8675%" height="15" fill="rgb(222,174,48)" fg:x="2535" fg:w="1970"/><text x="32.2495%" y="511.50">&lt;core::pin::Pin&lt;P&gt; as core::future::futu..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (1,970 samples, 24.87%)</title><rect x="31.9995%" y="485" width="24.8675%" height="15" fill="rgb(206,152,40)" fg:x="2535" fg:w="1970"/><text x="32.2495%" y="495.50">wisp_mux::fastwebsockets::_&lt;impl wisp_mu..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;wisp_mux::ws::Frame&gt; for fastwebsockets::frame::Frame&gt;::from (2 samples, 0.03%)</title><rect x="56.8417%" y="469" width="0.0252%" height="15" fill="rgb(218,99,54)" fg:x="4503" fg:w="2"/><text x="57.0917%" y="479.50"></text></g><g><title>wisp_mux::fastwebsockets::match_payload_reverse (2 samples, 0.03%)</title><rect x="56.8417%" y="453" width="0.0252%" height="15" fill="rgb(220,174,26)" fg:x="4503" fg:w="2"/><text x="57.0917%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (16 samples, 0.20%)</title><rect x="56.8670%" y="501" width="0.2020%" height="15" fill="rgb(245,116,9)" fg:x="4505" fg:w="16"/><text x="57.1170%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (16 samples, 0.20%)</title><rect x="56.8670%" y="485" width="0.2020%" height="15" fill="rgb(209,72,35)" fg:x="4505" fg:w="16"/><text x="57.1170%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.15%)</title><rect x="56.9174%" y="469" width="0.1515%" height="15" fill="rgb(226,126,21)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.15%)</title><rect x="56.9174%" y="453" width="0.1515%" height="15" fill="rgb(227,192,1)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.15%)</title><rect x="56.9174%" y="437" width="0.1515%" height="15" fill="rgb(237,180,29)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="447.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.15%)</title><rect x="56.9174%" y="421" width="0.1515%" height="15" fill="rgb(230,197,35)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="431.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.15%)</title><rect x="56.9174%" y="405" width="0.1515%" height="15" fill="rgb(246,193,31)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="415.50"></text></g><g><title>cfree (12 samples, 0.15%)</title><rect x="56.9174%" y="389" width="0.1515%" height="15" fill="rgb(241,36,4)" fg:x="4509" fg:w="12"/><text x="57.1674%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="57.0437%" y="373" width="0.0252%" height="15" fill="rgb(241,130,17)" fg:x="4519" fg:w="2"/><text x="57.2937%" y="383.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,996 samples, 25.20%)</title><rect x="31.9238%" y="533" width="25.1957%" height="15" fill="rgb(206,137,32)" fg:x="2529" fg:w="1996"/><text x="32.1738%" y="543.50">&lt;core::pin::Pin&lt;P&gt; as core::future::futu..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt; as wisp_mux::ws::WebSocketWrite&gt;::wisp_write_split::_{{closure}} (1,996 samples, 25.20%)</title><rect x="31.9238%" y="517" width="25.1957%" height="15" fill="rgb(237,228,51)" fg:x="2529" fg:w="1996"/><text x="32.1738%" y="527.50">&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::Web..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (4 samples, 0.05%)</title><rect x="57.0689%" y="501" width="0.0505%" height="15" fill="rgb(243,6,42)" fg:x="4521" fg:w="4"/><text x="57.3189%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (4 samples, 0.05%)</title><rect x="57.0689%" y="485" width="0.0505%" height="15" fill="rgb(251,74,28)" fg:x="4521" fg:w="4"/><text x="57.3189%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="57.0689%" y="469" width="0.0505%" height="15" fill="rgb(218,20,49)" fg:x="4521" fg:w="4"/><text x="57.3189%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.04%)</title><rect x="57.0815%" y="453" width="0.0379%" height="15" fill="rgb(238,28,14)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.04%)</title><rect x="57.0815%" y="437" width="0.0379%" height="15" fill="rgb(229,40,46)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="57.0815%" y="421" width="0.0379%" height="15" fill="rgb(244,195,20)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="431.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.04%)</title><rect x="57.0815%" y="405" width="0.0379%" height="15" fill="rgb(253,56,35)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="415.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="57.0815%" y="389" width="0.0379%" height="15" fill="rgb(210,149,44)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.04%)</title><rect x="57.0815%" y="373" width="0.0379%" height="15" fill="rgb(240,135,12)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="383.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="57.0815%" y="357" width="0.0379%" height="15" fill="rgb(251,24,50)" fg:x="4522" fg:w="3"/><text x="57.3315%" y="367.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (1 samples, 0.01%)</title><rect x="57.1447%" y="517" width="0.0126%" height="15" fill="rgb(243,200,47)" fg:x="4527" fg:w="1"/><text x="57.3947%" y="527.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::try_lock (4 samples, 0.05%)</title><rect x="57.1573%" y="517" width="0.0505%" height="15" fill="rgb(224,166,26)" fg:x="4528" fg:w="4"/><text x="57.4073%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (4 samples, 0.05%)</title><rect x="57.1573%" y="501" width="0.0505%" height="15" fill="rgb(233,0,47)" fg:x="4528" fg:w="4"/><text x="57.4073%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_or (4 samples, 0.05%)</title><rect x="57.1573%" y="485" width="0.0505%" height="15" fill="rgb(253,80,5)" fg:x="4528" fg:w="4"/><text x="57.4073%" y="495.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.10%)</title><rect x="57.1194%" y="533" width="0.1010%" height="15" fill="rgb(214,133,25)" fg:x="4525" fg:w="8"/><text x="57.3694%" y="543.50"></text></g><g><title>futures_util::lock::mutex::Waiter::register (1 samples, 0.01%)</title><rect x="57.2078%" y="517" width="0.0126%" height="15" fill="rgb(209,27,14)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="527.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="57.2078%" y="501" width="0.0126%" height="15" fill="rgb(219,102,51)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="57.2078%" y="485" width="0.0126%" height="15" fill="rgb(237,18,16)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="495.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="57.2078%" y="469" width="0.0126%" height="15" fill="rgb(241,85,17)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="57.2078%" y="453" width="0.0126%" height="15" fill="rgb(236,90,42)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="57.2078%" y="437" width="0.0126%" height="15" fill="rgb(249,57,21)" fg:x="4532" fg:w="1"/><text x="57.4578%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="57.2204%" y="533" width="0.0379%" height="15" fill="rgb(243,12,36)" fg:x="4533" fg:w="3"/><text x="57.4704%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (3 samples, 0.04%)</title><rect x="57.2204%" y="517" width="0.0379%" height="15" fill="rgb(253,128,47)" fg:x="4533" fg:w="3"/><text x="57.4704%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="57.2456%" y="501" width="0.0126%" height="15" fill="rgb(207,33,20)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="57.2456%" y="485" width="0.0126%" height="15" fill="rgb(233,215,35)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="57.2456%" y="469" width="0.0126%" height="15" fill="rgb(249,188,52)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="479.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="57.2456%" y="453" width="0.0126%" height="15" fill="rgb(225,12,32)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="463.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="57.2456%" y="437" width="0.0126%" height="15" fill="rgb(247,98,14)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="447.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="57.2456%" y="421" width="0.0126%" height="15" fill="rgb(247,219,48)" fg:x="4535" fg:w="1"/><text x="57.4956%" y="431.50"></text></g><g><title>&lt;slab::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="57.2583%" y="485" width="0.0126%" height="15" fill="rgb(253,60,48)" fg:x="4536" fg:w="1"/><text x="57.5083%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (3 samples, 0.04%)</title><rect x="57.2709%" y="485" width="0.0379%" height="15" fill="rgb(245,15,52)" fg:x="4537" fg:w="3"/><text x="57.5209%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_and (3 samples, 0.04%)</title><rect x="57.2709%" y="469" width="0.0379%" height="15" fill="rgb(220,133,28)" fg:x="4537" fg:w="3"/><text x="57.5209%" y="479.50"></text></g><g><title>simple_wisp_client::main::_{{closure}}::_{{closure}} (3,100 samples, 39.13%)</title><rect x="18.1899%" y="613" width="39.1315%" height="15" fill="rgb(217,180,4)" fg:x="1441" fg:w="3100"/><text x="18.4399%" y="623.50">simple_wisp_client::main::_{{closure}}::_{{closure}}</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write::_{{closure}} (2,087 samples, 26.34%)</title><rect x="30.9770%" y="597" width="26.3444%" height="15" fill="rgb(251,24,1)" fg:x="2454" fg:w="2087"/><text x="31.2270%" y="607.50">wisp_mux::stream::MuxStreamWrite::write::_..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload::_{{closure}} (2,086 samples, 26.33%)</title><rect x="30.9896%" y="581" width="26.3317%" height="15" fill="rgb(212,185,49)" fg:x="2455" fg:w="2086"/><text x="31.2396%" y="591.50">wisp_mux::stream::MuxStreamWrite::write_pa..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload_internal::_{{closure}} (2,049 samples, 25.86%)</title><rect x="31.4567%" y="565" width="25.8647%" height="15" fill="rgb(215,175,22)" fg:x="2492" fg:w="2049"/><text x="31.7067%" y="575.50">wisp_mux::stream::MuxStreamWrite::write_p..</text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_split::_{{closure}} (2,025 samples, 25.56%)</title><rect x="31.7597%" y="549" width="25.5617%" height="15" fill="rgb(250,205,14)" fg:x="2516" fg:w="2025"/><text x="32.0097%" y="559.50">wisp_mux::ws::LockedWebSocketWrite::write..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (5 samples, 0.06%)</title><rect x="57.2583%" y="533" width="0.0631%" height="15" fill="rgb(225,211,22)" fg:x="4536" fg:w="5"/><text x="57.5083%" y="543.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="57.2583%" y="517" width="0.0631%" height="15" fill="rgb(251,179,42)" fg:x="4536" fg:w="5"/><text x="57.5083%" y="527.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::unlock (5 samples, 0.06%)</title><rect x="57.2583%" y="501" width="0.0631%" height="15" fill="rgb(208,216,51)" fg:x="4536" fg:w="5"/><text x="57.5083%" y="511.50"></text></g><g><title>futures_util::lock::mutex::Waiter::wake (1 samples, 0.01%)</title><rect x="57.3088%" y="485" width="0.0126%" height="15" fill="rgb(235,36,11)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="495.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.01%)</title><rect x="57.3088%" y="469" width="0.0126%" height="15" fill="rgb(213,189,28)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.01%)</title><rect x="57.3088%" y="453" width="0.0126%" height="15" fill="rgb(227,203,42)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.01%)</title><rect x="57.3088%" y="437" width="0.0126%" height="15" fill="rgb(244,72,36)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.01%)</title><rect x="57.3088%" y="421" width="0.0126%" height="15" fill="rgb(213,53,17)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.01%)</title><rect x="57.3088%" y="405" width="0.0126%" height="15" fill="rgb(207,167,3)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::load (1 samples, 0.01%)</title><rect x="57.3088%" y="389" width="0.0126%" height="15" fill="rgb(216,98,30)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="57.3088%" y="373" width="0.0126%" height="15" fill="rgb(236,123,15)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="57.3088%" y="357" width="0.0126%" height="15" fill="rgb(248,81,50)" fg:x="4540" fg:w="1"/><text x="57.5588%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.08%)</title><rect x="59.2022%" y="581" width="0.0757%" height="15" fill="rgb(214,120,4)" fg:x="4690" fg:w="6"/><text x="59.4522%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::future::FusedFuture&gt;::is_terminated (1 samples, 0.01%)</title><rect x="59.8712%" y="517" width="0.0126%" height="15" fill="rgb(208,179,34)" fg:x="4743" fg:w="1"/><text x="60.1212%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.01%)</title><rect x="60.8937%" y="405" width="0.0126%" height="15" fill="rgb(227,140,7)" fg:x="4824" fg:w="1"/><text x="61.1437%" y="415.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;fastwebsockets::frame::OpCode&gt; for wisp_mux::ws::OpCode&gt;::from (1 samples, 0.01%)</title><rect x="60.8937%" y="389" width="0.0126%" height="15" fill="rgb(214,22,6)" fg:x="4824" fg:w="1"/><text x="61.1437%" y="399.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (12 samples, 0.15%)</title><rect x="60.9063%" y="405" width="0.1515%" height="15" fill="rgb(207,137,27)" fg:x="4825" fg:w="12"/><text x="61.1563%" y="415.50"></text></g><g><title>core::cmp::PartialEq::ne (11 samples, 0.14%)</title><rect x="61.0578%" y="405" width="0.1389%" height="15" fill="rgb(210,8,46)" fg:x="4837" fg:w="11"/><text x="61.3078%" y="415.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::cmp::PartialEq&gt;::eq (11 samples, 0.14%)</title><rect x="61.0578%" y="389" width="0.1389%" height="15" fill="rgb(240,16,54)" fg:x="4837" fg:w="11"/><text x="61.3078%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;wisp_mux::ws::Frame&gt;&gt; (1 samples, 0.01%)</title><rect x="61.1967%" y="405" width="0.0126%" height="15" fill="rgb(211,209,29)" fg:x="4848" fg:w="1"/><text x="61.4467%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::read_frame&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}::{{closure}},wisp_mux::WispError,wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="61.2093%" y="405" width="0.0126%" height="15" fill="rgb(226,228,24)" fg:x="4849" fg:w="1"/><text x="61.4593%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.05%)</title><rect x="62.0172%" y="389" width="0.0505%" height="15" fill="rgb(222,84,9)" fg:x="4913" fg:w="4"/><text x="62.2672%" y="399.50"></text></g><g><title>&lt;fastwebsockets::Role as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="62.9134%" y="373" width="0.0126%" height="15" fill="rgb(234,203,30)" fg:x="4984" fg:w="1"/><text x="63.1634%" y="383.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.05%)</title><rect x="63.9990%" y="357" width="0.0505%" height="15" fill="rgb(238,109,14)" fg:x="5070" fg:w="4"/><text x="64.2490%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.03%)</title><rect x="64.0242%" y="341" width="0.0252%" height="15" fill="rgb(233,206,34)" fg:x="5072" fg:w="2"/><text x="64.2742%" y="351.50"></text></g><g><title>&lt;fastwebsockets::frame::OpCode as core::convert::TryFrom&lt;u8&gt;&gt;::try_from (1 samples, 0.01%)</title><rect x="64.0495%" y="357" width="0.0126%" height="15" fill="rgb(220,167,47)" fg:x="5074" fg:w="1"/><text x="64.2995%" y="367.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (11 samples, 0.14%)</title><rect x="64.0747%" y="341" width="0.1389%" height="15" fill="rgb(238,105,10)" fg:x="5076" fg:w="11"/><text x="64.3247%" y="351.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (7 samples, 0.09%)</title><rect x="64.1252%" y="325" width="0.0884%" height="15" fill="rgb(213,227,17)" fg:x="5080" fg:w="7"/><text x="64.3752%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (4 samples, 0.05%)</title><rect x="64.1631%" y="309" width="0.0505%" height="15" fill="rgb(217,132,38)" fg:x="5083" fg:w="4"/><text x="64.4131%" y="319.50"></text></g><g><title>[libc.so.6] (54 samples, 0.68%)</title><rect x="65.1224%" y="117" width="0.6816%" height="15" fill="rgb(242,146,4)" fg:x="5159" fg:w="54"/><text x="65.3724%" y="127.50"></text></g><g><title>recv (129 samples, 1.63%)</title><rect x="64.3777%" y="133" width="1.6284%" height="15" fill="rgb(212,61,9)" fg:x="5100" fg:w="129"/><text x="64.6277%" y="143.50"></text></g><g><title>[unknown] (16 samples, 0.20%)</title><rect x="65.8041%" y="117" width="0.2020%" height="15" fill="rgb(247,126,22)" fg:x="5213" fg:w="16"/><text x="66.0541%" y="127.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (139 samples, 1.75%)</title><rect x="64.3777%" y="261" width="1.7546%" height="15" fill="rgb(220,196,2)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="271.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (139 samples, 1.75%)</title><rect x="64.3777%" y="245" width="1.7546%" height="15" fill="rgb(208,46,4)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="255.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (139 samples, 1.75%)</title><rect x="64.3777%" y="229" width="1.7546%" height="15" fill="rgb(252,104,46)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="239.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (139 samples, 1.75%)</title><rect x="64.3777%" y="213" width="1.7546%" height="15" fill="rgb(237,152,48)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="223.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (139 samples, 1.75%)</title><rect x="64.3777%" y="197" width="1.7546%" height="15" fill="rgb(221,59,37)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="207.50"></text></g><g><title>std::sys_common::net::TcpStream::read (139 samples, 1.75%)</title><rect x="64.3777%" y="181" width="1.7546%" height="15" fill="rgb(209,202,51)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="191.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (139 samples, 1.75%)</title><rect x="64.3777%" y="165" width="1.7546%" height="15" fill="rgb(228,81,30)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="175.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (139 samples, 1.75%)</title><rect x="64.3777%" y="149" width="1.7546%" height="15" fill="rgb(227,42,39)" fg:x="5100" fg:w="139"/><text x="64.6277%" y="159.50"></text></g><g><title>std::sys::pal::unix::cvt (10 samples, 0.13%)</title><rect x="66.0061%" y="133" width="0.1262%" height="15" fill="rgb(221,26,2)" fg:x="5229" fg:w="10"/><text x="66.2561%" y="143.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (10 samples, 0.13%)</title><rect x="66.0061%" y="117" width="0.1262%" height="15" fill="rgb(254,61,31)" fg:x="5229" fg:w="10"/><text x="66.2561%" y="127.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (2 samples, 0.03%)</title><rect x="66.1323%" y="261" width="0.0252%" height="15" fill="rgb(222,173,38)" fg:x="5239" fg:w="2"/><text x="66.3823%" y="271.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::set_filled (2 samples, 0.03%)</title><rect x="66.1323%" y="245" width="0.0252%" height="15" fill="rgb(218,50,12)" fg:x="5239" fg:w="2"/><text x="66.3823%" y="255.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (3 samples, 0.04%)</title><rect x="66.1575%" y="261" width="0.0379%" height="15" fill="rgb(223,88,40)" fg:x="5241" fg:w="3"/><text x="66.4075%" y="271.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (3 samples, 0.04%)</title><rect x="66.1954%" y="261" width="0.0379%" height="15" fill="rgb(237,54,19)" fg:x="5244" fg:w="3"/><text x="66.4454%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.03%)</title><rect x="66.2080%" y="245" width="0.0252%" height="15" fill="rgb(251,129,25)" fg:x="5245" fg:w="2"/><text x="66.4580%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="66.2080%" y="229" width="0.0252%" height="15" fill="rgb(238,97,19)" fg:x="5245" fg:w="2"/><text x="66.4580%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.04%)</title><rect x="66.2711%" y="181" width="0.0379%" height="15" fill="rgb(240,169,18)" fg:x="5250" fg:w="3"/><text x="66.5211%" y="191.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (3 samples, 0.04%)</title><rect x="66.2711%" y="165" width="0.0379%" height="15" fill="rgb(230,187,49)" fg:x="5250" fg:w="3"/><text x="66.5211%" y="175.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (3 samples, 0.04%)</title><rect x="66.2711%" y="149" width="0.0379%" height="15" fill="rgb(209,44,26)" fg:x="5250" fg:w="3"/><text x="66.5211%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.03%)</title><rect x="66.2838%" y="133" width="0.0252%" height="15" fill="rgb(244,0,6)" fg:x="5251" fg:w="2"/><text x="66.5338%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="66.3343%" y="149" width="0.0126%" height="15" fill="rgb(248,18,21)" fg:x="5255" fg:w="1"/><text x="66.5843%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.01%)</title><rect x="66.3595%" y="69" width="0.0126%" height="15" fill="rgb(245,180,19)" fg:x="5257" fg:w="1"/><text x="66.6095%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="66.3595%" y="53" width="0.0126%" height="15" fill="rgb(252,118,36)" fg:x="5257" fg:w="1"/><text x="66.6095%" y="63.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (3 samples, 0.04%)</title><rect x="66.3469%" y="149" width="0.0379%" height="15" fill="rgb(210,224,19)" fg:x="5256" fg:w="3"/><text x="66.5969%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (3 samples, 0.04%)</title><rect x="66.3469%" y="133" width="0.0379%" height="15" fill="rgb(218,30,24)" fg:x="5256" fg:w="3"/><text x="66.5969%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (3 samples, 0.04%)</title><rect x="66.3469%" y="117" width="0.0379%" height="15" fill="rgb(219,75,50)" fg:x="5256" fg:w="3"/><text x="66.5969%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (3 samples, 0.04%)</title><rect x="66.3469%" y="101" width="0.0379%" height="15" fill="rgb(234,72,50)" fg:x="5256" fg:w="3"/><text x="66.5969%" y="111.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (3 samples, 0.04%)</title><rect x="66.3469%" y="85" width="0.0379%" height="15" fill="rgb(219,100,48)" fg:x="5256" fg:w="3"/><text x="66.5969%" y="95.50"></text></g><g><title>tokio::runtime::task::state::State::load (1 samples, 0.01%)</title><rect x="66.3721%" y="69" width="0.0126%" height="15" fill="rgb(253,5,41)" fg:x="5258" fg:w="1"/><text x="66.6221%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="66.3721%" y="53" width="0.0126%" height="15" fill="rgb(247,181,11)" fg:x="5258" fg:w="1"/><text x="66.6221%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="66.3721%" y="37" width="0.0126%" height="15" fill="rgb(222,223,25)" fg:x="5258" fg:w="1"/><text x="66.6221%" y="47.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.14%)</title><rect x="66.2711%" y="229" width="0.1389%" height="15" fill="rgb(214,198,28)" fg:x="5250" fg:w="11"/><text x="66.5211%" y="239.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.14%)</title><rect x="66.2711%" y="213" width="0.1389%" height="15" fill="rgb(230,46,43)" fg:x="5250" fg:w="11"/><text x="66.5211%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.14%)</title><rect x="66.2711%" y="197" width="0.1389%" height="15" fill="rgb(233,65,53)" fg:x="5250" fg:w="11"/><text x="66.5211%" y="207.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (8 samples, 0.10%)</title><rect x="66.3090%" y="181" width="0.1010%" height="15" fill="rgb(221,121,27)" fg:x="5253" fg:w="8"/><text x="66.5590%" y="191.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (8 samples, 0.10%)</title><rect x="66.3090%" y="165" width="0.1010%" height="15" fill="rgb(247,70,47)" fg:x="5253" fg:w="8"/><text x="66.5590%" y="175.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (2 samples, 0.03%)</title><rect x="66.3848%" y="149" width="0.0252%" height="15" fill="rgb(228,85,35)" fg:x="5259" fg:w="2"/><text x="66.6348%" y="159.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="66.4352%" y="213" width="0.0126%" height="15" fill="rgb(209,50,18)" fg:x="5263" fg:w="1"/><text x="66.6852%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.01%)</title><rect x="66.4352%" y="197" width="0.0126%" height="15" fill="rgb(250,19,35)" fg:x="5263" fg:w="1"/><text x="66.6852%" y="207.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.01%)</title><rect x="66.4352%" y="181" width="0.0126%" height="15" fill="rgb(253,107,29)" fg:x="5263" fg:w="1"/><text x="66.6852%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="66.4352%" y="165" width="0.0126%" height="15" fill="rgb(252,179,29)" fg:x="5263" fg:w="1"/><text x="66.6852%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="66.4352%" y="149" width="0.0126%" height="15" fill="rgb(238,194,6)" fg:x="5263" fg:w="1"/><text x="66.6852%" y="159.50"></text></g><g><title>&lt;tokio::io::ready::Ready as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.01%)</title><rect x="66.4479%" y="213" width="0.0126%" height="15" fill="rgb(238,164,29)" fg:x="5264" fg:w="1"/><text x="66.6979%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.06%)</title><rect x="66.4605%" y="213" width="0.0631%" height="15" fill="rgb(224,25,9)" fg:x="5265" fg:w="5"/><text x="66.7105%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.06%)</title><rect x="66.4605%" y="197" width="0.0631%" height="15" fill="rgb(244,153,23)" fg:x="5265" fg:w="5"/><text x="66.7105%" y="207.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="66.5236%" y="213" width="0.0126%" height="15" fill="rgb(212,203,14)" fg:x="5270" fg:w="1"/><text x="66.7736%" y="223.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.01%)</title><rect x="66.5236%" y="197" width="0.0126%" height="15" fill="rgb(220,164,20)" fg:x="5270" fg:w="1"/><text x="66.7736%" y="207.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.01%)</title><rect x="66.5236%" y="181" width="0.0126%" height="15" fill="rgb(222,203,48)" fg:x="5270" fg:w="1"/><text x="66.7736%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.01%)</title><rect x="66.5236%" y="165" width="0.0126%" height="15" fill="rgb(215,159,22)" fg:x="5270" fg:w="1"/><text x="66.7736%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="66.5236%" y="149" width="0.0126%" height="15" fill="rgb(216,183,47)" fg:x="5270" fg:w="1"/><text x="66.7736%" y="159.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (185 samples, 2.34%)</title><rect x="64.2136%" y="341" width="2.3353%" height="15" fill="rgb(229,195,25)" fg:x="5087" fg:w="185"/><text x="64.4636%" y="351.50">&lt;..</text></g><g><title>&lt;tokio::io::util::chain::Chain&lt;T,U&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (185 samples, 2.34%)</title><rect x="64.2136%" y="325" width="2.3353%" height="15" fill="rgb(224,132,51)" fg:x="5087" fg:w="185"/><text x="64.4636%" y="335.50">&lt;..</text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (185 samples, 2.34%)</title><rect x="64.2136%" y="309" width="2.3353%" height="15" fill="rgb(240,63,7)" fg:x="5087" fg:w="185"/><text x="64.4636%" y="319.50">&lt;..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (180 samples, 2.27%)</title><rect x="64.2767%" y="293" width="2.2722%" height="15" fill="rgb(249,182,41)" fg:x="5092" fg:w="180"/><text x="64.5267%" y="303.50">t..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (176 samples, 2.22%)</title><rect x="64.3272%" y="277" width="2.2217%" height="15" fill="rgb(243,47,26)" fg:x="5096" fg:w="176"/><text x="64.5772%" y="287.50">t..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (25 samples, 0.32%)</title><rect x="66.2333%" y="261" width="0.3156%" height="15" fill="rgb(233,48,2)" fg:x="5247" fg:w="25"/><text x="66.4833%" y="271.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (24 samples, 0.30%)</title><rect x="66.2459%" y="245" width="0.3030%" height="15" fill="rgb(244,165,34)" fg:x="5248" fg:w="24"/><text x="66.4959%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (11 samples, 0.14%)</title><rect x="66.4100%" y="229" width="0.1389%" height="15" fill="rgb(207,89,7)" fg:x="5261" fg:w="11"/><text x="66.6600%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (1 samples, 0.01%)</title><rect x="66.5362%" y="213" width="0.0126%" height="15" fill="rgb(244,117,36)" fg:x="5271" fg:w="1"/><text x="66.7862%" y="223.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (200 samples, 2.52%)</title><rect x="64.0621%" y="357" width="2.5246%" height="15" fill="rgb(226,144,34)" fg:x="5075" fg:w="200"/><text x="64.3121%" y="367.50">&lt;t..</text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.04%)</title><rect x="66.5489%" y="341" width="0.0379%" height="15" fill="rgb(213,23,19)" fg:x="5272" fg:w="3"/><text x="66.7989%" y="351.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.01%)</title><rect x="66.5993%" y="341" width="0.0126%" height="15" fill="rgb(217,75,12)" fg:x="5276" fg:w="1"/><text x="66.8493%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.01%)</title><rect x="66.5993%" y="325" width="0.0126%" height="15" fill="rgb(224,159,17)" fg:x="5276" fg:w="1"/><text x="66.8493%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.01%)</title><rect x="66.5993%" y="309" width="0.0126%" height="15" fill="rgb(217,118,1)" fg:x="5276" fg:w="1"/><text x="66.8493%" y="319.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u16 (3 samples, 0.04%)</title><rect x="66.5867%" y="357" width="0.0379%" height="15" fill="rgb(232,180,48)" fg:x="5275" fg:w="3"/><text x="66.8367%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="66.6120%" y="341" width="0.0126%" height="15" fill="rgb(230,27,33)" fg:x="5277" fg:w="1"/><text x="66.8620%" y="351.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u16::_{{closure}} (1 samples, 0.01%)</title><rect x="66.6120%" y="325" width="0.0126%" height="15" fill="rgb(205,31,21)" fg:x="5277" fg:w="1"/><text x="66.8620%" y="335.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (1 samples, 0.01%)</title><rect x="66.6120%" y="309" width="0.0126%" height="15" fill="rgb(253,59,4)" fg:x="5277" fg:w="1"/><text x="66.8620%" y="319.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (1 samples, 0.01%)</title><rect x="66.6120%" y="293" width="0.0126%" height="15" fill="rgb(224,201,9)" fg:x="5277" fg:w="1"/><text x="66.8620%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (1 samples, 0.01%)</title><rect x="66.6120%" y="277" width="0.0126%" height="15" fill="rgb(229,206,30)" fg:x="5277" fg:w="1"/><text x="66.8620%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (611 samples, 7.71%)</title><rect x="66.6625%" y="325" width="7.7127%" height="15" fill="rgb(212,67,47)" fg:x="5281" fg:w="611"/><text x="66.9125%" y="335.50">alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (611 samples, 7.71%)</title><rect x="66.6625%" y="309" width="7.7127%" height="15" fill="rgb(211,96,50)" fg:x="5281" fg:w="611"/><text x="66.9125%" y="319.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (611 samples, 7.71%)</title><rect x="66.6625%" y="293" width="7.7127%" height="15" fill="rgb(252,114,18)" fg:x="5281" fg:w="611"/><text x="66.9125%" y="303.50">alloc::vec:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (609 samples, 7.69%)</title><rect x="66.6877%" y="277" width="7.6875%" height="15" fill="rgb(223,58,37)" fg:x="5283" fg:w="609"/><text x="66.9377%" y="287.50">core::intri..</text></g><g><title>[libc.so.6] (609 samples, 7.69%)</title><rect x="66.6877%" y="261" width="7.6875%" height="15" fill="rgb(237,70,4)" fg:x="5283" fg:w="609"/><text x="66.9377%" y="271.50">[libc.so.6]</text></g><g><title>[libc.so.6] (274 samples, 3.46%)</title><rect x="75.9657%" y="149" width="3.4587%" height="15" fill="rgb(244,85,46)" fg:x="6018" fg:w="274"/><text x="76.2157%" y="159.50">[li..</text></g><g><title>[libc.so.6] (159 samples, 2.01%)</title><rect x="77.4173%" y="133" width="2.0071%" height="15" fill="rgb(223,39,52)" fg:x="6133" fg:w="159"/><text x="77.6673%" y="143.50">[..</text></g><g><title>[libc.so.6] (6 samples, 0.08%)</title><rect x="79.3486%" y="117" width="0.0757%" height="15" fill="rgb(218,200,14)" fg:x="6286" fg:w="6"/><text x="79.5986%" y="127.50"></text></g><g><title>__lll_lock_wait_private (4 samples, 0.05%)</title><rect x="79.4244%" y="149" width="0.0505%" height="15" fill="rgb(208,171,16)" fg:x="6292" fg:w="4"/><text x="79.6744%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (404 samples, 5.10%)</title><rect x="74.4130%" y="245" width="5.0997%" height="15" fill="rgb(234,200,18)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="255.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (404 samples, 5.10%)</title><rect x="74.4130%" y="229" width="5.0997%" height="15" fill="rgb(228,45,11)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="239.50">alloc:..</text></g><g><title>alloc::alloc::alloc (404 samples, 5.10%)</title><rect x="74.4130%" y="213" width="5.0997%" height="15" fill="rgb(237,182,11)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="223.50">alloc:..</text></g><g><title>__rdl_alloc (404 samples, 5.10%)</title><rect x="74.4130%" y="197" width="5.0997%" height="15" fill="rgb(241,175,49)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="207.50">__rdl_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (404 samples, 5.10%)</title><rect x="74.4130%" y="181" width="5.0997%" height="15" fill="rgb(247,38,35)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="191.50">std::s..</text></g><g><title>malloc (404 samples, 5.10%)</title><rect x="74.4130%" y="165" width="5.0997%" height="15" fill="rgb(228,39,49)" fg:x="5895" fg:w="404"/><text x="74.6630%" y="175.50">malloc</text></g><g><title>__lll_lock_wake_private (3 samples, 0.04%)</title><rect x="79.4749%" y="149" width="0.0379%" height="15" fill="rgb(226,101,26)" fg:x="6296" fg:w="3"/><text x="79.7249%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="79.4875%" y="133" width="0.0252%" height="15" fill="rgb(206,141,19)" fg:x="6297" fg:w="2"/><text x="79.7375%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (408 samples, 5.15%)</title><rect x="74.3752%" y="325" width="5.1502%" height="15" fill="rgb(211,200,13)" fg:x="5892" fg:w="408"/><text x="74.6252%" y="335.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (408 samples, 5.15%)</title><rect x="74.3752%" y="309" width="5.1502%" height="15" fill="rgb(241,121,6)" fg:x="5892" fg:w="408"/><text x="74.6252%" y="319.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (408 samples, 5.15%)</title><rect x="74.3752%" y="293" width="5.1502%" height="15" fill="rgb(234,221,29)" fg:x="5892" fg:w="408"/><text x="74.6252%" y="303.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (408 samples, 5.15%)</title><rect x="74.3752%" y="277" width="5.1502%" height="15" fill="rgb(229,136,5)" fg:x="5892" fg:w="408"/><text x="74.6252%" y="287.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (408 samples, 5.15%)</title><rect x="74.3752%" y="261" width="5.1502%" height="15" fill="rgb(238,36,11)" fg:x="5892" fg:w="408"/><text x="74.6252%" y="271.50">alloc:..</text></g><g><title>alloc::raw_vec::layout_array (1 samples, 0.01%)</title><rect x="79.5127%" y="245" width="0.0126%" height="15" fill="rgb(251,55,41)" fg:x="6299" fg:w="1"/><text x="79.7627%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.01%)</title><rect x="79.5127%" y="229" width="0.0126%" height="15" fill="rgb(242,34,40)" fg:x="6299" fg:w="1"/><text x="79.7627%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.01%)</title><rect x="79.5127%" y="213" width="0.0126%" height="15" fill="rgb(215,42,17)" fg:x="6299" fg:w="1"/><text x="79.7627%" y="223.50"></text></g><g><title>bytes::bytes_mut::Shared::is_unique (6 samples, 0.08%)</title><rect x="79.5254%" y="325" width="0.0757%" height="15" fill="rgb(207,44,46)" fg:x="6300" fg:w="6"/><text x="79.7754%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.08%)</title><rect x="79.5254%" y="309" width="0.0757%" height="15" fill="rgb(211,206,28)" fg:x="6300" fg:w="6"/><text x="79.7754%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.08%)</title><rect x="79.5254%" y="293" width="0.0757%" height="15" fill="rgb(237,167,16)" fg:x="6300" fg:w="6"/><text x="79.7754%" y="303.50"></text></g><g><title>bytes::bytes_mut::release_shared (44 samples, 0.56%)</title><rect x="79.6011%" y="325" width="0.5554%" height="15" fill="rgb(233,66,6)" fg:x="6306" fg:w="44"/><text x="79.8511%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (44 samples, 0.56%)</title><rect x="79.6011%" y="309" width="0.5554%" height="15" fill="rgb(246,123,29)" fg:x="6306" fg:w="44"/><text x="79.8511%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.56%)</title><rect x="79.6011%" y="293" width="0.5554%" height="15" fill="rgb(209,62,40)" fg:x="6306" fg:w="44"/><text x="79.8511%" y="303.50"></text></g><g><title>core::cmp::max (2 samples, 0.03%)</title><rect x="80.1565%" y="325" width="0.0252%" height="15" fill="rgb(218,4,25)" fg:x="6350" fg:w="2"/><text x="80.4065%" y="335.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.03%)</title><rect x="80.1565%" y="309" width="0.0252%" height="15" fill="rgb(253,91,49)" fg:x="6350" fg:w="2"/><text x="80.4065%" y="319.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.03%)</title><rect x="80.1565%" y="293" width="0.0252%" height="15" fill="rgb(228,155,29)" fg:x="6350" fg:w="2"/><text x="80.4065%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="80.1818%" y="325" width="0.0505%" height="15" fill="rgb(243,57,37)" fg:x="6352" fg:w="4"/><text x="80.4318%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="80.1818%" y="309" width="0.0505%" height="15" fill="rgb(244,167,17)" fg:x="6352" fg:w="4"/><text x="80.4318%" y="319.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1,080 samples, 13.63%)</title><rect x="66.6246%" y="357" width="13.6329%" height="15" fill="rgb(207,181,38)" fg:x="5278" fg:w="1080"/><text x="66.8746%" y="367.50">bytes::bytes_mut::Byt..</text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1,078 samples, 13.61%)</title><rect x="66.6498%" y="341" width="13.6077%" height="15" fill="rgb(211,8,23)" fg:x="5280" fg:w="1078"/><text x="66.8998%" y="351.50">bytes::bytes_mut::Byt..</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="80.2323%" y="325" width="0.0252%" height="15" fill="rgb(235,11,44)" fg:x="6356" fg:w="2"/><text x="80.4823%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.03%)</title><rect x="80.2701%" y="341" width="0.0252%" height="15" fill="rgb(248,18,52)" fg:x="6359" fg:w="2"/><text x="80.5201%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (2 samples, 0.03%)</title><rect x="80.2954%" y="341" width="0.0252%" height="15" fill="rgb(208,4,7)" fg:x="6361" fg:w="2"/><text x="80.5454%" y="351.50"></text></g><g><title>[libc.so.6] (98 samples, 1.24%)</title><rect x="82.0121%" y="181" width="1.2371%" height="15" fill="rgb(240,17,39)" fg:x="6497" fg:w="98"/><text x="82.2621%" y="191.50"></text></g><g><title>[libc.so.6] (7 samples, 0.09%)</title><rect x="83.1608%" y="165" width="0.0884%" height="15" fill="rgb(207,170,3)" fg:x="6588" fg:w="7"/><text x="83.4108%" y="175.50"></text></g><g><title>__rdl_alloc (230 samples, 2.90%)</title><rect x="80.3585%" y="229" width="2.9033%" height="15" fill="rgb(236,100,52)" fg:x="6366" fg:w="230"/><text x="80.6085%" y="239.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (230 samples, 2.90%)</title><rect x="80.3585%" y="213" width="2.9033%" height="15" fill="rgb(246,78,51)" fg:x="6366" fg:w="230"/><text x="80.6085%" y="223.50">st..</text></g><g><title>malloc (229 samples, 2.89%)</title><rect x="80.3711%" y="197" width="2.8907%" height="15" fill="rgb(211,17,15)" fg:x="6367" fg:w="229"/><text x="80.6211%" y="207.50">ma..</text></g><g><title>__lll_lock_wait_private (1 samples, 0.01%)</title><rect x="83.2492%" y="181" width="0.0126%" height="15" fill="rgb(209,59,46)" fg:x="6595" fg:w="1"/><text x="83.4992%" y="191.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (234 samples, 2.95%)</title><rect x="80.3459%" y="309" width="2.9538%" height="15" fill="rgb(210,92,25)" fg:x="6365" fg:w="234"/><text x="80.5959%" y="319.50">all..</text></g><g><title>alloc::alloc::exchange_malloc (233 samples, 2.94%)</title><rect x="80.3585%" y="293" width="2.9412%" height="15" fill="rgb(238,174,52)" fg:x="6366" fg:w="233"/><text x="80.6085%" y="303.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (233 samples, 2.94%)</title><rect x="80.3585%" y="277" width="2.9412%" height="15" fill="rgb(230,73,7)" fg:x="6366" fg:w="233"/><text x="80.6085%" y="287.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (233 samples, 2.94%)</title><rect x="80.3585%" y="261" width="2.9412%" height="15" fill="rgb(243,124,40)" fg:x="6366" fg:w="233"/><text x="80.6085%" y="271.50">al..</text></g><g><title>alloc::alloc::alloc (233 samples, 2.94%)</title><rect x="80.3585%" y="245" width="2.9412%" height="15" fill="rgb(244,170,11)" fg:x="6366" fg:w="233"/><text x="80.6085%" y="255.50">al..</text></g><g><title>core::ptr::read_volatile (3 samples, 0.04%)</title><rect x="83.2618%" y="229" width="0.0379%" height="15" fill="rgb(207,114,54)" fg:x="6596" fg:w="3"/><text x="83.5118%" y="239.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (238 samples, 3.00%)</title><rect x="80.3206%" y="325" width="3.0043%" height="15" fill="rgb(205,42,20)" fg:x="6363" fg:w="238"/><text x="80.5706%" y="335.50">byt..</text></g><g><title>bytes::bytes_mut::rebuild_vec (2 samples, 0.03%)</title><rect x="83.2997%" y="309" width="0.0252%" height="15" fill="rgb(230,30,28)" fg:x="6599" fg:w="2"/><text x="83.5497%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.01%)</title><rect x="83.3123%" y="293" width="0.0126%" height="15" fill="rgb(205,73,54)" fg:x="6600" fg:w="1"/><text x="83.5623%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="83.3123%" y="277" width="0.0126%" height="15" fill="rgb(254,227,23)" fg:x="6600" fg:w="1"/><text x="83.5623%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (244 samples, 3.08%)</title><rect x="80.2575%" y="357" width="3.0800%" height="15" fill="rgb(228,202,34)" fg:x="6358" fg:w="244"/><text x="80.5075%" y="367.50">byt..</text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (239 samples, 3.02%)</title><rect x="80.3206%" y="341" width="3.0169%" height="15" fill="rgb(222,225,37)" fg:x="6363" fg:w="239"/><text x="80.5706%" y="351.50">byt..</text></g><g><title>bytes::bytes_mut::increment_shared (1 samples, 0.01%)</title><rect x="83.3249%" y="325" width="0.0126%" height="15" fill="rgb(221,14,54)" fg:x="6601" fg:w="1"/><text x="83.5749%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="83.3249%" y="309" width="0.0126%" height="15" fill="rgb(254,102,2)" fg:x="6601" fg:w="1"/><text x="83.5749%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="83.3249%" y="293" width="0.0126%" height="15" fill="rgb(232,104,17)" fg:x="6601" fg:w="1"/><text x="83.5749%" y="303.50"></text></g><g><title>fastwebsockets::WebSocketRead&lt;S&gt;::read_frame::_{{closure}} (1,753 samples, 22.13%)</title><rect x="61.2219%" y="405" width="22.1283%" height="15" fill="rgb(250,220,14)" fg:x="4850" fg:w="1753"/><text x="61.4719%" y="415.50">fastwebsockets::WebSocketRead&lt;S&gt;::r..</text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (1,686 samples, 21.28%)</title><rect x="62.0677%" y="389" width="21.2825%" height="15" fill="rgb(241,158,9)" fg:x="4917" fg:w="1686"/><text x="62.3177%" y="399.50">fastwebsockets::ReadHalf::read_fra..</text></g><g><title>fastwebsockets::ReadHalf::parse_frame_header::_{{closure}} (1,618 samples, 20.42%)</title><rect x="62.9260%" y="373" width="20.4241%" height="15" fill="rgb(246,9,43)" fg:x="4985" fg:w="1618"/><text x="63.1760%" y="383.50">fastwebsockets::ReadHalf::parse_..</text></g><g><title>fastwebsockets::frame::is_control (1 samples, 0.01%)</title><rect x="83.3375%" y="357" width="0.0126%" height="15" fill="rgb(206,73,33)" fg:x="6602" fg:w="1"/><text x="83.5875%" y="367.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,846 samples, 23.30%)</title><rect x="60.3131%" y="437" width="23.3022%" height="15" fill="rgb(222,79,8)" fg:x="4778" fg:w="1846"/><text x="60.5631%" y="447.50">&lt;core::pin::Pin&lt;P&gt; as core::future::f..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split::_{{closure}} (1,846 samples, 23.30%)</title><rect x="60.3131%" y="421" width="23.3022%" height="15" fill="rgb(234,8,54)" fg:x="4778" fg:w="1846"/><text x="60.5631%" y="431.50">wisp_mux::fastwebsockets::_&lt;impl wisp..</text></g><g><title>wisp_mux::fastwebsockets::payload_to_bytesmut (21 samples, 0.27%)</title><rect x="83.3502%" y="405" width="0.2651%" height="15" fill="rgb(209,134,38)" fg:x="6603" fg:w="21"/><text x="83.6002%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.04%)</title><rect x="83.6152%" y="437" width="0.0379%" height="15" fill="rgb(230,127,29)" fg:x="6624" fg:w="3"/><text x="83.8652%" y="447.50"></text></g><g><title>core::mem::replace (3 samples, 0.04%)</title><rect x="83.6152%" y="421" width="0.0379%" height="15" fill="rgb(242,44,41)" fg:x="6624" fg:w="3"/><text x="83.8652%" y="431.50"></text></g><g><title>core::ptr::read (3 samples, 0.04%)</title><rect x="83.6152%" y="405" width="0.0379%" height="15" fill="rgb(222,56,43)" fg:x="6624" fg:w="3"/><text x="83.8652%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (72 samples, 0.91%)</title><rect x="83.6531%" y="437" width="0.9089%" height="15" fill="rgb(238,39,47)" fg:x="6627" fg:w="72"/><text x="83.9031%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (72 samples, 0.91%)</title><rect x="83.6531%" y="421" width="0.9089%" height="15" fill="rgb(226,79,43)" fg:x="6627" fg:w="72"/><text x="83.9031%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.87%)</title><rect x="83.6910%" y="405" width="0.8710%" height="15" fill="rgb(242,105,53)" fg:x="6630" fg:w="69"/><text x="83.9410%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 0.85%)</title><rect x="83.7162%" y="389" width="0.8457%" height="15" fill="rgb(251,132,46)" fg:x="6632" fg:w="67"/><text x="83.9662%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (67 samples, 0.85%)</title><rect x="83.7162%" y="373" width="0.8457%" height="15" fill="rgb(231,77,14)" fg:x="6632" fg:w="67"/><text x="83.9662%" y="383.50"></text></g><g><title>__rdl_dealloc (67 samples, 0.85%)</title><rect x="83.7162%" y="357" width="0.8457%" height="15" fill="rgb(240,135,9)" fg:x="6632" fg:w="67"/><text x="83.9662%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (67 samples, 0.85%)</title><rect x="83.7162%" y="341" width="0.8457%" height="15" fill="rgb(248,109,14)" fg:x="6632" fg:w="67"/><text x="83.9662%" y="351.50"></text></g><g><title>cfree (67 samples, 0.85%)</title><rect x="83.7162%" y="325" width="0.8457%" height="15" fill="rgb(227,146,52)" fg:x="6632" fg:w="67"/><text x="83.9662%" y="335.50"></text></g><g><title>[libc.so.6] (11 samples, 0.14%)</title><rect x="84.4231%" y="309" width="0.1389%" height="15" fill="rgb(232,54,3)" fg:x="6688" fg:w="11"/><text x="84.6731%" y="319.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,960 samples, 24.74%)</title><rect x="59.8839%" y="469" width="24.7412%" height="15" fill="rgb(229,201,43)" fg:x="4744" fg:w="1960"/><text x="60.1339%" y="479.50">&lt;core::pin::Pin&lt;P&gt; as core::future::fut..</text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (1,960 samples, 24.74%)</title><rect x="59.8839%" y="453" width="24.7412%" height="15" fill="rgb(252,161,33)" fg:x="4744" fg:w="1960"/><text x="60.1339%" y="463.50">&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split (5 samples, 0.06%)</title><rect x="84.5620%" y="437" width="0.0631%" height="15" fill="rgb(226,146,40)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (5 samples, 0.06%)</title><rect x="84.5620%" y="421" width="0.0631%" height="15" fill="rgb(219,47,25)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="84.5620%" y="405" width="0.0631%" height="15" fill="rgb(250,135,13)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.06%)</title><rect x="84.5620%" y="389" width="0.0631%" height="15" fill="rgb(219,229,18)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="84.5620%" y="373" width="0.0631%" height="15" fill="rgb(217,152,27)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="84.5620%" y="357" width="0.0631%" height="15" fill="rgb(225,71,47)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="367.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="84.5620%" y="341" width="0.0631%" height="15" fill="rgb(220,139,14)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="351.50"></text></g><g><title>__rdl_alloc (5 samples, 0.06%)</title><rect x="84.5620%" y="325" width="0.0631%" height="15" fill="rgb(247,54,32)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.06%)</title><rect x="84.5620%" y="309" width="0.0631%" height="15" fill="rgb(252,131,39)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="319.50"></text></g><g><title>malloc (5 samples, 0.06%)</title><rect x="84.5620%" y="293" width="0.0631%" height="15" fill="rgb(210,108,39)" fg:x="6699" fg:w="5"/><text x="84.8120%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.01%)</title><rect x="84.6251%" y="437" width="0.0126%" height="15" fill="rgb(205,23,29)" fg:x="6704" fg:w="1"/><text x="84.8751%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.11%)</title><rect x="84.6377%" y="437" width="0.1136%" height="15" fill="rgb(246,139,46)" fg:x="6705" fg:w="9"/><text x="84.8877%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.11%)</title><rect x="84.6377%" y="421" width="0.1136%" height="15" fill="rgb(250,81,26)" fg:x="6705" fg:w="9"/><text x="84.8877%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="84.6377%" y="405" width="0.1136%" height="15" fill="rgb(214,104,7)" fg:x="6705" fg:w="9"/><text x="84.8877%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.11%)</title><rect x="84.6377%" y="389" width="0.1136%" height="15" fill="rgb(233,189,8)" fg:x="6705" fg:w="9"/><text x="84.8877%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.11%)</title><rect x="84.6377%" y="373" width="0.1136%" height="15" fill="rgb(228,141,17)" fg:x="6705" fg:w="9"/><text x="84.8877%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;wisp_mux::inner::WsEvent,flume::async::AsyncSignal&gt;&gt;&gt; (6 samples, 0.08%)</title><rect x="84.7513%" y="437" width="0.0757%" height="15" fill="rgb(247,157,1)" fg:x="6714" fg:w="6"/><text x="85.0013%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="84.7513%" y="421" width="0.0757%" height="15" fill="rgb(249,225,5)" fg:x="6714" fg:w="6"/><text x="85.0013%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.08%)</title><rect x="84.7513%" y="405" width="0.0757%" height="15" fill="rgb(242,55,13)" fg:x="6714" fg:w="6"/><text x="85.0013%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.08%)</title><rect x="84.7513%" y="389" width="0.0757%" height="15" fill="rgb(230,49,50)" fg:x="6714" fg:w="6"/><text x="85.0013%" y="399.50"></text></g><g><title>core::task::wake::Context::waker (1 samples, 0.01%)</title><rect x="84.8271%" y="437" width="0.0126%" height="15" fill="rgb(241,111,38)" fg:x="6720" fg:w="1"/><text x="85.0771%" y="447.50"></text></g><g><title>core::mem::drop (7 samples, 0.09%)</title><rect x="84.8523%" y="405" width="0.0884%" height="15" fill="rgb(252,155,4)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;wisp_mux::inner::WsEvent&gt;&gt;&gt; (7 samples, 0.09%)</title><rect x="84.8523%" y="389" width="0.0884%" height="15" fill="rgb(212,69,32)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.09%)</title><rect x="84.8523%" y="373" width="0.0884%" height="15" fill="rgb(243,107,47)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (7 samples, 0.09%)</title><rect x="84.8523%" y="357" width="0.0884%" height="15" fill="rgb(247,130,12)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (7 samples, 0.09%)</title><rect x="84.8523%" y="341" width="0.0884%" height="15" fill="rgb(233,74,16)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (7 samples, 0.09%)</title><rect x="84.8523%" y="325" width="0.0884%" height="15" fill="rgb(208,58,18)" fg:x="6722" fg:w="7"/><text x="85.1023%" y="335.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (2 samples, 0.03%)</title><rect x="84.9407%" y="405" width="0.0252%" height="15" fill="rgb(242,225,1)" fg:x="6729" fg:w="2"/><text x="85.1907%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.01%)</title><rect x="84.9533%" y="389" width="0.0126%" height="15" fill="rgb(249,39,40)" fg:x="6730" fg:w="1"/><text x="85.2033%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.01%)</title><rect x="84.9533%" y="373" width="0.0126%" height="15" fill="rgb(207,72,44)" fg:x="6730" fg:w="1"/><text x="85.2033%" y="383.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (26 samples, 0.33%)</title><rect x="84.8397%" y="437" width="0.3282%" height="15" fill="rgb(215,193,12)" fg:x="6721" fg:w="26"/><text x="85.0897%" y="447.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (26 samples, 0.33%)</title><rect x="84.8397%" y="421" width="0.3282%" height="15" fill="rgb(248,41,39)" fg:x="6721" fg:w="26"/><text x="85.0897%" y="431.50"></text></g><g><title>flume::wait_lock (16 samples, 0.20%)</title><rect x="84.9659%" y="405" width="0.2020%" height="15" fill="rgb(253,85,4)" fg:x="6731" fg:w="16"/><text x="85.2159%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.20%)</title><rect x="84.9659%" y="389" width="0.2020%" height="15" fill="rgb(243,70,31)" fg:x="6731" fg:w="16"/><text x="85.2159%" y="399.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (16 samples, 0.20%)</title><rect x="84.9659%" y="373" width="0.2020%" height="15" fill="rgb(253,195,26)" fg:x="6731" fg:w="16"/><text x="85.2159%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.20%)</title><rect x="84.9659%" y="357" width="0.2020%" height="15" fill="rgb(243,42,11)" fg:x="6731" fg:w="16"/><text x="85.2159%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.20%)</title><rect x="84.9659%" y="341" width="0.2020%" height="15" fill="rgb(239,66,17)" fg:x="6731" fg:w="16"/><text x="85.2159%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="85.1679%" y="421" width="0.0126%" height="15" fill="rgb(217,132,21)" fg:x="6747" fg:w="1"/><text x="85.4179%" y="431.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (48 samples, 0.61%)</title><rect x="84.6251%" y="469" width="0.6059%" height="15" fill="rgb(252,202,21)" fg:x="6704" fg:w="48"/><text x="84.8751%" y="479.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (48 samples, 0.61%)</title><rect x="84.6251%" y="453" width="0.6059%" height="15" fill="rgb(233,98,36)" fg:x="6704" fg:w="48"/><text x="84.8751%" y="463.50"></text></g><g><title>flume::async::&lt;impl flume::Hook&lt;T,flume::async::AsyncSignal&gt;&gt;::update_waker (5 samples, 0.06%)</title><rect x="85.1679%" y="437" width="0.0631%" height="15" fill="rgb(216,153,54)" fg:x="6747" fg:w="5"/><text x="85.4179%" y="447.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::lock (4 samples, 0.05%)</title><rect x="85.1805%" y="421" width="0.0505%" height="15" fill="rgb(250,99,7)" fg:x="6748" fg:w="4"/><text x="85.4305%" y="431.50"></text></g><g><title>spin::mutex::spin::SpinMutex&lt;T,R&gt;::lock (4 samples, 0.05%)</title><rect x="85.1805%" y="405" width="0.0505%" height="15" fill="rgb(207,56,50)" fg:x="6748" fg:w="4"/><text x="85.4305%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange_weak (4 samples, 0.05%)</title><rect x="85.1805%" y="389" width="0.0505%" height="15" fill="rgb(244,61,34)" fg:x="6748" fg:w="4"/><text x="85.4305%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.05%)</title><rect x="85.1805%" y="373" width="0.0505%" height="15" fill="rgb(241,50,38)" fg:x="6748" fg:w="4"/><text x="85.4305%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="85.4835%" y="293" width="0.0126%" height="15" fill="rgb(212,166,30)" fg:x="6772" fg:w="1"/><text x="85.7335%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.39%)</title><rect x="85.4582%" y="373" width="0.3913%" height="15" fill="rgb(249,127,32)" fg:x="6770" fg:w="31"/><text x="85.7082%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.37%)</title><rect x="85.4835%" y="357" width="0.3661%" height="15" fill="rgb(209,103,0)" fg:x="6772" fg:w="29"/><text x="85.7335%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.37%)</title><rect x="85.4835%" y="341" width="0.3661%" height="15" fill="rgb(238,209,51)" fg:x="6772" fg:w="29"/><text x="85.7335%" y="351.50"></text></g><g><title>__rdl_dealloc (29 samples, 0.37%)</title><rect x="85.4835%" y="325" width="0.3661%" height="15" fill="rgb(237,56,23)" fg:x="6772" fg:w="29"/><text x="85.7335%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (29 samples, 0.37%)</title><rect x="85.4835%" y="309" width="0.3661%" height="15" fill="rgb(215,153,46)" fg:x="6772" fg:w="29"/><text x="85.7335%" y="319.50"></text></g><g><title>cfree (28 samples, 0.35%)</title><rect x="85.4961%" y="293" width="0.3534%" height="15" fill="rgb(224,49,31)" fg:x="6773" fg:w="28"/><text x="85.7461%" y="303.50"></text></g><g><title>[libc.so.6] (13 samples, 0.16%)</title><rect x="85.6854%" y="277" width="0.1641%" height="15" fill="rgb(250,18,42)" fg:x="6788" fg:w="13"/><text x="85.9354%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,083 samples, 26.29%)</title><rect x="59.5683%" y="549" width="26.2939%" height="15" fill="rgb(215,176,39)" fg:x="4719" fg:w="2083"/><text x="59.8183%" y="559.50">core::ops::function::impls::&lt;impl core::op..</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}}::_{{closure}} (2,083 samples, 26.29%)</title><rect x="59.5683%" y="533" width="26.2939%" height="15" fill="rgb(223,77,29)" fg:x="4719" fg:w="2083"/><text x="59.8183%" y="543.50">wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop:..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (2,058 samples, 25.98%)</title><rect x="59.8839%" y="517" width="25.9783%" height="15" fill="rgb(234,94,52)" fg:x="4744" fg:w="2058"/><text x="60.1339%" y="527.50">futures_util::future::future::FutureExt::p..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,058 samples, 25.98%)</title><rect x="59.8839%" y="501" width="25.9783%" height="15" fill="rgb(220,154,50)" fg:x="4744" fg:w="2058"/><text x="60.1339%" y="511.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (2,058 samples, 25.98%)</title><rect x="59.8839%" y="485" width="25.9783%" height="15" fill="rgb(212,11,10)" fg:x="4744" fg:w="2058"/><text x="60.1339%" y="495.50">&lt;futures_util::future::future::fuse::Fuse&lt;..</text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (50 samples, 0.63%)</title><rect x="85.2310%" y="469" width="0.6312%" height="15" fill="rgb(205,166,19)" fg:x="6752" fg:w="50"/><text x="85.4810%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll::_{{closure}} (36 samples, 0.45%)</title><rect x="85.4077%" y="453" width="0.4544%" height="15" fill="rgb(244,198,16)" fg:x="6766" fg:w="36"/><text x="85.6577%" y="463.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (36 samples, 0.45%)</title><rect x="85.4077%" y="437" width="0.4544%" height="15" fill="rgb(219,69,12)" fg:x="6766" fg:w="36"/><text x="85.6577%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt;&gt; (36 samples, 0.45%)</title><rect x="85.4077%" y="421" width="0.4544%" height="15" fill="rgb(245,30,7)" fg:x="6766" fg:w="36"/><text x="85.6577%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (36 samples, 0.45%)</title><rect x="85.4077%" y="405" width="0.4544%" height="15" fill="rgb(218,221,48)" fg:x="6766" fg:w="36"/><text x="85.6577%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (36 samples, 0.45%)</title><rect x="85.4077%" y="389" width="0.4544%" height="15" fill="rgb(216,66,15)" fg:x="6766" fg:w="36"/><text x="85.6577%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="85.8495%" y="373" width="0.0126%" height="15" fill="rgb(226,122,50)" fg:x="6801" fg:w="1"/><text x="86.0995%" y="383.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.01%)</title><rect x="85.8748%" y="501" width="0.0126%" height="15" fill="rgb(239,156,16)" fg:x="6803" fg:w="1"/><text x="86.1248%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (19 samples, 0.24%)</title><rect x="85.8622%" y="533" width="0.2398%" height="15" fill="rgb(224,27,38)" fg:x="6802" fg:w="19"/><text x="86.1122%" y="543.50"></text></g><g><title>core::ptr::swap (18 samples, 0.23%)</title><rect x="85.8748%" y="517" width="0.2272%" height="15" fill="rgb(224,39,27)" fg:x="6803" fg:w="18"/><text x="86.1248%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.21%)</title><rect x="85.8874%" y="501" width="0.2146%" height="15" fill="rgb(215,92,29)" fg:x="6804" fg:w="17"/><text x="86.1374%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="86.1020%" y="469" width="0.0252%" height="15" fill="rgb(207,159,16)" fg:x="6821" fg:w="2"/><text x="86.3520%" y="479.50"></text></g><g><title>futures_util::async_await::random::random::RNG::_{{constant}}::_{{closure}} (2 samples, 0.03%)</title><rect x="86.1020%" y="453" width="0.0252%" height="15" fill="rgb(238,163,47)" fg:x="6821" fg:w="2"/><text x="86.3520%" y="463.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (2 samples, 0.03%)</title><rect x="86.1020%" y="437" width="0.0252%" height="15" fill="rgb(219,91,49)" fg:x="6821" fg:w="2"/><text x="86.3520%" y="447.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,128 samples, 26.86%)</title><rect x="59.2780%" y="581" width="26.8619%" height="15" fill="rgb(227,167,31)" fg:x="4696" fg:w="2128"/><text x="59.5280%" y="591.50">&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; a..</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}} (2,128 samples, 26.86%)</title><rect x="59.2780%" y="565" width="26.8619%" height="15" fill="rgb(234,80,54)" fg:x="4696" fg:w="2128"/><text x="59.5280%" y="575.50">wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::..</text></g><g><title>futures_util::async_await::random::shuffle (22 samples, 0.28%)</title><rect x="85.8622%" y="549" width="0.2777%" height="15" fill="rgb(212,114,2)" fg:x="6802" fg:w="22"/><text x="86.1122%" y="559.50"></text></g><g><title>futures_util::async_await::random::gen_index (3 samples, 0.04%)</title><rect x="86.1020%" y="533" width="0.0379%" height="15" fill="rgb(234,50,24)" fg:x="6821" fg:w="3"/><text x="86.3520%" y="543.50"></text></g><g><title>futures_util::async_await::random::random (3 samples, 0.04%)</title><rect x="86.1020%" y="517" width="0.0379%" height="15" fill="rgb(221,68,8)" fg:x="6821" fg:w="3"/><text x="86.3520%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.04%)</title><rect x="86.1020%" y="501" width="0.0379%" height="15" fill="rgb(254,180,31)" fg:x="6821" fg:w="3"/><text x="86.3520%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.04%)</title><rect x="86.1020%" y="485" width="0.0379%" height="15" fill="rgb(247,130,50)" fg:x="6821" fg:w="3"/><text x="86.3520%" y="495.50"></text></g><g><title>futures_util::async_await::random::random::_{{closure}} (1 samples, 0.01%)</title><rect x="86.1272%" y="469" width="0.0126%" height="15" fill="rgb(211,109,4)" fg:x="6823" fg:w="1"/><text x="86.3772%" y="479.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (1 samples, 0.01%)</title><rect x="86.1272%" y="453" width="0.0126%" height="15" fill="rgb(238,50,21)" fg:x="6823" fg:w="1"/><text x="86.3772%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (1 samples, 0.01%)</title><rect x="86.1272%" y="437" width="0.0126%" height="15" fill="rgb(225,57,45)" fg:x="6823" fg:w="1"/><text x="86.3772%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (1 samples, 0.01%)</title><rect x="86.1272%" y="421" width="0.0126%" height="15" fill="rgb(209,196,50)" fg:x="6823" fg:w="1"/><text x="86.3772%" y="431.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split (12 samples, 0.15%)</title><rect x="86.1399%" y="581" width="0.1515%" height="15" fill="rgb(242,140,13)" fg:x="6824" fg:w="12"/><text x="86.3899%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (12 samples, 0.15%)</title><rect x="86.1399%" y="565" width="0.1515%" height="15" fill="rgb(217,111,7)" fg:x="6824" fg:w="12"/><text x="86.3899%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.15%)</title><rect x="86.1399%" y="549" width="0.1515%" height="15" fill="rgb(253,193,51)" fg:x="6824" fg:w="12"/><text x="86.3899%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.13%)</title><rect x="86.1651%" y="533" width="0.1262%" height="15" fill="rgb(252,70,29)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.13%)</title><rect x="86.1651%" y="517" width="0.1262%" height="15" fill="rgb(232,127,12)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.13%)</title><rect x="86.1651%" y="501" width="0.1262%" height="15" fill="rgb(211,180,21)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="511.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.13%)</title><rect x="86.1651%" y="485" width="0.1262%" height="15" fill="rgb(229,72,13)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="495.50"></text></g><g><title>__rdl_alloc (10 samples, 0.13%)</title><rect x="86.1651%" y="469" width="0.1262%" height="15" fill="rgb(240,211,49)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="479.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.13%)</title><rect x="86.1651%" y="453" width="0.1262%" height="15" fill="rgb(219,149,40)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="463.50"></text></g><g><title>malloc (10 samples, 0.13%)</title><rect x="86.1651%" y="437" width="0.1262%" height="15" fill="rgb(210,127,46)" fg:x="6826" fg:w="10"/><text x="86.4151%" y="447.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (1 samples, 0.01%)</title><rect x="86.7079%" y="533" width="0.0126%" height="15" fill="rgb(220,106,7)" fg:x="6869" fg:w="1"/><text x="86.9579%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="86.7079%" y="517" width="0.0126%" height="15" fill="rgb(249,31,22)" fg:x="6869" fg:w="1"/><text x="86.9579%" y="527.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.01%)</title><rect x="86.7079%" y="501" width="0.0126%" height="15" fill="rgb(253,1,49)" fg:x="6869" fg:w="1"/><text x="86.9579%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.01%)</title><rect x="86.7079%" y="485" width="0.0126%" height="15" fill="rgb(227,144,33)" fg:x="6869" fg:w="1"/><text x="86.9579%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="86.7079%" y="469" width="0.0126%" height="15" fill="rgb(249,163,44)" fg:x="6869" fg:w="1"/><text x="86.9579%" y="479.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (1 samples, 0.01%)</title><rect x="86.7205%" y="485" width="0.0126%" height="15" fill="rgb(234,15,39)" fg:x="6870" fg:w="1"/><text x="86.9705%" y="495.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.01%)</title><rect x="86.7205%" y="469" width="0.0126%" height="15" fill="rgb(207,66,16)" fg:x="6870" fg:w="1"/><text x="86.9705%" y="479.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.03%)</title><rect x="86.7331%" y="453" width="0.0252%" height="15" fill="rgb(233,112,24)" fg:x="6871" fg:w="2"/><text x="86.9831%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="86.7331%" y="437" width="0.0252%" height="15" fill="rgb(230,90,22)" fg:x="6871" fg:w="2"/><text x="86.9831%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="86.7331%" y="421" width="0.0252%" height="15" fill="rgb(229,61,13)" fg:x="6871" fg:w="2"/><text x="86.9831%" y="431.50"></text></g><g><title>event_listener::Event&lt;T&gt;::notify (5 samples, 0.06%)</title><rect x="86.7079%" y="565" width="0.0631%" height="15" fill="rgb(225,57,24)" fg:x="6869" fg:w="5"/><text x="86.9579%" y="575.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::notify (5 samples, 0.06%)</title><rect x="86.7079%" y="549" width="0.0631%" height="15" fill="rgb(208,169,48)" fg:x="6869" fg:w="5"/><text x="86.9579%" y="559.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::notify (4 samples, 0.05%)</title><rect x="86.7205%" y="533" width="0.0505%" height="15" fill="rgb(244,218,51)" fg:x="6870" fg:w="4"/><text x="86.9705%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.05%)</title><rect x="86.7205%" y="517" width="0.0505%" height="15" fill="rgb(214,148,10)" fg:x="6870" fg:w="4"/><text x="86.9705%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (4 samples, 0.05%)</title><rect x="86.7205%" y="501" width="0.0505%" height="15" fill="rgb(225,174,27)" fg:x="6870" fg:w="4"/><text x="86.9705%" y="511.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.04%)</title><rect x="86.7331%" y="485" width="0.0379%" height="15" fill="rgb(230,96,26)" fg:x="6871" fg:w="3"/><text x="86.9831%" y="495.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (3 samples, 0.04%)</title><rect x="86.7331%" y="469" width="0.0379%" height="15" fill="rgb(232,10,30)" fg:x="6871" fg:w="3"/><text x="86.9831%" y="479.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::_{{closure}} (1 samples, 0.01%)</title><rect x="86.7584%" y="453" width="0.0126%" height="15" fill="rgb(222,8,50)" fg:x="6873" fg:w="1"/><text x="87.0084%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (1 samples, 0.01%)</title><rect x="86.7963%" y="549" width="0.0126%" height="15" fill="rgb(213,81,27)" fg:x="6876" fg:w="1"/><text x="87.0463%" y="559.50"></text></g><g><title>[libc.so.6] (39 samples, 0.49%)</title><rect x="87.5284%" y="293" width="0.4923%" height="15" fill="rgb(245,50,10)" fg:x="6934" fg:w="39"/><text x="87.7784%" y="303.50"></text></g><g><title>[libc.so.6] (22 samples, 0.28%)</title><rect x="87.7430%" y="277" width="0.2777%" height="15" fill="rgb(216,100,18)" fg:x="6951" fg:w="22"/><text x="87.9930%" y="287.50"></text></g><g><title>[libc.so.6] (7 samples, 0.09%)</title><rect x="87.9323%" y="261" width="0.0884%" height="15" fill="rgb(236,147,54)" fg:x="6966" fg:w="7"/><text x="88.1823%" y="271.50"></text></g><g><title>[libc.so.6] (90 samples, 1.14%)</title><rect x="86.9730%" y="309" width="1.1361%" height="15" fill="rgb(205,143,26)" fg:x="6890" fg:w="90"/><text x="87.2230%" y="319.50"></text></g><g><title>__lll_lock_wait_private (7 samples, 0.09%)</title><rect x="88.0207%" y="293" width="0.0884%" height="15" fill="rgb(236,26,9)" fg:x="6973" fg:w="7"/><text x="88.2707%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (103 samples, 1.30%)</title><rect x="86.8341%" y="389" width="1.3002%" height="15" fill="rgb(221,165,53)" fg:x="6879" fg:w="103"/><text x="87.0841%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (103 samples, 1.30%)</title><rect x="86.8341%" y="373" width="1.3002%" height="15" fill="rgb(214,110,17)" fg:x="6879" fg:w="103"/><text x="87.0841%" y="383.50"></text></g><g><title>__rdl_dealloc (103 samples, 1.30%)</title><rect x="86.8341%" y="357" width="1.3002%" height="15" fill="rgb(237,197,12)" fg:x="6879" fg:w="103"/><text x="87.0841%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (103 samples, 1.30%)</title><rect x="86.8341%" y="341" width="1.3002%" height="15" fill="rgb(205,84,17)" fg:x="6879" fg:w="103"/><text x="87.0841%" y="351.50"></text></g><g><title>cfree (102 samples, 1.29%)</title><rect x="86.8468%" y="325" width="1.2876%" height="15" fill="rgb(237,18,45)" fg:x="6880" fg:w="102"/><text x="87.0968%" y="335.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.03%)</title><rect x="88.1091%" y="309" width="0.0252%" height="15" fill="rgb(221,87,14)" fg:x="6980" fg:w="2"/><text x="88.3591%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.1217%" y="293" width="0.0126%" height="15" fill="rgb(238,186,15)" fg:x="6981" fg:w="1"/><text x="88.3717%" y="303.50"></text></g><g><title>core::mem::drop (105 samples, 1.33%)</title><rect x="86.8215%" y="501" width="1.3254%" height="15" fill="rgb(208,115,11)" fg:x="6878" fg:w="105"/><text x="87.0715%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (105 samples, 1.33%)</title><rect x="86.8215%" y="485" width="1.3254%" height="15" fill="rgb(254,175,0)" fg:x="6878" fg:w="105"/><text x="87.0715%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (104 samples, 1.31%)</title><rect x="86.8341%" y="469" width="1.3128%" height="15" fill="rgb(227,24,42)" fg:x="6879" fg:w="104"/><text x="87.0841%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (104 samples, 1.31%)</title><rect x="86.8341%" y="453" width="1.3128%" height="15" fill="rgb(223,211,37)" fg:x="6879" fg:w="104"/><text x="87.0841%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (104 samples, 1.31%)</title><rect x="86.8341%" y="437" width="1.3128%" height="15" fill="rgb(235,49,27)" fg:x="6879" fg:w="104"/><text x="87.0841%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 1.31%)</title><rect x="86.8341%" y="421" width="1.3128%" height="15" fill="rgb(254,97,51)" fg:x="6879" fg:w="104"/><text x="87.0841%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (104 samples, 1.31%)</title><rect x="86.8341%" y="405" width="1.3128%" height="15" fill="rgb(249,51,40)" fg:x="6879" fg:w="104"/><text x="87.0841%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.01%)</title><rect x="88.1343%" y="389" width="0.0126%" height="15" fill="rgb(210,128,45)" fg:x="6982" fg:w="1"/><text x="88.3843%" y="399.50"></text></g><g><title>bytes::bytes_mut::release_shared (119 samples, 1.50%)</title><rect x="86.8215%" y="517" width="1.5021%" height="15" fill="rgb(224,137,50)" fg:x="6878" fg:w="119"/><text x="87.0715%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (14 samples, 0.18%)</title><rect x="88.1469%" y="501" width="0.1767%" height="15" fill="rgb(242,15,9)" fg:x="6983" fg:w="14"/><text x="88.3969%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (14 samples, 0.18%)</title><rect x="88.1469%" y="485" width="0.1767%" height="15" fill="rgb(233,187,41)" fg:x="6983" fg:w="14"/><text x="88.3969%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (131 samples, 1.65%)</title><rect x="86.8089%" y="549" width="1.6536%" height="15" fill="rgb(227,2,29)" fg:x="6877" fg:w="131"/><text x="87.0589%" y="559.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (131 samples, 1.65%)</title><rect x="86.8089%" y="533" width="1.6536%" height="15" fill="rgb(222,70,3)" fg:x="6877" fg:w="131"/><text x="87.0589%" y="543.50"></text></g><g><title>cfree (11 samples, 0.14%)</title><rect x="88.3237%" y="517" width="0.1389%" height="15" fill="rgb(213,11,42)" fg:x="6997" fg:w="11"/><text x="88.5737%" y="527.50"></text></g><g><title>[libc.so.6] (6 samples, 0.08%)</title><rect x="88.3868%" y="501" width="0.0757%" height="15" fill="rgb(225,150,9)" fg:x="7002" fg:w="6"/><text x="88.6368%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="88.4625%" y="533" width="0.0126%" height="15" fill="rgb(230,162,45)" fg:x="7008" fg:w="1"/><text x="88.7125%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="88.5256%" y="405" width="0.0126%" height="15" fill="rgb(222,14,52)" fg:x="7013" fg:w="1"/><text x="88.7756%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="88.5256%" y="389" width="0.0126%" height="15" fill="rgb(254,198,14)" fg:x="7013" fg:w="1"/><text x="88.7756%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="88.5256%" y="373" width="0.0126%" height="15" fill="rgb(220,217,30)" fg:x="7013" fg:w="1"/><text x="88.7756%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.01%)</title><rect x="88.5635%" y="357" width="0.0126%" height="15" fill="rgb(215,146,41)" fg:x="7016" fg:w="1"/><text x="88.8135%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="88.5635%" y="341" width="0.0126%" height="15" fill="rgb(217,27,36)" fg:x="7016" fg:w="1"/><text x="88.8135%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (5 samples, 0.06%)</title><rect x="88.5761%" y="357" width="0.0631%" height="15" fill="rgb(219,218,39)" fg:x="7017" fg:w="5"/><text x="88.8261%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 0.06%)</title><rect x="88.5761%" y="341" width="0.0631%" height="15" fill="rgb(219,4,42)" fg:x="7017" fg:w="5"/><text x="88.8261%" y="351.50"></text></g><g><title>clock_gettime (5 samples, 0.06%)</title><rect x="88.5761%" y="325" width="0.0631%" height="15" fill="rgb(249,119,36)" fg:x="7017" fg:w="5"/><text x="88.8261%" y="335.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.03%)</title><rect x="88.6140%" y="309" width="0.0252%" height="15" fill="rgb(209,23,33)" fg:x="7020" fg:w="2"/><text x="88.8640%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::hash (2 samples, 0.03%)</title><rect x="88.6392%" y="341" width="0.0252%" height="15" fill="rgb(211,10,0)" fg:x="7022" fg:w="2"/><text x="88.8892%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.11%)</title><rect x="88.5635%" y="389" width="0.1136%" height="15" fill="rgb(208,99,37)" fg:x="7016" fg:w="9"/><text x="88.8135%" y="399.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (9 samples, 0.11%)</title><rect x="88.5635%" y="373" width="0.1136%" height="15" fill="rgb(213,132,31)" fg:x="7016" fg:w="9"/><text x="88.8135%" y="383.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.04%)</title><rect x="88.6392%" y="357" width="0.0379%" height="15" fill="rgb(243,129,40)" fg:x="7022" fg:w="3"/><text x="88.8892%" y="367.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.01%)</title><rect x="88.6645%" y="341" width="0.0126%" height="15" fill="rgb(210,66,33)" fg:x="7024" fg:w="1"/><text x="88.9145%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.01%)</title><rect x="88.6645%" y="325" width="0.0126%" height="15" fill="rgb(209,189,4)" fg:x="7024" fg:w="1"/><text x="88.9145%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="88.6645%" y="309" width="0.0126%" height="15" fill="rgb(214,107,37)" fg:x="7024" fg:w="1"/><text x="88.9145%" y="319.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="88.6771%" y="389" width="0.0126%" height="15" fill="rgb(245,88,54)" fg:x="7025" fg:w="1"/><text x="88.9271%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.6771%" y="373" width="0.0126%" height="15" fill="rgb(205,146,20)" fg:x="7025" fg:w="1"/><text x="88.9271%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (3 samples, 0.04%)</title><rect x="88.6897%" y="389" width="0.0379%" height="15" fill="rgb(220,161,25)" fg:x="7026" fg:w="3"/><text x="88.9397%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (3 samples, 0.04%)</title><rect x="88.6897%" y="373" width="0.0379%" height="15" fill="rgb(215,152,15)" fg:x="7026" fg:w="3"/><text x="88.9397%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (3 samples, 0.04%)</title><rect x="88.6897%" y="357" width="0.0379%" height="15" fill="rgb(233,192,44)" fg:x="7026" fg:w="3"/><text x="88.9397%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.04%)</title><rect x="88.6897%" y="341" width="0.0379%" height="15" fill="rgb(240,170,46)" fg:x="7026" fg:w="3"/><text x="88.9397%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (1 samples, 0.01%)</title><rect x="88.7276%" y="389" width="0.0126%" height="15" fill="rgb(207,104,33)" fg:x="7029" fg:w="1"/><text x="88.9776%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.01%)</title><rect x="88.7276%" y="373" width="0.0126%" height="15" fill="rgb(219,21,39)" fg:x="7029" fg:w="1"/><text x="88.9776%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="88.7276%" y="357" width="0.0126%" height="15" fill="rgb(214,133,29)" fg:x="7029" fg:w="1"/><text x="88.9776%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (22 samples, 0.28%)</title><rect x="88.5130%" y="469" width="0.2777%" height="15" fill="rgb(226,93,6)" fg:x="7012" fg:w="22"/><text x="88.7630%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (22 samples, 0.28%)</title><rect x="88.5130%" y="453" width="0.2777%" height="15" fill="rgb(252,222,34)" fg:x="7012" fg:w="22"/><text x="88.7630%" y="463.50"></text></g><g><title>tokio::runtime::context::with_scheduler (22 samples, 0.28%)</title><rect x="88.5130%" y="437" width="0.2777%" height="15" fill="rgb(252,92,48)" fg:x="7012" fg:w="22"/><text x="88.7630%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (22 samples, 0.28%)</title><rect x="88.5130%" y="421" width="0.2777%" height="15" fill="rgb(245,223,24)" fg:x="7012" fg:w="22"/><text x="88.7630%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (20 samples, 0.25%)</title><rect x="88.5382%" y="405" width="0.2525%" height="15" fill="rgb(205,176,3)" fg:x="7014" fg:w="20"/><text x="88.7882%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (4 samples, 0.05%)</title><rect x="88.7402%" y="389" width="0.0505%" height="15" fill="rgb(235,151,15)" fg:x="7030" fg:w="4"/><text x="88.9902%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (3 samples, 0.04%)</title><rect x="88.7528%" y="373" width="0.0379%" height="15" fill="rgb(237,209,11)" fg:x="7031" fg:w="3"/><text x="89.0028%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (3 samples, 0.04%)</title><rect x="88.7528%" y="357" width="0.0379%" height="15" fill="rgb(243,227,24)" fg:x="7031" fg:w="3"/><text x="89.0028%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.04%)</title><rect x="88.7528%" y="341" width="0.0379%" height="15" fill="rgb(239,193,16)" fg:x="7031" fg:w="3"/><text x="89.0028%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.04%)</title><rect x="88.7528%" y="325" width="0.0379%" height="15" fill="rgb(231,27,9)" fg:x="7031" fg:w="3"/><text x="89.0028%" y="335.50"></text></g><g><title>&lt;flume::async::AsyncSignal as flume::signal::Signal&gt;::fire (24 samples, 0.30%)</title><rect x="88.5130%" y="501" width="0.3030%" height="15" fill="rgb(219,169,10)" fg:x="7012" fg:w="24"/><text x="88.7630%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (24 samples, 0.30%)</title><rect x="88.5130%" y="485" width="0.3030%" height="15" fill="rgb(244,229,43)" fg:x="7012" fg:w="24"/><text x="88.7630%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.03%)</title><rect x="88.7907%" y="469" width="0.0252%" height="15" fill="rgb(254,38,20)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (2 samples, 0.03%)</title><rect x="88.7907%" y="453" width="0.0252%" height="15" fill="rgb(250,47,30)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="463.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (2 samples, 0.03%)</title><rect x="88.7907%" y="437" width="0.0252%" height="15" fill="rgb(224,124,36)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (2 samples, 0.03%)</title><rect x="88.7907%" y="421" width="0.0252%" height="15" fill="rgb(246,68,51)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.03%)</title><rect x="88.7907%" y="405" width="0.0252%" height="15" fill="rgb(253,43,49)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="88.7907%" y="389" width="0.0252%" height="15" fill="rgb(219,54,36)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="88.7907%" y="373" width="0.0252%" height="15" fill="rgb(227,133,34)" fg:x="7034" fg:w="2"/><text x="89.0407%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.01%)</title><rect x="88.8160%" y="501" width="0.0126%" height="15" fill="rgb(247,227,15)" fg:x="7036" fg:w="1"/><text x="89.0660%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.01%)</title><rect x="88.8286%" y="501" width="0.0126%" height="15" fill="rgb(229,96,14)" fg:x="7037" fg:w="1"/><text x="89.0786%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.01%)</title><rect x="88.8286%" y="485" width="0.0126%" height="15" fill="rgb(220,79,17)" fg:x="7037" fg:w="1"/><text x="89.0786%" y="495.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="88.8286%" y="469" width="0.0126%" height="15" fill="rgb(205,131,53)" fg:x="7037" fg:w="1"/><text x="89.0786%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (5 samples, 0.06%)</title><rect x="88.8412%" y="501" width="0.0631%" height="15" fill="rgb(209,50,29)" fg:x="7038" fg:w="5"/><text x="89.0912%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (3 samples, 0.04%)</title><rect x="88.8664%" y="485" width="0.0379%" height="15" fill="rgb(245,86,46)" fg:x="7040" fg:w="3"/><text x="89.1164%" y="495.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="88.8664%" y="469" width="0.0379%" height="15" fill="rgb(235,66,46)" fg:x="7040" fg:w="3"/><text x="89.1164%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="88.9043%" y="501" width="0.0252%" height="15" fill="rgb(232,148,31)" fg:x="7043" fg:w="2"/><text x="89.1543%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.03%)</title><rect x="88.9296%" y="501" width="0.0252%" height="15" fill="rgb(217,149,8)" fg:x="7045" fg:w="2"/><text x="89.1796%" y="511.50"></text></g><g><title>flume::Shared&lt;T&gt;::send::_{{closure}} (2 samples, 0.03%)</title><rect x="88.9296%" y="485" width="0.0252%" height="15" fill="rgb(209,183,11)" fg:x="7045" fg:w="2"/><text x="89.1796%" y="495.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::fire_send (2 samples, 0.03%)</title><rect x="88.9296%" y="469" width="0.0252%" height="15" fill="rgb(208,55,20)" fg:x="7045" fg:w="2"/><text x="89.1796%" y="479.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::lock (2 samples, 0.03%)</title><rect x="88.9296%" y="453" width="0.0252%" height="15" fill="rgb(218,39,14)" fg:x="7045" fg:w="2"/><text x="89.1796%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="88.9296%" y="437" width="0.0252%" height="15" fill="rgb(216,169,33)" fg:x="7045" fg:w="2"/><text x="89.1796%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="88.9548%" y="501" width="0.0252%" height="15" fill="rgb(233,80,24)" fg:x="7047" fg:w="2"/><text x="89.2048%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="88.9548%" y="485" width="0.0252%" height="15" fill="rgb(213,179,31)" fg:x="7047" fg:w="2"/><text x="89.2048%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="88.9548%" y="469" width="0.0252%" height="15" fill="rgb(209,19,5)" fg:x="7047" fg:w="2"/><text x="89.2048%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="88.9548%" y="453" width="0.0252%" height="15" fill="rgb(219,18,35)" fg:x="7047" fg:w="2"/><text x="89.2048%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="88.9548%" y="437" width="0.0252%" height="15" fill="rgb(209,169,16)" fg:x="7047" fg:w="2"/><text x="89.2048%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (23 samples, 0.29%)</title><rect x="88.9801%" y="501" width="0.2903%" height="15" fill="rgb(245,90,51)" fg:x="7049" fg:w="23"/><text x="89.2301%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.29%)</title><rect x="88.9801%" y="485" width="0.2903%" height="15" fill="rgb(220,99,45)" fg:x="7049" fg:w="23"/><text x="89.2301%" y="495.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (23 samples, 0.29%)</title><rect x="88.9801%" y="469" width="0.2903%" height="15" fill="rgb(249,89,25)" fg:x="7049" fg:w="23"/><text x="89.2301%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (22 samples, 0.28%)</title><rect x="88.9927%" y="453" width="0.2777%" height="15" fill="rgb(239,193,0)" fg:x="7050" fg:w="22"/><text x="89.2427%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.28%)</title><rect x="88.9927%" y="437" width="0.2777%" height="15" fill="rgb(231,126,1)" fg:x="7050" fg:w="22"/><text x="89.2427%" y="447.50"></text></g><g><title>flume::Shared&lt;T&gt;::is_disconnected (1 samples, 0.01%)</title><rect x="89.2704%" y="501" width="0.0126%" height="15" fill="rgb(243,166,3)" fg:x="7072" fg:w="1"/><text x="89.5204%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="89.2704%" y="485" width="0.0126%" height="15" fill="rgb(223,22,34)" fg:x="7072" fg:w="1"/><text x="89.5204%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="89.2704%" y="469" width="0.0126%" height="15" fill="rgb(251,52,51)" fg:x="7072" fg:w="1"/><text x="89.5204%" y="479.50"></text></g><g><title>flume::Sender&lt;T&gt;::try_send (84 samples, 1.06%)</title><rect x="88.4625%" y="549" width="1.0603%" height="15" fill="rgb(221,165,28)" fg:x="7008" fg:w="84"/><text x="88.7125%" y="559.50"></text></g><g><title>flume::Shared&lt;T&gt;::send_sync (83 samples, 1.05%)</title><rect x="88.4751%" y="533" width="1.0477%" height="15" fill="rgb(218,121,47)" fg:x="7009" fg:w="83"/><text x="88.7251%" y="543.50"></text></g><g><title>flume::Shared&lt;T&gt;::send (83 samples, 1.05%)</title><rect x="88.4751%" y="517" width="1.0477%" height="15" fill="rgb(209,120,9)" fg:x="7009" fg:w="83"/><text x="88.7251%" y="527.50"></text></g><g><title>flume::wait_lock (19 samples, 0.24%)</title><rect x="89.2830%" y="501" width="0.2398%" height="15" fill="rgb(236,68,12)" fg:x="7073" fg:w="19"/><text x="89.5330%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.24%)</title><rect x="89.2830%" y="485" width="0.2398%" height="15" fill="rgb(225,194,26)" fg:x="7073" fg:w="19"/><text x="89.5330%" y="495.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (19 samples, 0.24%)</title><rect x="89.2830%" y="469" width="0.2398%" height="15" fill="rgb(231,84,39)" fg:x="7073" fg:w="19"/><text x="89.5330%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.24%)</title><rect x="89.2830%" y="453" width="0.2398%" height="15" fill="rgb(210,11,45)" fg:x="7073" fg:w="19"/><text x="89.5330%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.24%)</title><rect x="89.2830%" y="437" width="0.2398%" height="15" fill="rgb(224,54,52)" fg:x="7073" fg:w="19"/><text x="89.5330%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="89.5986%" y="453" width="0.0379%" height="15" fill="rgb(238,102,14)" fg:x="7098" fg:w="3"/><text x="89.8486%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.04%)</title><rect x="89.5986%" y="437" width="0.0379%" height="15" fill="rgb(243,160,52)" fg:x="7098" fg:w="3"/><text x="89.8486%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 0.01%)</title><rect x="89.6238%" y="421" width="0.0126%" height="15" fill="rgb(216,114,19)" fg:x="7100" fg:w="1"/><text x="89.8738%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 0.01%)</title><rect x="89.6238%" y="405" width="0.0126%" height="15" fill="rgb(244,166,37)" fg:x="7100" fg:w="1"/><text x="89.8738%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (16 samples, 0.20%)</title><rect x="89.6365%" y="437" width="0.2020%" height="15" fill="rgb(246,29,44)" fg:x="7101" fg:w="16"/><text x="89.8865%" y="447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (16 samples, 0.20%)</title><rect x="89.6365%" y="421" width="0.2020%" height="15" fill="rgb(215,56,53)" fg:x="7101" fg:w="16"/><text x="89.8865%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.20%)</title><rect x="89.6365%" y="405" width="0.2020%" height="15" fill="rgb(217,60,2)" fg:x="7101" fg:w="16"/><text x="89.8865%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (16 samples, 0.20%)</title><rect x="89.6365%" y="389" width="0.2020%" height="15" fill="rgb(207,26,24)" fg:x="7101" fg:w="16"/><text x="89.8865%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (18 samples, 0.23%)</title><rect x="89.6365%" y="453" width="0.2272%" height="15" fill="rgb(252,210,15)" fg:x="7101" fg:w="18"/><text x="89.8865%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.03%)</title><rect x="89.8384%" y="437" width="0.0252%" height="15" fill="rgb(253,209,26)" fg:x="7117" fg:w="2"/><text x="90.0884%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="89.8384%" y="421" width="0.0252%" height="15" fill="rgb(238,170,14)" fg:x="7117" fg:w="2"/><text x="90.0884%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.03%)</title><rect x="89.8384%" y="405" width="0.0252%" height="15" fill="rgb(216,178,15)" fg:x="7117" fg:w="2"/><text x="90.0884%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.03%)</title><rect x="89.8384%" y="389" width="0.0252%" height="15" fill="rgb(250,197,2)" fg:x="7117" fg:w="2"/><text x="90.0884%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.01%)</title><rect x="89.8637%" y="453" width="0.0126%" height="15" fill="rgb(212,70,42)" fg:x="7119" fg:w="1"/><text x="90.1137%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (21 samples, 0.27%)</title><rect x="89.8763%" y="453" width="0.2651%" height="15" fill="rgb(227,213,9)" fg:x="7120" fg:w="21"/><text x="90.1263%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (21 samples, 0.27%)</title><rect x="89.8763%" y="437" width="0.2651%" height="15" fill="rgb(245,99,25)" fg:x="7120" fg:w="21"/><text x="90.1263%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.27%)</title><rect x="89.8763%" y="421" width="0.2651%" height="15" fill="rgb(250,82,29)" fg:x="7120" fg:w="21"/><text x="90.1263%" y="431.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::client_handle_packet::_{{closure}} (311 samples, 3.93%)</title><rect x="86.2913%" y="581" width="3.9258%" height="15" fill="rgb(241,226,54)" fg:x="6836" fg:w="311"/><text x="86.5413%" y="591.50">wisp..</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::handle_data_packet (273 samples, 3.45%)</title><rect x="86.7710%" y="565" width="3.4461%" height="15" fill="rgb(221,99,41)" fg:x="6874" fg:w="273"/><text x="87.0210%" y="575.50">wis..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (55 samples, 0.69%)</title><rect x="89.5228%" y="549" width="0.6943%" height="15" fill="rgb(213,90,21)" fg:x="7092" fg:w="55"/><text x="89.7728%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (55 samples, 0.69%)</title><rect x="89.5228%" y="533" width="0.6943%" height="15" fill="rgb(205,208,24)" fg:x="7092" fg:w="55"/><text x="89.7728%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (55 samples, 0.69%)</title><rect x="89.5228%" y="517" width="0.6943%" height="15" fill="rgb(246,31,12)" fg:x="7092" fg:w="55"/><text x="89.7728%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (51 samples, 0.64%)</title><rect x="89.5733%" y="501" width="0.6438%" height="15" fill="rgb(213,154,6)" fg:x="7096" fg:w="51"/><text x="89.8233%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (51 samples, 0.64%)</title><rect x="89.5733%" y="485" width="0.6438%" height="15" fill="rgb(222,163,29)" fg:x="7096" fg:w="51"/><text x="89.8233%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (51 samples, 0.64%)</title><rect x="89.5733%" y="469" width="0.6438%" height="15" fill="rgb(227,201,8)" fg:x="7096" fg:w="51"/><text x="89.8233%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.08%)</title><rect x="90.1414%" y="453" width="0.0757%" height="15" fill="rgb(233,9,32)" fg:x="7141" fg:w="6"/><text x="90.3914%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.08%)</title><rect x="90.1414%" y="437" width="0.0757%" height="15" fill="rgb(217,54,24)" fg:x="7141" fg:w="6"/><text x="90.3914%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::new (1 samples, 0.01%)</title><rect x="90.6842%" y="565" width="0.0126%" height="15" fill="rgb(235,192,0)" fg:x="7184" fg:w="1"/><text x="90.9342%" y="575.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (1 samples, 0.01%)</title><rect x="90.6842%" y="549" width="0.0126%" height="15" fill="rgb(235,45,9)" fg:x="7184" fg:w="1"/><text x="90.9342%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::from_vec (1 samples, 0.01%)</title><rect x="90.6842%" y="533" width="0.0126%" height="15" fill="rgb(246,42,40)" fg:x="7184" fg:w="1"/><text x="90.9342%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (2 samples, 0.03%)</title><rect x="90.6968%" y="565" width="0.0252%" height="15" fill="rgb(248,111,24)" fg:x="7185" fg:w="2"/><text x="90.9468%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::Payload&gt; (2 samples, 0.03%)</title><rect x="90.6968%" y="549" width="0.0252%" height="15" fill="rgb(249,65,22)" fg:x="7185" fg:w="2"/><text x="90.9468%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (1 samples, 0.01%)</title><rect x="90.7094%" y="533" width="0.0126%" height="15" fill="rgb(238,111,51)" fg:x="7186" fg:w="1"/><text x="90.9594%" y="543.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="90.7094%" y="517" width="0.0126%" height="15" fill="rgb(250,118,22)" fg:x="7186" fg:w="1"/><text x="90.9594%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::get_vec_pos (1 samples, 0.01%)</title><rect x="90.7094%" y="501" width="0.0126%" height="15" fill="rgb(234,84,26)" fg:x="7186" fg:w="1"/><text x="90.9594%" y="511.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::remaining (5 samples, 0.06%)</title><rect x="90.9871%" y="549" width="0.0631%" height="15" fill="rgb(243,172,12)" fg:x="7208" fg:w="5"/><text x="91.2371%" y="559.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.01%)</title><rect x="91.0629%" y="533" width="0.0126%" height="15" fill="rgb(236,150,49)" fg:x="7214" fg:w="1"/><text x="91.3129%" y="543.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.01%)</title><rect x="91.0629%" y="517" width="0.0126%" height="15" fill="rgb(225,197,26)" fg:x="7214" fg:w="1"/><text x="91.3129%" y="527.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.05%)</title><rect x="91.0755%" y="533" width="0.0505%" height="15" fill="rgb(214,17,42)" fg:x="7215" fg:w="4"/><text x="91.3255%" y="543.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.05%)</title><rect x="91.0755%" y="517" width="0.0505%" height="15" fill="rgb(224,165,40)" fg:x="7215" fg:w="4"/><text x="91.3255%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (3 samples, 0.04%)</title><rect x="91.0881%" y="501" width="0.0379%" height="15" fill="rgb(246,100,4)" fg:x="7216" fg:w="3"/><text x="91.3381%" y="511.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32_le (7 samples, 0.09%)</title><rect x="91.0502%" y="549" width="0.0884%" height="15" fill="rgb(222,103,0)" fg:x="7213" fg:w="7"/><text x="91.3002%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="91.1260%" y="533" width="0.0126%" height="15" fill="rgb(227,189,26)" fg:x="7219" fg:w="1"/><text x="91.3760%" y="543.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32_le::_{{closure}} (1 samples, 0.01%)</title><rect x="91.1260%" y="517" width="0.0126%" height="15" fill="rgb(214,202,17)" fg:x="7219" fg:w="1"/><text x="91.3760%" y="527.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::chunk (3 samples, 0.04%)</title><rect x="91.1765%" y="533" width="0.0379%" height="15" fill="rgb(229,111,3)" fg:x="7223" fg:w="3"/><text x="91.4265%" y="543.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::chunk (3 samples, 0.04%)</title><rect x="91.1765%" y="517" width="0.0379%" height="15" fill="rgb(229,172,15)" fg:x="7223" fg:w="3"/><text x="91.4265%" y="527.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.01%)</title><rect x="91.2270%" y="501" width="0.0126%" height="15" fill="rgb(230,224,35)" fg:x="7227" fg:w="1"/><text x="91.4770%" y="511.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.01%)</title><rect x="91.2270%" y="485" width="0.0126%" height="15" fill="rgb(251,141,6)" fg:x="7227" fg:w="1"/><text x="91.4770%" y="495.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 0.01%)</title><rect x="91.2270%" y="469" width="0.0126%" height="15" fill="rgb(225,208,6)" fg:x="7227" fg:w="1"/><text x="91.4770%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (5,797 samples, 73.18%)</title><rect x="18.1141%" y="757" width="73.1760%" height="15" fill="rgb(246,181,16)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="767.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (5,797 samples, 73.18%)</title><rect x="18.1141%" y="741" width="73.1760%" height="15" fill="rgb(227,129,36)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,797 samples, 73.18%)</title><rect x="18.1141%" y="725" width="73.1760%" height="15" fill="rgb(248,117,24)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,797 samples, 73.18%)</title><rect x="18.1141%" y="709" width="73.1760%" height="15" fill="rgb(214,185,35)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="719.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,797 samples, 73.18%)</title><rect x="18.1141%" y="693" width="73.1760%" height="15" fill="rgb(236,150,34)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="703.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (5,797 samples, 73.18%)</title><rect x="18.1141%" y="677" width="73.1760%" height="15" fill="rgb(243,228,27)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="687.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,797 samples, 73.18%)</title><rect x="18.1141%" y="661" width="73.1760%" height="15" fill="rgb(245,77,44)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="671.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5,797 samples, 73.18%)</title><rect x="18.1141%" y="645" width="73.1760%" height="15" fill="rgb(235,214,42)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="655.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (5,797 samples, 73.18%)</title><rect x="18.1141%" y="629" width="73.1760%" height="15" fill="rgb(221,74,3)" fg:x="1435" fg:w="5797"/><text x="18.3641%" y="639.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::into_future::_{{closure}} (2,691 samples, 33.97%)</title><rect x="57.3214%" y="613" width="33.9687%" height="15" fill="rgb(206,121,29)" fg:x="4541" fg:w="2691"/><text x="57.5714%" y="623.50">wisp_mux::inner::MuxInner&lt;R&gt;::into_future::_{{closure}}</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}} (2,691 samples, 33.97%)</title><rect x="57.3214%" y="597" width="33.9687%" height="15" fill="rgb(249,131,53)" fg:x="4541" fg:w="2691"/><text x="57.5714%" y="607.50">wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}</text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::process_wisp_message::_{{closure}} (85 samples, 1.07%)</title><rect x="90.2171%" y="581" width="1.0730%" height="15" fill="rgb(236,170,29)" fg:x="7147" fg:w="85"/><text x="90.4671%" y="591.50"></text></g><g><title>wisp_mux::packet::Packet::maybe_handle_extension::_{{closure}} (45 samples, 0.57%)</title><rect x="90.7220%" y="565" width="0.5680%" height="15" fill="rgb(247,96,15)" fg:x="7187" fg:w="45"/><text x="90.9720%" y="575.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (12 samples, 0.15%)</title><rect x="91.1386%" y="549" width="0.1515%" height="15" fill="rgb(211,210,7)" fg:x="7220" fg:w="12"/><text x="91.3886%" y="559.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (6 samples, 0.08%)</title><rect x="91.2143%" y="533" width="0.0757%" height="15" fill="rgb(240,88,50)" fg:x="7226" fg:w="6"/><text x="91.4643%" y="543.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.06%)</title><rect x="91.2270%" y="517" width="0.0631%" height="15" fill="rgb(209,229,26)" fg:x="7227" fg:w="5"/><text x="91.4770%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.05%)</title><rect x="91.2396%" y="501" width="0.0505%" height="15" fill="rgb(210,68,23)" fg:x="7228" fg:w="4"/><text x="91.4896%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.03%)</title><rect x="91.2648%" y="485" width="0.0252%" height="15" fill="rgb(229,180,13)" fg:x="7230" fg:w="2"/><text x="91.5148%" y="495.50"></text></g><g><title>tokio::runtime::coop::budget (5,830 samples, 73.59%)</title><rect x="17.7228%" y="885" width="73.5925%" height="15" fill="rgb(236,53,44)" fg:x="1404" fg:w="5830"/><text x="17.9728%" y="895.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (5,830 samples, 73.59%)</title><rect x="17.7228%" y="869" width="73.5925%" height="15" fill="rgb(244,214,29)" fg:x="1404" fg:w="5830"/><text x="17.9728%" y="879.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (5,827 samples, 73.55%)</title><rect x="17.7607%" y="853" width="73.5547%" height="15" fill="rgb(220,75,29)" fg:x="1407" fg:w="5827"/><text x="18.0107%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (5,823 samples, 73.50%)</title><rect x="17.8112%" y="837" width="73.5042%" height="15" fill="rgb(214,183,37)" fg:x="1411" fg:w="5823"/><text x="18.0612%" y="847.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (5,823 samples, 73.50%)</title><rect x="17.8112%" y="821" width="73.5042%" height="15" fill="rgb(239,117,29)" fg:x="1411" fg:w="5823"/><text x="18.0612%" y="831.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (5,821 samples, 73.48%)</title><rect x="17.8364%" y="805" width="73.4789%" height="15" fill="rgb(237,171,35)" fg:x="1413" fg:w="5821"/><text x="18.0864%" y="815.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,821 samples, 73.48%)</title><rect x="17.8364%" y="789" width="73.4789%" height="15" fill="rgb(229,178,53)" fg:x="1413" fg:w="5821"/><text x="18.0864%" y="799.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (5,804 samples, 73.26%)</title><rect x="18.0510%" y="773" width="73.2643%" height="15" fill="rgb(210,102,19)" fg:x="1430" fg:w="5804"/><text x="18.3010%" y="783.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (2 samples, 0.03%)</title><rect x="91.2901%" y="757" width="0.0252%" height="15" fill="rgb(235,127,22)" fg:x="7232" fg:w="2"/><text x="91.5401%" y="767.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (2 samples, 0.03%)</title><rect x="91.2901%" y="741" width="0.0252%" height="15" fill="rgb(244,31,31)" fg:x="7232" fg:w="2"/><text x="91.5401%" y="751.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::_{{closure}} (1 samples, 0.01%)</title><rect x="91.3027%" y="725" width="0.0126%" height="15" fill="rgb(231,43,21)" fg:x="7233" fg:w="1"/><text x="91.5527%" y="735.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.01%)</title><rect x="91.3406%" y="821" width="0.0126%" height="15" fill="rgb(217,131,35)" fg:x="7236" fg:w="1"/><text x="91.5906%" y="831.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (2 samples, 0.03%)</title><rect x="91.3532%" y="821" width="0.0252%" height="15" fill="rgb(221,149,4)" fg:x="7237" fg:w="2"/><text x="91.6032%" y="831.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.03%)</title><rect x="91.3532%" y="805" width="0.0252%" height="15" fill="rgb(232,170,28)" fg:x="7237" fg:w="2"/><text x="91.6032%" y="815.50"></text></g><g><title>clock_gettime (1 samples, 0.01%)</title><rect x="91.3658%" y="789" width="0.0126%" height="15" fill="rgb(238,56,10)" fg:x="7238" fg:w="1"/><text x="91.6158%" y="799.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="91.3658%" y="773" width="0.0126%" height="15" fill="rgb(235,196,14)" fg:x="7238" fg:w="1"/><text x="91.6158%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (10 samples, 0.13%)</title><rect x="91.3153%" y="853" width="0.1262%" height="15" fill="rgb(216,45,48)" fg:x="7234" fg:w="10"/><text x="91.5653%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (10 samples, 0.13%)</title><rect x="91.3153%" y="837" width="0.1262%" height="15" fill="rgb(238,213,17)" fg:x="7234" fg:w="10"/><text x="91.5653%" y="847.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (5 samples, 0.06%)</title><rect x="91.3784%" y="821" width="0.0631%" height="15" fill="rgb(212,13,2)" fg:x="7239" fg:w="5"/><text x="91.6284%" y="831.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (4 samples, 0.05%)</title><rect x="91.3911%" y="805" width="0.0505%" height="15" fill="rgb(240,114,20)" fg:x="7240" fg:w="4"/><text x="91.6411%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (4 samples, 0.05%)</title><rect x="91.3911%" y="789" width="0.0505%" height="15" fill="rgb(228,41,40)" fg:x="7240" fg:w="4"/><text x="91.6411%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.05%)</title><rect x="91.3911%" y="773" width="0.0505%" height="15" fill="rgb(244,132,35)" fg:x="7240" fg:w="4"/><text x="91.6411%" y="783.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="91.4416%" y="853" width="0.0252%" height="15" fill="rgb(253,189,4)" fg:x="7244" fg:w="2"/><text x="91.6916%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="91.4542%" y="837" width="0.0126%" height="15" fill="rgb(224,37,19)" fg:x="7245" fg:w="1"/><text x="91.7042%" y="847.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (10 samples, 0.13%)</title><rect x="91.4668%" y="853" width="0.1262%" height="15" fill="rgb(235,223,18)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="863.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (10 samples, 0.13%)</title><rect x="91.4668%" y="837" width="0.1262%" height="15" fill="rgb(235,163,25)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="847.50"></text></g><g><title>mio::waker::Waker::wake (10 samples, 0.13%)</title><rect x="91.4668%" y="821" width="0.1262%" height="15" fill="rgb(217,145,28)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="831.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (10 samples, 0.13%)</title><rect x="91.4668%" y="805" width="0.1262%" height="15" fill="rgb(223,223,32)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="815.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (10 samples, 0.13%)</title><rect x="91.4668%" y="789" width="0.1262%" height="15" fill="rgb(227,189,39)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="799.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (10 samples, 0.13%)</title><rect x="91.4668%" y="773" width="0.1262%" height="15" fill="rgb(248,10,22)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="783.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (10 samples, 0.13%)</title><rect x="91.4668%" y="757" width="0.1262%" height="15" fill="rgb(248,46,39)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="767.50"></text></g><g><title>write (10 samples, 0.13%)</title><rect x="91.4668%" y="741" width="0.1262%" height="15" fill="rgb(248,113,48)" fg:x="7246" fg:w="10"/><text x="91.7168%" y="751.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="91.5299%" y="725" width="0.0631%" height="15" fill="rgb(245,16,25)" fg:x="7251" fg:w="5"/><text x="91.7799%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (3 samples, 0.04%)</title><rect x="91.5930%" y="853" width="0.0379%" height="15" fill="rgb(249,152,16)" fg:x="7256" fg:w="3"/><text x="91.8430%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (3 samples, 0.04%)</title><rect x="91.5930%" y="837" width="0.0379%" height="15" fill="rgb(250,16,1)" fg:x="7256" fg:w="3"/><text x="91.8430%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.03%)</title><rect x="91.6057%" y="821" width="0.0252%" height="15" fill="rgb(249,138,3)" fg:x="7257" fg:w="2"/><text x="91.8557%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.03%)</title><rect x="91.6057%" y="805" width="0.0252%" height="15" fill="rgb(227,71,41)" fg:x="7257" fg:w="2"/><text x="91.8557%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.01%)</title><rect x="91.6309%" y="821" width="0.0126%" height="15" fill="rgb(209,184,23)" fg:x="7259" fg:w="1"/><text x="91.8809%" y="831.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="91.6309%" y="805" width="0.0126%" height="15" fill="rgb(223,215,31)" fg:x="7259" fg:w="1"/><text x="91.8809%" y="815.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="91.6435%" y="821" width="0.0126%" height="15" fill="rgb(210,146,28)" fg:x="7260" fg:w="1"/><text x="91.8935%" y="831.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.01%)</title><rect x="91.6435%" y="805" width="0.0126%" height="15" fill="rgb(209,183,41)" fg:x="7260" fg:w="1"/><text x="91.8935%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.01%)</title><rect x="91.6435%" y="789" width="0.0126%" height="15" fill="rgb(209,224,45)" fg:x="7260" fg:w="1"/><text x="91.8935%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.01%)</title><rect x="91.6435%" y="773" width="0.0126%" height="15" fill="rgb(224,209,51)" fg:x="7260" fg:w="1"/><text x="91.8935%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="91.6435%" y="757" width="0.0126%" height="15" fill="rgb(223,17,39)" fg:x="7260" fg:w="1"/><text x="91.8935%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (5,861 samples, 73.98%)</title><rect x="17.6976%" y="901" width="73.9838%" height="15" fill="rgb(234,204,37)" fg:x="1402" fg:w="5861"/><text x="17.9476%" y="911.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (29 samples, 0.37%)</title><rect x="91.3153%" y="885" width="0.3661%" height="15" fill="rgb(236,120,5)" fg:x="7234" fg:w="29"/><text x="91.5653%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (29 samples, 0.37%)</title><rect x="91.3153%" y="869" width="0.3661%" height="15" fill="rgb(248,97,27)" fg:x="7234" fg:w="29"/><text x="91.5653%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (4 samples, 0.05%)</title><rect x="91.6309%" y="853" width="0.0505%" height="15" fill="rgb(240,66,17)" fg:x="7259" fg:w="4"/><text x="91.8809%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (4 samples, 0.05%)</title><rect x="91.6309%" y="837" width="0.0505%" height="15" fill="rgb(210,79,3)" fg:x="7259" fg:w="4"/><text x="91.8809%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (2 samples, 0.03%)</title><rect x="91.6561%" y="821" width="0.0252%" height="15" fill="rgb(214,176,27)" fg:x="7261" fg:w="2"/><text x="91.9061%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (3 samples, 0.04%)</title><rect x="91.6814%" y="901" width="0.0379%" height="15" fill="rgb(235,185,3)" fg:x="7263" fg:w="3"/><text x="91.9314%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (2 samples, 0.03%)</title><rect x="91.6940%" y="885" width="0.0252%" height="15" fill="rgb(227,24,12)" fg:x="7264" fg:w="2"/><text x="91.9440%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (2 samples, 0.03%)</title><rect x="91.6940%" y="869" width="0.0252%" height="15" fill="rgb(252,169,48)" fg:x="7264" fg:w="2"/><text x="91.9440%" y="879.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="91.7698%" y="885" width="0.0126%" height="15" fill="rgb(212,65,1)" fg:x="7270" fg:w="1"/><text x="92.0198%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="91.7698%" y="869" width="0.0126%" height="15" fill="rgb(242,39,24)" fg:x="7270" fg:w="1"/><text x="92.0198%" y="879.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.03%)</title><rect x="91.7824%" y="869" width="0.0252%" height="15" fill="rgb(249,32,23)" fg:x="7271" fg:w="2"/><text x="92.0324%" y="879.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="91.8076%" y="869" width="0.0126%" height="15" fill="rgb(251,195,23)" fg:x="7273" fg:w="1"/><text x="92.0576%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into::_{{closure}} (1 samples, 0.01%)</title><rect x="91.8076%" y="853" width="0.0126%" height="15" fill="rgb(236,174,8)" fg:x="7273" fg:w="1"/><text x="92.0576%" y="863.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="91.8076%" y="837" width="0.0126%" height="15" fill="rgb(220,197,8)" fg:x="7273" fg:w="1"/><text x="92.0576%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="91.8202%" y="853" width="0.0126%" height="15" fill="rgb(240,108,37)" fg:x="7274" fg:w="1"/><text x="92.0702%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.01%)</title><rect x="91.8202%" y="837" width="0.0126%" height="15" fill="rgb(232,176,24)" fg:x="7274" fg:w="1"/><text x="92.0702%" y="847.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="91.8202%" y="821" width="0.0126%" height="15" fill="rgb(243,35,29)" fg:x="7274" fg:w="1"/><text x="92.0702%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.01%)</title><rect x="91.8329%" y="853" width="0.0126%" height="15" fill="rgb(210,37,18)" fg:x="7275" fg:w="1"/><text x="92.0829%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="91.8329%" y="837" width="0.0126%" height="15" fill="rgb(224,184,40)" fg:x="7275" fg:w="1"/><text x="92.0829%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (1 samples, 0.01%)</title><rect x="91.8455%" y="853" width="0.0126%" height="15" fill="rgb(236,39,29)" fg:x="7276" fg:w="1"/><text x="92.0955%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="91.8455%" y="837" width="0.0126%" height="15" fill="rgb(232,48,39)" fg:x="7276" fg:w="1"/><text x="92.0955%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (11 samples, 0.14%)</title><rect x="91.8581%" y="853" width="0.1389%" height="15" fill="rgb(236,34,42)" fg:x="7277" fg:w="11"/><text x="92.1081%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.14%)</title><rect x="91.8581%" y="837" width="0.1389%" height="15" fill="rgb(243,106,37)" fg:x="7277" fg:w="11"/><text x="92.1081%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (18 samples, 0.23%)</title><rect x="91.7824%" y="885" width="0.2272%" height="15" fill="rgb(218,96,6)" fg:x="7271" fg:w="18"/><text x="92.0324%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (15 samples, 0.19%)</title><rect x="91.8202%" y="869" width="0.1893%" height="15" fill="rgb(235,130,12)" fg:x="7274" fg:w="15"/><text x="92.0702%" y="879.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="91.9970%" y="853" width="0.0126%" height="15" fill="rgb(231,95,0)" fg:x="7288" fg:w="1"/><text x="92.2470%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2::_{{closure}} (1 samples, 0.01%)</title><rect x="91.9970%" y="837" width="0.0126%" height="15" fill="rgb(228,12,23)" fg:x="7288" fg:w="1"/><text x="92.2470%" y="847.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="91.9970%" y="821" width="0.0126%" height="15" fill="rgb(216,12,1)" fg:x="7288" fg:w="1"/><text x="92.2470%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (24 samples, 0.30%)</title><rect x="91.7193%" y="901" width="0.3030%" height="15" fill="rgb(219,59,3)" fg:x="7266" fg:w="24"/><text x="91.9693%" y="911.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (1 samples, 0.01%)</title><rect x="92.0096%" y="885" width="0.0126%" height="15" fill="rgb(215,208,46)" fg:x="7289" fg:w="1"/><text x="92.2596%" y="895.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (1 samples, 0.01%)</title><rect x="92.0096%" y="869" width="0.0126%" height="15" fill="rgb(254,224,29)" fg:x="7289" fg:w="1"/><text x="92.2596%" y="879.50"></text></g><g><title>[libc.so.6] (7,005 samples, 88.42%)</title><rect x="3.6102%" y="1573" width="88.4246%" height="15" fill="rgb(232,14,29)" fg:x="286" fg:w="7005"/><text x="3.8602%" y="1583.50">[libc.so.6]</text></g><g><title>[libc.so.6] (7,004 samples, 88.41%)</title><rect x="3.6228%" y="1557" width="88.4120%" height="15" fill="rgb(208,45,52)" fg:x="287" fg:w="7004"/><text x="3.8728%" y="1567.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1541" width="88.3994%" height="15" fill="rgb(234,191,28)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1551.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1525" width="88.3994%" height="15" fill="rgb(244,67,43)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1535.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1509" width="88.3994%" height="15" fill="rgb(236,189,24)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1519.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1493" width="88.3994%" height="15" fill="rgb(239,214,33)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1503.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1477" width="88.3994%" height="15" fill="rgb(226,176,41)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1487.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1461" width="88.3994%" height="15" fill="rgb(248,47,8)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1471.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1445" width="88.3994%" height="15" fill="rgb(218,81,44)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1455.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1429" width="88.3994%" height="15" fill="rgb(213,98,6)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1439.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1413" width="88.3994%" height="15" fill="rgb(222,85,22)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1423.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1397" width="88.3994%" height="15" fill="rgb(239,46,39)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1407.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1381" width="88.3994%" height="15" fill="rgb(237,12,29)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1391.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1365" width="88.3994%" height="15" fill="rgb(214,77,8)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1375.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (7,003 samples, 88.40%)</title><rect x="3.6354%" y="1349" width="88.3994%" height="15" fill="rgb(217,168,37)" fg:x="288" fg:w="7003"/><text x="3.8854%" y="1359.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1333" width="88.2479%" height="15" fill="rgb(221,217,23)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1343.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1317" width="88.2479%" height="15" fill="rgb(243,229,36)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1327.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1301" width="88.2479%" height="15" fill="rgb(251,163,40)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1311.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1285" width="88.2479%" height="15" fill="rgb(237,222,12)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1295.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1269" width="88.2479%" height="15" fill="rgb(248,132,6)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1279.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1253" width="88.2479%" height="15" fill="rgb(227,167,50)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1263.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1237" width="88.2479%" height="15" fill="rgb(242,84,37)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1247.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1221" width="88.2479%" height="15" fill="rgb(212,4,50)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1231.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1205" width="88.2479%" height="15" fill="rgb(230,228,32)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1215.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1189" width="88.2479%" height="15" fill="rgb(248,217,23)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1199.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1173" width="88.2479%" height="15" fill="rgb(238,197,32)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1183.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1157" width="88.2479%" height="15" fill="rgb(236,106,1)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1167.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1141" width="88.2479%" height="15" fill="rgb(219,228,13)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1151.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1125" width="88.2479%" height="15" fill="rgb(238,30,35)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1135.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1109" width="88.2479%" height="15" fill="rgb(236,70,23)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1119.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (6,991 samples, 88.25%)</title><rect x="3.7869%" y="1093" width="88.2479%" height="15" fill="rgb(249,104,48)" fg:x="300" fg:w="6991"/><text x="4.0369%" y="1103.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (6,990 samples, 88.24%)</title><rect x="3.7995%" y="1077" width="88.2353%" height="15" fill="rgb(254,117,50)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1087.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (6,990 samples, 88.24%)</title><rect x="3.7995%" y="1061" width="88.2353%" height="15" fill="rgb(223,152,4)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1071.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (6,990 samples, 88.24%)</title><rect x="3.7995%" y="1045" width="88.2353%" height="15" fill="rgb(245,6,2)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1055.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (6,990 samples, 88.24%)</title><rect x="3.7995%" y="1029" width="88.2353%" height="15" fill="rgb(249,150,24)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1039.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (6,990 samples, 88.24%)</title><rect x="3.7995%" y="1013" width="88.2353%" height="15" fill="rgb(228,185,42)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1023.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,990 samples, 88.24%)</title><rect x="3.7995%" y="997" width="88.2353%" height="15" fill="rgb(226,39,33)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="1007.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,990 samples, 88.24%)</title><rect x="3.7995%" y="981" width="88.2353%" height="15" fill="rgb(221,166,19)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="991.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (6,990 samples, 88.24%)</title><rect x="3.7995%" y="965" width="88.2353%" height="15" fill="rgb(209,109,2)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="975.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (6,990 samples, 88.24%)</title><rect x="3.7995%" y="949" width="88.2353%" height="15" fill="rgb(252,216,26)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="959.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (6,990 samples, 88.24%)</title><rect x="3.7995%" y="933" width="88.2353%" height="15" fill="rgb(227,173,36)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="943.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (6,990 samples, 88.24%)</title><rect x="3.7995%" y="917" width="88.2353%" height="15" fill="rgb(209,90,7)" fg:x="301" fg:w="6990"/><text x="4.0495%" y="927.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tick (1 samples, 0.01%)</title><rect x="92.0222%" y="901" width="0.0126%" height="15" fill="rgb(250,194,11)" fg:x="7290" fg:w="1"/><text x="92.2722%" y="911.50"></text></g><g><title>[simple-wisp-client] (2 samples, 0.03%)</title><rect x="92.0348%" y="1573" width="0.0252%" height="15" fill="rgb(220,72,50)" fg:x="7291" fg:w="2"/><text x="92.2848%" y="1583.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="92.0348%" y="1557" width="0.0252%" height="15" fill="rgb(222,106,48)" fg:x="7291" fg:w="2"/><text x="92.2848%" y="1567.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="98.0560%" y="1557" width="0.0252%" height="15" fill="rgb(216,220,45)" fg:x="7768" fg:w="2"/><text x="98.3060%" y="1567.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="98.0939%" y="1541" width="0.0126%" height="15" fill="rgb(234,112,18)" fg:x="7771" fg:w="1"/><text x="98.3439%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="98.1065%" y="1541" width="0.0126%" height="15" fill="rgb(206,179,9)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(wisp_mux::ws::Frame,core::option::Option&lt;wisp_mux::ws::Frame&gt;),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (1 samples, 0.01%)</title><rect x="98.1065%" y="1525" width="0.0126%" height="15" fill="rgb(215,115,40)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1535.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="98.1065%" y="1509" width="0.0126%" height="15" fill="rgb(222,69,34)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="98.1065%" y="1493" width="0.0126%" height="15" fill="rgb(209,161,10)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1503.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="98.1065%" y="1477" width="0.0126%" height="15" fill="rgb(217,6,38)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1487.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="98.1065%" y="1461" width="0.0126%" height="15" fill="rgb(229,229,48)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1471.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="98.1065%" y="1445" width="0.0126%" height="15" fill="rgb(225,21,28)" fg:x="7772" fg:w="1"/><text x="98.3565%" y="1455.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split::_{{closure}} (4 samples, 0.05%)</title><rect x="98.0813%" y="1557" width="0.0505%" height="15" fill="rgb(206,33,13)" fg:x="7770" fg:w="4"/><text x="98.3313%" y="1567.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split (1 samples, 0.01%)</title><rect x="98.1192%" y="1541" width="0.0126%" height="15" fill="rgb(242,178,17)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1551.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1 samples, 0.01%)</title><rect x="98.1192%" y="1525" width="0.0126%" height="15" fill="rgb(220,162,5)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1535.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="98.1192%" y="1509" width="0.0126%" height="15" fill="rgb(210,33,43)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1519.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="98.1192%" y="1493" width="0.0126%" height="15" fill="rgb(216,116,54)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="98.1192%" y="1477" width="0.0126%" height="15" fill="rgb(249,92,24)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="98.1192%" y="1461" width="0.0126%" height="15" fill="rgb(231,189,14)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="98.1192%" y="1445" width="0.0126%" height="15" fill="rgb(230,8,41)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1455.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="98.1192%" y="1429" width="0.0126%" height="15" fill="rgb(249,7,27)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1439.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="98.1192%" y="1413" width="0.0126%" height="15" fill="rgb(232,86,5)" fg:x="7773" fg:w="1"/><text x="98.3692%" y="1423.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="98.1318%" y="1557" width="0.0252%" height="15" fill="rgb(224,175,18)" fg:x="7774" fg:w="2"/><text x="98.3818%" y="1567.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.01%)</title><rect x="98.1570%" y="1557" width="0.0126%" height="15" fill="rgb(220,129,12)" fg:x="7776" fg:w="1"/><text x="98.4070%" y="1567.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.01%)</title><rect x="98.1697%" y="1557" width="0.0126%" height="15" fill="rgb(210,19,36)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1567.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="98.1697%" y="1541" width="0.0126%" height="15" fill="rgb(219,96,14)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="98.1697%" y="1525" width="0.0126%" height="15" fill="rgb(249,106,1)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1535.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="98.1697%" y="1509" width="0.0126%" height="15" fill="rgb(249,155,20)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1519.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="98.1697%" y="1493" width="0.0126%" height="15" fill="rgb(244,168,9)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="98.1697%" y="1477" width="0.0126%" height="15" fill="rgb(216,23,50)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1487.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="98.1697%" y="1461" width="0.0126%" height="15" fill="rgb(224,219,20)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1471.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="98.1697%" y="1445" width="0.0126%" height="15" fill="rgb(222,156,15)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1455.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="98.1697%" y="1429" width="0.0126%" height="15" fill="rgb(231,97,17)" fg:x="7777" fg:w="1"/><text x="98.4197%" y="1439.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.03%)</title><rect x="98.1823%" y="1557" width="0.0252%" height="15" fill="rgb(218,70,48)" fg:x="7778" fg:w="2"/><text x="98.4323%" y="1567.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.01%)</title><rect x="98.2075%" y="1557" width="0.0126%" height="15" fill="rgb(212,196,52)" fg:x="7780" fg:w="1"/><text x="98.4575%" y="1567.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="98.2201%" y="1557" width="0.0126%" height="15" fill="rgb(243,203,18)" fg:x="7781" fg:w="1"/><text x="98.4701%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_split::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="98.2328%" y="1557" width="0.0126%" height="15" fill="rgb(252,125,41)" fg:x="7782" fg:w="1"/><text x="98.4828%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::inner::MuxInner&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;&gt;::process_wisp_message::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="98.2454%" y="1557" width="0.0126%" height="15" fill="rgb(223,180,33)" fg:x="7783" fg:w="1"/><text x="98.4954%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (3 samples, 0.04%)</title><rect x="98.2580%" y="1557" width="0.0379%" height="15" fill="rgb(254,159,46)" fg:x="7784" fg:w="3"/><text x="98.5080%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="98.2959%" y="1557" width="0.0126%" height="15" fill="rgb(254,38,10)" fg:x="7787" fg:w="1"/><text x="98.5459%" y="1567.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (1 samples, 0.01%)</title><rect x="98.3085%" y="1557" width="0.0126%" height="15" fill="rgb(208,217,32)" fg:x="7788" fg:w="1"/><text x="98.5585%" y="1567.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (1 samples, 0.01%)</title><rect x="98.3211%" y="1557" width="0.0126%" height="15" fill="rgb(221,120,13)" fg:x="7789" fg:w="1"/><text x="98.5711%" y="1567.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (8 samples, 0.10%)</title><rect x="98.3338%" y="1557" width="0.1010%" height="15" fill="rgb(246,54,52)" fg:x="7790" fg:w="8"/><text x="98.5838%" y="1567.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (4 samples, 0.05%)</title><rect x="98.3842%" y="1541" width="0.0505%" height="15" fill="rgb(242,34,25)" fg:x="7794" fg:w="4"/><text x="98.6342%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (4 samples, 0.05%)</title><rect x="98.3842%" y="1525" width="0.0505%" height="15" fill="rgb(247,209,9)" fg:x="7794" fg:w="4"/><text x="98.6342%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (4 samples, 0.05%)</title><rect x="98.3842%" y="1509" width="0.0505%" height="15" fill="rgb(228,71,26)" fg:x="7794" fg:w="4"/><text x="98.6342%" y="1519.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (3 samples, 0.04%)</title><rect x="98.4347%" y="1557" width="0.0379%" height="15" fill="rgb(222,145,49)" fg:x="7798" fg:w="3"/><text x="98.6847%" y="1567.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="98.4726%" y="1557" width="0.0252%" height="15" fill="rgb(218,121,17)" fg:x="7801" fg:w="2"/><text x="98.7226%" y="1567.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="98.4979%" y="1557" width="0.0126%" height="15" fill="rgb(244,50,7)" fg:x="7803" fg:w="1"/><text x="98.7479%" y="1567.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.01%)</title><rect x="98.5105%" y="1557" width="0.0126%" height="15" fill="rgb(246,229,37)" fg:x="7804" fg:w="1"/><text x="98.7605%" y="1567.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (2 samples, 0.03%)</title><rect x="98.5231%" y="1557" width="0.0252%" height="15" fill="rgb(225,18,5)" fg:x="7805" fg:w="2"/><text x="98.7731%" y="1567.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.01%)</title><rect x="98.5483%" y="1557" width="0.0126%" height="15" fill="rgb(213,204,8)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1567.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.01%)</title><rect x="98.5483%" y="1541" width="0.0126%" height="15" fill="rgb(238,103,6)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1551.50"></text></g><g><title>tokio::runtime::context::budget (1 samples, 0.01%)</title><rect x="98.5483%" y="1525" width="0.0126%" height="15" fill="rgb(222,25,35)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="98.5483%" y="1509" width="0.0126%" height="15" fill="rgb(213,203,35)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1519.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (1 samples, 0.01%)</title><rect x="98.5483%" y="1493" width="0.0126%" height="15" fill="rgb(221,79,53)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1503.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (1 samples, 0.01%)</title><rect x="98.5483%" y="1477" width="0.0126%" height="15" fill="rgb(243,200,35)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1487.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.01%)</title><rect x="98.5483%" y="1461" width="0.0126%" height="15" fill="rgb(248,60,25)" fg:x="7807" fg:w="1"/><text x="98.7983%" y="1471.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.01%)</title><rect x="98.5610%" y="1557" width="0.0126%" height="15" fill="rgb(227,53,46)" fg:x="7808" fg:w="1"/><text x="98.8110%" y="1567.50"></text></g><g><title>tokio::runtime::signal::Driver::process (3 samples, 0.04%)</title><rect x="98.5736%" y="1557" width="0.0379%" height="15" fill="rgb(216,120,32)" fg:x="7809" fg:w="3"/><text x="98.8236%" y="1567.50"></text></g><g><title>tokio::runtime::io::driver::signal::&lt;impl tokio::runtime::io::driver::Driver&gt;::consume_signal_ready (3 samples, 0.04%)</title><rect x="98.5736%" y="1541" width="0.0379%" height="15" fill="rgb(220,134,1)" fg:x="7809" fg:w="3"/><text x="98.8236%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.03%)</title><rect x="98.6115%" y="1557" width="0.0252%" height="15" fill="rgb(237,168,5)" fg:x="7812" fg:w="2"/><text x="98.8615%" y="1567.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.03%)</title><rect x="98.6367%" y="1557" width="0.0252%" height="15" fill="rgb(231,100,33)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (2 samples, 0.03%)</title><rect x="98.6367%" y="1541" width="0.0252%" height="15" fill="rgb(236,177,47)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1551.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.03%)</title><rect x="98.6367%" y="1525" width="0.0252%" height="15" fill="rgb(235,7,49)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1535.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (2 samples, 0.03%)</title><rect x="98.6367%" y="1509" width="0.0252%" height="15" fill="rgb(232,119,22)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1519.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.03%)</title><rect x="98.6367%" y="1493" width="0.0252%" height="15" fill="rgb(254,73,53)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1503.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="98.6367%" y="1477" width="0.0252%" height="15" fill="rgb(251,35,20)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1487.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="98.6367%" y="1461" width="0.0252%" height="15" fill="rgb(241,119,20)" fg:x="7814" fg:w="2"/><text x="98.8867%" y="1471.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 0.05%)</title><rect x="98.6620%" y="1557" width="0.0505%" height="15" fill="rgb(207,102,14)" fg:x="7816" fg:w="4"/><text x="98.9120%" y="1567.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.05%)</title><rect x="98.7124%" y="1557" width="0.0505%" height="15" fill="rgb(248,201,50)" fg:x="7820" fg:w="4"/><text x="98.9624%" y="1567.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (4 samples, 0.05%)</title><rect x="98.7124%" y="1541" width="0.0505%" height="15" fill="rgb(222,185,44)" fg:x="7820" fg:w="4"/><text x="98.9624%" y="1551.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.05%)</title><rect x="98.7124%" y="1525" width="0.0505%" height="15" fill="rgb(218,107,18)" fg:x="7820" fg:w="4"/><text x="98.9624%" y="1535.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;S&gt;&gt;::wisp_read_split::_{{closure}} (5 samples, 0.06%)</title><rect x="98.7629%" y="1557" width="0.0631%" height="15" fill="rgb(237,177,39)" fg:x="7824" fg:w="5"/><text x="99.0129%" y="1567.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (3 samples, 0.04%)</title><rect x="98.8261%" y="1557" width="0.0379%" height="15" fill="rgb(246,69,6)" fg:x="7829" fg:w="3"/><text x="99.0761%" y="1567.50"></text></g><g><title>wisp_mux::fastwebsockets::payload_to_bytesmut (1 samples, 0.01%)</title><rect x="98.8639%" y="1557" width="0.0126%" height="15" fill="rgb(234,208,37)" fg:x="7832" fg:w="1"/><text x="99.1139%" y="1567.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}}::_{{closure}} (5 samples, 0.06%)</title><rect x="98.8765%" y="1557" width="0.0631%" height="15" fill="rgb(225,4,6)" fg:x="7833" fg:w="5"/><text x="99.1265%" y="1567.50"></text></g><g><title>[unknown] (546 samples, 6.89%)</title><rect x="92.0601%" y="1573" width="6.8922%" height="15" fill="rgb(233,45,0)" fg:x="7293" fg:w="546"/><text x="92.3101%" y="1583.50">[unknown]</text></g><g><title>write (1 samples, 0.01%)</title><rect x="98.9397%" y="1557" width="0.0126%" height="15" fill="rgb(226,136,5)" fg:x="7838" fg:w="1"/><text x="99.1897%" y="1567.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32_le (3 samples, 0.04%)</title><rect x="98.9523%" y="1573" width="0.0379%" height="15" fill="rgb(211,91,47)" fg:x="7839" fg:w="3"/><text x="99.2023%" y="1583.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.03%)</title><rect x="98.9649%" y="1557" width="0.0252%" height="15" fill="rgb(242,88,51)" fg:x="7840" fg:w="2"/><text x="99.2149%" y="1567.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.03%)</title><rect x="98.9649%" y="1541" width="0.0252%" height="15" fill="rgb(230,91,28)" fg:x="7840" fg:w="2"/><text x="99.2149%" y="1551.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.01%)</title><rect x="98.9902%" y="1573" width="0.0126%" height="15" fill="rgb(254,186,29)" fg:x="7842" fg:w="1"/><text x="99.2402%" y="1583.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.01%)</title><rect x="99.0028%" y="1573" width="0.0126%" height="15" fill="rgb(238,6,4)" fg:x="7843" fg:w="1"/><text x="99.2528%" y="1583.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="99.0154%" y="1573" width="0.0252%" height="15" fill="rgb(221,151,16)" fg:x="7844" fg:w="2"/><text x="99.2654%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (1 samples, 0.01%)</title><rect x="99.0406%" y="1573" width="0.0126%" height="15" fill="rgb(251,143,52)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="99.0406%" y="1557" width="0.0126%" height="15" fill="rgb(206,90,15)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="99.0406%" y="1541" width="0.0126%" height="15" fill="rgb(218,35,8)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1551.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="99.0406%" y="1525" width="0.0126%" height="15" fill="rgb(239,215,6)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="99.0406%" y="1509" width="0.0126%" height="15" fill="rgb(245,116,39)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1519.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="99.0406%" y="1493" width="0.0126%" height="15" fill="rgb(242,65,28)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1503.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="99.0406%" y="1477" width="0.0126%" height="15" fill="rgb(252,132,53)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1487.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="99.0406%" y="1461" width="0.0126%" height="15" fill="rgb(224,159,50)" fg:x="7846" fg:w="1"/><text x="99.2906%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;::read_frame&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}::{{closure}},wisp_mux::WispError,wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;::wisp_read_frame::{{closure}}::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="99.0533%" y="1573" width="0.0126%" height="15" fill="rgb(224,93,4)" fg:x="7847" fg:w="1"/><text x="99.3033%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (2 samples, 0.03%)</title><rect x="99.0659%" y="1573" width="0.0252%" height="15" fill="rgb(208,81,34)" fg:x="7848" fg:w="2"/><text x="99.3159%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::inner::MuxInner&lt;wisp_mux::ws::AppendingWebSocketRead&lt;fastwebsockets::WebSocketRead&lt;tokio::io::util::chain::Chain&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;,tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;&gt;&gt;::process_wisp_message::{{closure}}&gt; (1 samples, 0.01%)</title><rect x="99.0911%" y="1573" width="0.0126%" height="15" fill="rgb(233,92,54)" fg:x="7850" fg:w="1"/><text x="99.3411%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::packet::PacketType&gt; (1 samples, 0.01%)</title><rect x="99.1038%" y="1573" width="0.0126%" height="15" fill="rgb(237,21,14)" fg:x="7851" fg:w="1"/><text x="99.3538%" y="1583.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (2 samples, 0.03%)</title><rect x="99.1164%" y="1573" width="0.0252%" height="15" fill="rgb(249,128,51)" fg:x="7852" fg:w="2"/><text x="99.3664%" y="1583.50"></text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (4 samples, 0.05%)</title><rect x="99.1416%" y="1573" width="0.0505%" height="15" fill="rgb(223,129,24)" fg:x="7854" fg:w="4"/><text x="99.3916%" y="1583.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (2 samples, 0.03%)</title><rect x="99.1921%" y="1573" width="0.0252%" height="15" fill="rgb(231,168,25)" fg:x="7858" fg:w="2"/><text x="99.4421%" y="1583.50"></text></g><g><title>malloc (4 samples, 0.05%)</title><rect x="99.2174%" y="1573" width="0.0505%" height="15" fill="rgb(224,39,20)" fg:x="7860" fg:w="4"/><text x="99.4674%" y="1583.50"></text></g><g><title>recv (1 samples, 0.01%)</title><rect x="99.2679%" y="1573" width="0.0126%" height="15" fill="rgb(225,152,53)" fg:x="7864" fg:w="1"/><text x="99.5179%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (1 samples, 0.01%)</title><rect x="99.2931%" y="1557" width="0.0126%" height="15" fill="rgb(252,17,24)" fg:x="7866" fg:w="1"/><text x="99.5431%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.01%)</title><rect x="99.2931%" y="1541" width="0.0126%" height="15" fill="rgb(250,114,30)" fg:x="7866" fg:w="1"/><text x="99.5431%" y="1551.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="99.2931%" y="1525" width="0.0126%" height="15" fill="rgb(229,5,4)" fg:x="7866" fg:w="1"/><text x="99.5431%" y="1535.50"></text></g><g><title>simple_wisp_client::main::_{{closure}}::_{{closure}} (8 samples, 0.10%)</title><rect x="99.2805%" y="1573" width="0.1010%" height="15" fill="rgb(225,176,49)" fg:x="7865" fg:w="8"/><text x="99.5305%" y="1583.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (6 samples, 0.08%)</title><rect x="99.3057%" y="1557" width="0.0757%" height="15" fill="rgb(224,221,49)" fg:x="7867" fg:w="6"/><text x="99.5557%" y="1567.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.06%)</title><rect x="99.3184%" y="1541" width="0.0631%" height="15" fill="rgb(253,169,27)" fg:x="7868" fg:w="5"/><text x="99.5684%" y="1551.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (5 samples, 0.06%)</title><rect x="99.3184%" y="1525" width="0.0631%" height="15" fill="rgb(211,206,16)" fg:x="7868" fg:w="5"/><text x="99.5684%" y="1535.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.06%)</title><rect x="99.3184%" y="1509" width="0.0631%" height="15" fill="rgb(244,87,35)" fg:x="7868" fg:w="5"/><text x="99.5684%" y="1519.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="99.3815%" y="1573" width="0.0252%" height="15" fill="rgb(246,28,10)" fg:x="7873" fg:w="2"/><text x="99.6315%" y="1583.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.01%)</title><rect x="99.4067%" y="1573" width="0.0126%" height="15" fill="rgb(229,12,44)" fg:x="7875" fg:w="1"/><text x="99.6567%" y="1583.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.01%)</title><rect x="99.4067%" y="1557" width="0.0126%" height="15" fill="rgb(210,145,37)" fg:x="7875" fg:w="1"/><text x="99.6567%" y="1567.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="99.4067%" y="1541" width="0.0126%" height="15" fill="rgb(227,112,52)" fg:x="7875" fg:w="1"/><text x="99.6567%" y="1551.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="99.4067%" y="1525" width="0.0126%" height="15" fill="rgb(238,155,34)" fg:x="7875" fg:w="1"/><text x="99.6567%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.04%)</title><rect x="99.4193%" y="1573" width="0.0379%" height="15" fill="rgb(239,226,36)" fg:x="7876" fg:w="3"/><text x="99.6693%" y="1583.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (9 samples, 0.11%)</title><rect x="99.4572%" y="1573" width="0.1136%" height="15" fill="rgb(230,16,23)" fg:x="7879" fg:w="9"/><text x="99.7072%" y="1583.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (4 samples, 0.05%)</title><rect x="99.5203%" y="1557" width="0.0505%" height="15" fill="rgb(236,171,36)" fg:x="7884" fg:w="4"/><text x="99.7703%" y="1567.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.05%)</title><rect x="99.5203%" y="1541" width="0.0505%" height="15" fill="rgb(221,22,14)" fg:x="7884" fg:w="4"/><text x="99.7703%" y="1551.50"></text></g><g><title>wisp_mux::fastwebsockets::payload_to_bytesmut (4 samples, 0.05%)</title><rect x="99.5708%" y="1573" width="0.0505%" height="15" fill="rgb(242,43,11)" fg:x="7888" fg:w="4"/><text x="99.8208%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (2 samples, 0.03%)</title><rect x="99.6213%" y="1557" width="0.0252%" height="15" fill="rgb(232,69,23)" fg:x="7892" fg:w="2"/><text x="99.8713%" y="1567.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="99.6213%" y="1541" width="0.0252%" height="15" fill="rgb(216,180,54)" fg:x="7892" fg:w="2"/><text x="99.8713%" y="1551.50"></text></g><g><title>bytes::bytes_mut::release_shared (1 samples, 0.01%)</title><rect x="99.6339%" y="1525" width="0.0126%" height="15" fill="rgb(216,5,24)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1535.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="99.6339%" y="1509" width="0.0126%" height="15" fill="rgb(225,89,9)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (1 samples, 0.01%)</title><rect x="99.6339%" y="1493" width="0.0126%" height="15" fill="rgb(243,75,33)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (1 samples, 0.01%)</title><rect x="99.6339%" y="1477" width="0.0126%" height="15" fill="rgb(247,141,45)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="99.6339%" y="1461" width="0.0126%" height="15" fill="rgb(232,177,36)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="99.6339%" y="1445" width="0.0126%" height="15" fill="rgb(219,125,36)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1455.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="99.6339%" y="1429" width="0.0126%" height="15" fill="rgb(227,94,9)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.01%)</title><rect x="99.6339%" y="1413" width="0.0126%" height="15" fill="rgb(240,34,52)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="99.6339%" y="1397" width="0.0126%" height="15" fill="rgb(216,45,12)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1407.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="99.6339%" y="1381" width="0.0126%" height="15" fill="rgb(246,21,19)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1391.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="99.6339%" y="1365" width="0.0126%" height="15" fill="rgb(213,98,42)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1375.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="99.6339%" y="1349" width="0.0126%" height="15" fill="rgb(250,136,47)" fg:x="7893" fg:w="1"/><text x="99.8839%" y="1359.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::handle_data_packet (12 samples, 0.15%)</title><rect x="99.6213%" y="1573" width="0.1515%" height="15" fill="rgb(251,124,27)" fg:x="7892" fg:w="12"/><text x="99.8713%" y="1583.50"></text></g><g><title>wisp_mux::ws::&lt;impl core::convert::From&lt;wisp_mux::ws::Payload&gt; for bytes::bytes_mut::BytesMut&gt;::from (10 samples, 0.13%)</title><rect x="99.6466%" y="1557" width="0.1262%" height="15" fill="rgb(229,180,14)" fg:x="7894" fg:w="10"/><text x="99.8966%" y="1567.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.11%)</title><rect x="99.8107%" y="1541" width="0.1136%" height="15" fill="rgb(245,216,25)" fg:x="7907" fg:w="9"/><text x="100.0607%" y="1551.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}} (9 samples, 0.11%)</title><rect x="99.8107%" y="1525" width="0.1136%" height="15" fill="rgb(251,43,5)" fg:x="7907" fg:w="9"/><text x="100.0607%" y="1535.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.11%)</title><rect x="99.8107%" y="1509" width="0.1136%" height="15" fill="rgb(250,128,24)" fg:x="7907" fg:w="9"/><text x="100.0607%" y="1519.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_split (1 samples, 0.01%)</title><rect x="99.9243%" y="1541" width="0.0126%" height="15" fill="rgb(217,117,27)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1551.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (1 samples, 0.01%)</title><rect x="99.9243%" y="1525" width="0.0126%" height="15" fill="rgb(245,147,4)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1535.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="99.9243%" y="1509" width="0.0126%" height="15" fill="rgb(242,201,35)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1519.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="99.9243%" y="1493" width="0.0126%" height="15" fill="rgb(218,181,1)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="99.9243%" y="1477" width="0.0126%" height="15" fill="rgb(222,6,29)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="99.9243%" y="1461" width="0.0126%" height="15" fill="rgb(208,186,3)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="99.9243%" y="1445" width="0.0126%" height="15" fill="rgb(216,36,26)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1455.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="99.9243%" y="1429" width="0.0126%" height="15" fill="rgb(248,201,23)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1439.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="99.9243%" y="1413" width="0.0126%" height="15" fill="rgb(251,170,31)" fg:x="7916" fg:w="1"/><text x="100.1743%" y="1423.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::into_future::_{{closure}} (14 samples, 0.18%)</title><rect x="99.7728%" y="1573" width="0.1767%" height="15" fill="rgb(207,110,25)" fg:x="7904" fg:w="14"/><text x="100.0228%" y="1583.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}} (12 samples, 0.15%)</title><rect x="99.7980%" y="1557" width="0.1515%" height="15" fill="rgb(250,54,15)" fg:x="7906" fg:w="12"/><text x="100.0480%" y="1567.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::client_handle_packet::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9369%" y="1541" width="0.0126%" height="15" fill="rgb(227,68,33)" fg:x="7917" fg:w="1"/><text x="100.1869%" y="1551.50"></text></g><g><title>wisp_mux::inner::MuxInner&lt;R&gt;::stream_loop::_{{closure}}::_{{closure}}::_{{closure}} (3 samples, 0.04%)</title><rect x="99.9495%" y="1573" width="0.0379%" height="15" fill="rgb(238,34,41)" fg:x="7918" fg:w="3"/><text x="100.1995%" y="1583.50"></text></g><g><title>all (7,922 samples, 100%)</title><rect x="0.0000%" y="1605" width="100.0000%" height="15" fill="rgb(220,11,15)" fg:x="0" fg:w="7922"/><text x="0.2500%" y="1615.50"></text></g><g><title>tokio-runtime-w (7,885 samples, 99.53%)</title><rect x="0.4671%" y="1589" width="99.5329%" height="15" fill="rgb(246,111,35)" fg:x="37" fg:w="7885"/><text x="0.7171%" y="1599.50">tokio-runtime-w</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9874%" y="1573" width="0.0126%" height="15" fill="rgb(209,88,53)" fg:x="7921" fg:w="1"/><text x="100.2374%" y="1583.50"></text></g></svg></svg>