<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1734" onload="init(evt)" viewBox="0 0 1200 1734" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1734" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1717.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1717.00"> </text><svg id="frames" x="10" width="1180" total_samples="11398"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.05%)</title><rect x="0.0000%" y="1653" width="0.0526%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1663.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0526%" y="1653" width="0.0351%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="4"/><text x="0.3026%" y="1663.50"></text></g><g><title>epoxy-server (16 samples, 0.14%)</title><rect x="0.0000%" y="1669" width="0.1404%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="16"/><text x="0.2500%" y="1679.50"></text></g><g><title>_start (6 samples, 0.05%)</title><rect x="0.0877%" y="1653" width="0.0526%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1663.50"></text></g><g><title>__libc_start_main (6 samples, 0.05%)</title><rect x="0.0877%" y="1637" width="0.0526%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1647.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="0.0877%" y="1621" width="0.0526%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1631.50"></text></g><g><title>main (6 samples, 0.05%)</title><rect x="0.0877%" y="1605" width="0.0526%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1615.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6 samples, 0.05%)</title><rect x="0.0877%" y="1589" width="0.0526%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1599.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.05%)</title><rect x="0.0877%" y="1573" width="0.0526%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1583.50"></text></g><g><title>epoxy_server::main (6 samples, 0.05%)</title><rect x="0.0877%" y="1557" width="0.0526%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1567.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (6 samples, 0.05%)</title><rect x="0.0877%" y="1541" width="0.0526%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1551.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (6 samples, 0.05%)</title><rect x="0.0877%" y="1525" width="0.0526%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1535.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (6 samples, 0.05%)</title><rect x="0.0877%" y="1509" width="0.0526%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1519.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (6 samples, 0.05%)</title><rect x="0.0877%" y="1493" width="0.0526%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1503.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (6 samples, 0.05%)</title><rect x="0.0877%" y="1477" width="0.0526%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1487.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (6 samples, 0.05%)</title><rect x="0.0877%" y="1461" width="0.0526%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1471.50"></text></g><g><title>tokio::runtime::coop::budget (6 samples, 0.05%)</title><rect x="0.0877%" y="1445" width="0.0526%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1455.50"></text></g><g><title>tokio::runtime::coop::with_budget (6 samples, 0.05%)</title><rect x="0.0877%" y="1429" width="0.0526%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1439.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (6 samples, 0.05%)</title><rect x="0.0877%" y="1413" width="0.0526%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1423.50"></text></g><g><title>epoxy_server::main::_{{closure}} (6 samples, 0.05%)</title><rect x="0.0877%" y="1397" width="0.0526%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="6"/><text x="0.3377%" y="1407.50"></text></g><g><title>epoxy_server::stream::ServerListener::new::_{{closure}} (5 samples, 0.04%)</title><rect x="0.0965%" y="1381" width="0.0439%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1391.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::bind::_{{closure}} (5 samples, 0.04%)</title><rect x="0.0965%" y="1365" width="0.0439%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1375.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::bind_addr (5 samples, 0.04%)</title><rect x="0.0965%" y="1349" width="0.0439%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1359.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::new (5 samples, 0.04%)</title><rect x="0.0965%" y="1333" width="0.0439%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1343.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (5 samples, 0.04%)</title><rect x="0.0965%" y="1317" width="0.0439%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1327.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (5 samples, 0.04%)</title><rect x="0.0965%" y="1301" width="0.0439%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="5"/><text x="0.3465%" y="1311.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (4 samples, 0.04%)</title><rect x="0.1053%" y="1285" width="0.0351%" height="15" fill="rgb(225,111,53)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1295.50"></text></g><g><title>tokio::runtime::context::current::with_current (4 samples, 0.04%)</title><rect x="0.1053%" y="1269" width="0.0351%" height="15" fill="rgb(238,160,17)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.04%)</title><rect x="0.1053%" y="1253" width="0.0351%" height="15" fill="rgb(214,148,48)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1263.50"></text></g><g><title>tokio::runtime::context::current::with_current::_{{closure}} (4 samples, 0.04%)</title><rect x="0.1053%" y="1237" width="0.0351%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1247.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.04%)</title><rect x="0.1053%" y="1221" width="0.0351%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1231.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.04%)</title><rect x="0.1053%" y="1205" width="0.0351%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1215.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.04%)</title><rect x="0.1053%" y="1189" width="0.0351%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1199.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.04%)</title><rect x="0.1053%" y="1173" width="0.0351%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="4"/><text x="0.3553%" y="1183.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="0.1404%" y="1653" width="0.0175%" height="15" fill="rgb(241,83,37)" fg:x="16" fg:w="2"/><text x="0.3904%" y="1663.50"></text></g><g><title>&lt;futures_util::io::fill_buf::FillBuf&lt;R&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="0.1667%" y="1509" width="0.0351%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1519.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncRead as futures_io::if_std::AsyncBufRead&gt;::poll_fill_buf (4 samples, 0.04%)</title><rect x="0.1667%" y="1493" width="0.0351%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1503.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncBufRead&gt;::poll_fill_buf (4 samples, 0.04%)</title><rect x="0.1667%" y="1477" width="0.0351%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1487.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (4 samples, 0.04%)</title><rect x="0.1667%" y="1461" width="0.0351%" height="15" fill="rgb(238,167,29)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1471.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoStream as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.04%)</title><rect x="0.1667%" y="1445" width="0.0351%" height="15" fill="rgb(232,182,51)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1455.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.04%)</title><rect x="0.1667%" y="1429" width="0.0351%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="4"/><text x="0.4167%" y="1439.50"></text></g><g><title>epoxy_server::stream::copy_read_fast::_{{closure}} (13 samples, 0.11%)</title><rect x="0.1667%" y="1525" width="0.1141%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="13"/><text x="0.4167%" y="1535.50"></text></g><g><title>futures_util::io::AsyncBufReadExt::consume_unpin (9 samples, 0.08%)</title><rect x="0.2018%" y="1509" width="0.0790%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1519.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncRead as futures_io::if_std::AsyncBufRead&gt;::consume (9 samples, 0.08%)</title><rect x="0.2018%" y="1493" width="0.0790%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1503.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncBufRead&gt;::consume (9 samples, 0.08%)</title><rect x="0.2018%" y="1477" width="0.0790%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::into_async_read::ReadState&lt;bytes::bytes::Bytes&gt;&gt; (9 samples, 0.08%)</title><rect x="0.2018%" y="1461" width="0.0790%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (9 samples, 0.08%)</title><rect x="0.2018%" y="1445" width="0.0790%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1455.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="0.2018%" y="1429" width="0.0790%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="9"/><text x="0.4518%" y="1439.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::poll_flush (3 samples, 0.03%)</title><rect x="0.2808%" y="1429" width="0.0263%" height="15" fill="rgb(239,60,40)" fg:x="32" fg:w="3"/><text x="0.5308%" y="1439.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (3 samples, 0.03%)</title><rect x="0.2808%" y="1413" width="0.0263%" height="15" fill="rgb(206,27,48)" fg:x="32" fg:w="3"/><text x="0.5308%" y="1423.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::poll_ready (7 samples, 0.06%)</title><rect x="0.3071%" y="1429" width="0.0614%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="7"/><text x="0.5571%" y="1439.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (7 samples, 0.06%)</title><rect x="0.3071%" y="1413" width="0.0614%" height="15" fill="rgb(250,213,24)" fg:x="35" fg:w="7"/><text x="0.5571%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="0.3685%" y="1333" width="0.0263%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="0.3685%" y="1317" width="0.0263%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.03%)</title><rect x="0.3685%" y="1301" width="0.0263%" height="15" fill="rgb(231,145,46)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="0.3685%" y="1285" width="0.0263%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="0.3685%" y="1269" width="0.0263%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="0.3685%" y="1253" width="0.0263%" height="15" fill="rgb(247,81,37)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1263.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="0.3685%" y="1237" width="0.0263%" height="15" fill="rgb(209,12,38)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1247.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="0.3685%" y="1221" width="0.0263%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="3"/><text x="0.6185%" y="1231.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::From&lt;&amp;[u8]&gt;&gt;::from (6 samples, 0.05%)</title><rect x="0.3685%" y="1413" width="0.0526%" height="15" fill="rgb(248,47,43)" fg:x="42" fg:w="6"/><text x="0.6185%" y="1423.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.05%)</title><rect x="0.3685%" y="1397" width="0.0526%" height="15" fill="rgb(221,10,30)" fg:x="42" fg:w="6"/><text x="0.6185%" y="1407.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.05%)</title><rect x="0.3685%" y="1381" width="0.0526%" height="15" fill="rgb(210,229,1)" fg:x="42" fg:w="6"/><text x="0.6185%" y="1391.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.05%)</title><rect x="0.3685%" y="1365" width="0.0526%" height="15" fill="rgb(222,148,37)" fg:x="42" fg:w="6"/><text x="0.6185%" y="1375.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.05%)</title><rect x="0.3685%" y="1349" width="0.0526%" height="15" fill="rgb(234,67,33)" fg:x="42" fg:w="6"/><text x="0.6185%" y="1359.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="0.3948%" y="1333" width="0.0263%" height="15" fill="rgb(247,98,35)" fg:x="45" fg:w="3"/><text x="0.6448%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="0.3948%" y="1317" width="0.0263%" height="15" fill="rgb(247,138,52)" fg:x="45" fg:w="3"/><text x="0.6448%" y="1327.50"></text></g><g><title>epoxy_server::handle_stream::_{{closure}} (32 samples, 0.28%)</title><rect x="0.1667%" y="1589" width="0.2808%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="32"/><text x="0.4167%" y="1599.50"></text></g><g><title>epoxy_server::handle_stream::_{{closure}}::_{{closure}} (32 samples, 0.28%)</title><rect x="0.1667%" y="1573" width="0.2808%" height="15" fill="rgb(246,177,23)" fg:x="19" fg:w="32"/><text x="0.4167%" y="1583.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (32 samples, 0.28%)</title><rect x="0.1667%" y="1557" width="0.2808%" height="15" fill="rgb(230,62,27)" fg:x="19" fg:w="32"/><text x="0.4167%" y="1567.50"></text></g><g><title>epoxy_server::handle_stream::_{{closure}}::_{{closure}}::_{{closure}} (32 samples, 0.28%)</title><rect x="0.1667%" y="1541" width="0.2808%" height="15" fill="rgb(216,154,8)" fg:x="19" fg:w="32"/><text x="0.4167%" y="1551.50"></text></g><g><title>tokio::io::util::copy::copy::_{{closure}} (19 samples, 0.17%)</title><rect x="0.2808%" y="1525" width="0.1667%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1535.50"></text></g><g><title>&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Future&gt;::poll (19 samples, 0.17%)</title><rect x="0.2808%" y="1509" width="0.1667%" height="15" fill="rgb(251,115,12)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1519.50"></text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_copy (19 samples, 0.17%)</title><rect x="0.2808%" y="1493" width="0.1667%" height="15" fill="rgb(240,54,50)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1503.50"></text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_write_buf (19 samples, 0.17%)</title><rect x="0.2808%" y="1477" width="0.1667%" height="15" fill="rgb(233,84,52)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1487.50"></text></g><g><title>&lt;tokio_util::compat::Compat&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (19 samples, 0.17%)</title><rect x="0.2808%" y="1461" width="0.1667%" height="15" fill="rgb(207,117,47)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1471.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncWrite as futures_io::if_std::AsyncWrite&gt;::poll_write (19 samples, 0.17%)</title><rect x="0.2808%" y="1445" width="0.1667%" height="15" fill="rgb(249,43,39)" fg:x="32" fg:w="19"/><text x="0.5308%" y="1455.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::start_send (9 samples, 0.08%)</title><rect x="0.3685%" y="1429" width="0.0790%" height="15" fill="rgb(209,38,44)" fg:x="42" fg:w="9"/><text x="0.6185%" y="1439.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::start_send (3 samples, 0.03%)</title><rect x="0.4211%" y="1413" width="0.0263%" height="15" fill="rgb(236,212,23)" fg:x="48" fg:w="3"/><text x="0.6711%" y="1423.50"></text></g><g><title>&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.32%)</title><rect x="0.1579%" y="1653" width="0.3158%" height="15" fill="rgb(242,79,21)" fg:x="18" fg:w="36"/><text x="0.4079%" y="1663.50"></text></g><g><title>tokio::runtime::coop::with_unconstrained (35 samples, 0.31%)</title><rect x="0.1667%" y="1637" width="0.3071%" height="15" fill="rgb(211,96,35)" fg:x="19" fg:w="35"/><text x="0.4167%" y="1647.50"></text></g><g><title>tokio::runtime::coop::with_budget (35 samples, 0.31%)</title><rect x="0.1667%" y="1621" width="0.3071%" height="15" fill="rgb(253,215,40)" fg:x="19" fg:w="35"/><text x="0.4167%" y="1631.50"></text></g><g><title>&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (35 samples, 0.31%)</title><rect x="0.1667%" y="1605" width="0.3071%" height="15" fill="rgb(211,81,21)" fg:x="19" fg:w="35"/><text x="0.4167%" y="1615.50"></text></g><g><title>wisp_mux::MuxInner::server_into_future::_{{closure}} (3 samples, 0.03%)</title><rect x="0.4474%" y="1589" width="0.0263%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="3"/><text x="0.6974%" y="1599.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}} (3 samples, 0.03%)</title><rect x="0.4474%" y="1573" width="0.0263%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="3"/><text x="0.6974%" y="1583.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="0.4474%" y="1557" width="0.0263%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="3"/><text x="0.6974%" y="1567.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}} (3 samples, 0.03%)</title><rect x="0.4474%" y="1541" width="0.0263%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="3"/><text x="0.6974%" y="1551.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.03%)</title><rect x="0.4474%" y="1525" width="0.0263%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="3"/><text x="0.6974%" y="1535.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (4 samples, 0.04%)</title><rect x="0.4738%" y="1653" width="0.0351%" height="15" fill="rgb(210,16,53)" fg:x="54" fg:w="4"/><text x="0.7238%" y="1663.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (2 samples, 0.02%)</title><rect x="0.5089%" y="1653" width="0.0175%" height="15" fill="rgb(235,124,12)" fg:x="58" fg:w="2"/><text x="0.7589%" y="1663.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::start_send (7 samples, 0.06%)</title><rect x="0.5264%" y="1653" width="0.0614%" height="15" fill="rgb(224,169,11)" fg:x="60" fg:w="7"/><text x="0.7764%" y="1663.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::_{{closure}} (5 samples, 0.04%)</title><rect x="0.5878%" y="1653" width="0.0439%" height="15" fill="rgb(250,166,2)" fg:x="67" fg:w="5"/><text x="0.8378%" y="1663.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="0.6054%" y="1637" width="0.0263%" height="15" fill="rgb(242,216,29)" fg:x="69" fg:w="3"/><text x="0.8554%" y="1647.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="0.6317%" y="1637" width="0.0263%" height="15" fill="rgb(230,116,27)" fg:x="72" fg:w="3"/><text x="0.8817%" y="1647.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (2 samples, 0.02%)</title><rect x="0.6843%" y="1637" width="0.0175%" height="15" fill="rgb(228,99,48)" fg:x="78" fg:w="2"/><text x="0.9343%" y="1647.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (5 samples, 0.04%)</title><rect x="0.7107%" y="1637" width="0.0439%" height="15" fill="rgb(253,11,6)" fg:x="81" fg:w="5"/><text x="0.9607%" y="1647.50"></text></g><g><title>[[heap]] (17 samples, 0.15%)</title><rect x="0.6317%" y="1653" width="0.1491%" height="15" fill="rgb(247,143,39)" fg:x="72" fg:w="17"/><text x="0.8817%" y="1663.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.03%)</title><rect x="0.7545%" y="1637" width="0.0263%" height="15" fill="rgb(236,97,10)" fg:x="86" fg:w="3"/><text x="1.0045%" y="1647.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="0.7896%" y="1637" width="0.0614%" height="15" fill="rgb(233,208,19)" fg:x="90" fg:w="7"/><text x="1.0396%" y="1647.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (3 samples, 0.03%)</title><rect x="0.8247%" y="1621" width="0.0263%" height="15" fill="rgb(216,164,2)" fg:x="94" fg:w="3"/><text x="1.0747%" y="1631.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (3 samples, 0.03%)</title><rect x="0.8247%" y="1605" width="0.0263%" height="15" fill="rgb(220,129,5)" fg:x="94" fg:w="3"/><text x="1.0747%" y="1615.50"></text></g><g><title>event_listener::TaskRef::into_task (3 samples, 0.03%)</title><rect x="0.8247%" y="1589" width="0.0263%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="3"/><text x="1.0747%" y="1599.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="0.8247%" y="1573" width="0.0263%" height="15" fill="rgb(242,107,0)" fg:x="94" fg:w="3"/><text x="1.0747%" y="1583.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="0.8510%" y="1637" width="0.0614%" height="15" fill="rgb(251,28,31)" fg:x="97" fg:w="7"/><text x="1.1010%" y="1647.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="0.9124%" y="1637" width="0.0614%" height="15" fill="rgb(233,223,10)" fg:x="104" fg:w="7"/><text x="1.1624%" y="1647.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.05%)</title><rect x="0.9212%" y="1621" width="0.0526%" height="15" fill="rgb(215,21,27)" fg:x="105" fg:w="6"/><text x="1.1712%" y="1631.50"></text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.05%)</title><rect x="0.9212%" y="1605" width="0.0526%" height="15" fill="rgb(232,23,21)" fg:x="105" fg:w="6"/><text x="1.1712%" y="1615.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.05%)</title><rect x="0.9212%" y="1589" width="0.0526%" height="15" fill="rgb(244,5,23)" fg:x="105" fg:w="6"/><text x="1.1712%" y="1599.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (2 samples, 0.02%)</title><rect x="0.9739%" y="1637" width="0.0175%" height="15" fill="rgb(226,81,46)" fg:x="111" fg:w="2"/><text x="1.2239%" y="1647.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (3 samples, 0.03%)</title><rect x="0.9914%" y="1637" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="113" fg:w="3"/><text x="1.2414%" y="1647.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (9 samples, 0.08%)</title><rect x="1.0177%" y="1621" width="0.0790%" height="15" fill="rgb(212,68,19)" fg:x="116" fg:w="9"/><text x="1.2677%" y="1631.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::start_send (12 samples, 0.11%)</title><rect x="1.0177%" y="1637" width="0.1053%" height="15" fill="rgb(240,187,13)" fg:x="116" fg:w="12"/><text x="1.2677%" y="1647.50"></text></g><g><title>wisp_mux::sink_unfold::UnfoldState&lt;T,Fut&gt;::take_value (3 samples, 0.03%)</title><rect x="1.0967%" y="1621" width="0.0263%" height="15" fill="rgb(223,113,26)" fg:x="125" fg:w="3"/><text x="1.3467%" y="1631.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncWrite as futures_io::if_std::AsyncWrite&gt;::poll_flush (2 samples, 0.02%)</title><rect x="1.1230%" y="1637" width="0.0175%" height="15" fill="rgb(206,192,2)" fg:x="128" fg:w="2"/><text x="1.3730%" y="1647.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::_{{closure}} (3 samples, 0.03%)</title><rect x="1.1406%" y="1637" width="0.0263%" height="15" fill="rgb(241,108,4)" fg:x="130" fg:w="3"/><text x="1.3906%" y="1647.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.03%)</title><rect x="1.1669%" y="1637" width="0.0263%" height="15" fill="rgb(247,173,49)" fg:x="133" fg:w="3"/><text x="1.4169%" y="1647.50"></text></g><g><title>[libc.so.6] (20 samples, 0.18%)</title><rect x="1.1932%" y="1637" width="0.1755%" height="15" fill="rgb(224,114,35)" fg:x="136" fg:w="20"/><text x="1.4432%" y="1647.50"></text></g><g><title>__floattidf (2 samples, 0.02%)</title><rect x="1.3687%" y="1637" width="0.0175%" height="15" fill="rgb(245,159,27)" fg:x="156" fg:w="2"/><text x="1.6187%" y="1647.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.02%)</title><rect x="1.4038%" y="1637" width="0.0175%" height="15" fill="rgb(245,172,44)" fg:x="160" fg:w="2"/><text x="1.6538%" y="1647.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.02%)</title><rect x="1.4038%" y="1621" width="0.0175%" height="15" fill="rgb(236,23,11)" fg:x="160" fg:w="2"/><text x="1.6538%" y="1631.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (4 samples, 0.04%)</title><rect x="1.4213%" y="1637" width="0.0351%" height="15" fill="rgb(205,117,38)" fg:x="162" fg:w="4"/><text x="1.6713%" y="1647.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3 samples, 0.03%)</title><rect x="1.4301%" y="1621" width="0.0263%" height="15" fill="rgb(237,72,25)" fg:x="163" fg:w="3"/><text x="1.6801%" y="1631.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (3 samples, 0.03%)</title><rect x="1.4564%" y="1637" width="0.0263%" height="15" fill="rgb(244,70,9)" fg:x="166" fg:w="3"/><text x="1.7064%" y="1647.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.03%)</title><rect x="1.4564%" y="1621" width="0.0263%" height="15" fill="rgb(217,125,39)" fg:x="166" fg:w="3"/><text x="1.7064%" y="1631.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (3 samples, 0.03%)</title><rect x="1.4564%" y="1605" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="166" fg:w="3"/><text x="1.7064%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (2 samples, 0.02%)</title><rect x="1.5003%" y="1637" width="0.0175%" height="15" fill="rgb(251,123,47)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="1.5003%" y="1621" width="0.0175%" height="15" fill="rgb(221,13,13)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="1.5003%" y="1605" width="0.0175%" height="15" fill="rgb(238,131,9)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="1.5003%" y="1589" width="0.0175%" height="15" fill="rgb(211,50,8)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1599.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop (2 samples, 0.02%)</title><rect x="1.5003%" y="1573" width="0.0175%" height="15" fill="rgb(245,182,24)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1583.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop::__drop_inner (2 samples, 0.02%)</title><rect x="1.5003%" y="1557" width="0.0175%" height="15" fill="rgb(242,14,37)" fg:x="171" fg:w="2"/><text x="1.7503%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (4 samples, 0.04%)</title><rect x="1.5178%" y="1637" width="0.0351%" height="15" fill="rgb(246,228,12)" fg:x="173" fg:w="4"/><text x="1.7678%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="1.5529%" y="1637" width="0.0263%" height="15" fill="rgb(213,55,15)" fg:x="177" fg:w="3"/><text x="1.8029%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio_util::either::Either&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,tokio::net::unix::split_owned::OwnedWriteHalf&gt;&gt;&gt;::wisp_write_split::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="1.5880%" y="1637" width="0.0175%" height="15" fill="rgb(209,9,3)" fg:x="181" fg:w="2"/><text x="1.8380%" y="1647.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (4 samples, 0.04%)</title><rect x="1.6055%" y="1637" width="0.0351%" height="15" fill="rgb(230,59,30)" fg:x="183" fg:w="4"/><text x="1.8555%" y="1647.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (2 samples, 0.02%)</title><rect x="1.6231%" y="1621" width="0.0175%" height="15" fill="rgb(209,121,21)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1631.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="1.6231%" y="1605" width="0.0175%" height="15" fill="rgb(220,109,13)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1615.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="1.6231%" y="1589" width="0.0175%" height="15" fill="rgb(232,18,1)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1599.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="1.6231%" y="1573" width="0.0175%" height="15" fill="rgb(215,41,42)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1583.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="1.6231%" y="1557" width="0.0175%" height="15" fill="rgb(224,123,36)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1567.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="1.6231%" y="1541" width="0.0175%" height="15" fill="rgb(240,125,3)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1551.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="1.6231%" y="1525" width="0.0175%" height="15" fill="rgb(205,98,50)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1535.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="1.6231%" y="1509" width="0.0175%" height="15" fill="rgb(205,185,37)" fg:x="185" fg:w="2"/><text x="1.8731%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (6 samples, 0.05%)</title><rect x="1.7021%" y="1605" width="0.0526%" height="15" fill="rgb(238,207,15)" fg:x="194" fg:w="6"/><text x="1.9521%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (6 samples, 0.05%)</title><rect x="1.7021%" y="1589" width="0.0526%" height="15" fill="rgb(213,199,42)" fg:x="194" fg:w="6"/><text x="1.9521%" y="1599.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (16 samples, 0.14%)</title><rect x="1.6494%" y="1637" width="0.1404%" height="15" fill="rgb(235,201,11)" fg:x="188" fg:w="16"/><text x="1.8994%" y="1647.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (12 samples, 0.11%)</title><rect x="1.6845%" y="1621" width="0.1053%" height="15" fill="rgb(207,46,11)" fg:x="192" fg:w="12"/><text x="1.9345%" y="1631.50"></text></g><g><title>fastwebsockets::frame::Frame::write (4 samples, 0.04%)</title><rect x="1.7547%" y="1605" width="0.0351%" height="15" fill="rgb(241,35,35)" fg:x="200" fg:w="4"/><text x="2.0047%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.04%)</title><rect x="1.7547%" y="1589" width="0.0351%" height="15" fill="rgb(243,32,47)" fg:x="200" fg:w="4"/><text x="2.0047%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="1.7547%" y="1573" width="0.0351%" height="15" fill="rgb(247,202,23)" fg:x="200" fg:w="4"/><text x="2.0047%" y="1583.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (6 samples, 0.05%)</title><rect x="1.8073%" y="1637" width="0.0526%" height="15" fill="rgb(219,102,11)" fg:x="206" fg:w="6"/><text x="2.0573%" y="1647.50"></text></g><g><title>malloc (6 samples, 0.05%)</title><rect x="1.8600%" y="1637" width="0.0526%" height="15" fill="rgb(243,110,44)" fg:x="212" fg:w="6"/><text x="2.1100%" y="1647.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="1.9302%" y="1605" width="0.0263%" height="15" fill="rgb(222,74,54)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1615.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.03%)</title><rect x="1.9302%" y="1589" width="0.0263%" height="15" fill="rgb(216,99,12)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1599.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (3 samples, 0.03%)</title><rect x="1.9302%" y="1573" width="0.0263%" height="15" fill="rgb(226,22,26)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1583.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (3 samples, 0.03%)</title><rect x="1.9302%" y="1557" width="0.0263%" height="15" fill="rgb(217,163,10)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1567.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="1.9302%" y="1541" width="0.0263%" height="15" fill="rgb(213,25,53)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1551.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.03%)</title><rect x="1.9302%" y="1525" width="0.0263%" height="15" fill="rgb(252,105,26)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1535.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (3 samples, 0.03%)</title><rect x="1.9302%" y="1509" width="0.0263%" height="15" fill="rgb(220,39,43)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1519.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (3 samples, 0.03%)</title><rect x="1.9302%" y="1493" width="0.0263%" height="15" fill="rgb(229,68,48)" fg:x="220" fg:w="3"/><text x="2.1802%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (5 samples, 0.04%)</title><rect x="1.9214%" y="1637" width="0.0439%" height="15" fill="rgb(252,8,32)" fg:x="219" fg:w="5"/><text x="2.1714%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.04%)</title><rect x="1.9302%" y="1621" width="0.0351%" height="15" fill="rgb(223,20,43)" fg:x="220" fg:w="4"/><text x="2.1802%" y="1631.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (4 samples, 0.04%)</title><rect x="1.9740%" y="1605" width="0.0351%" height="15" fill="rgb(229,81,49)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1615.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4 samples, 0.04%)</title><rect x="1.9740%" y="1589" width="0.0351%" height="15" fill="rgb(236,28,36)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1599.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (4 samples, 0.04%)</title><rect x="1.9740%" y="1573" width="0.0351%" height="15" fill="rgb(249,185,26)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1583.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (4 samples, 0.04%)</title><rect x="1.9740%" y="1557" width="0.0351%" height="15" fill="rgb(249,174,33)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1567.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (4 samples, 0.04%)</title><rect x="1.9740%" y="1541" width="0.0351%" height="15" fill="rgb(233,201,37)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1551.50"></text></g><g><title>std::sys_common::net::TcpStream::write (4 samples, 0.04%)</title><rect x="1.9740%" y="1525" width="0.0351%" height="15" fill="rgb(221,78,26)" fg:x="225" fg:w="4"/><text x="2.2240%" y="1535.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (11 samples, 0.10%)</title><rect x="1.9653%" y="1637" width="0.0965%" height="15" fill="rgb(250,127,30)" fg:x="224" fg:w="11"/><text x="2.2153%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (10 samples, 0.09%)</title><rect x="1.9740%" y="1621" width="0.0877%" height="15" fill="rgb(230,49,44)" fg:x="225" fg:w="10"/><text x="2.2240%" y="1631.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (6 samples, 0.05%)</title><rect x="2.0091%" y="1605" width="0.0526%" height="15" fill="rgb(229,67,23)" fg:x="229" fg:w="6"/><text x="2.2591%" y="1615.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.08%)</title><rect x="2.0793%" y="1637" width="0.0790%" height="15" fill="rgb(249,83,47)" fg:x="237" fg:w="9"/><text x="2.3293%" y="1647.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (3 samples, 0.03%)</title><rect x="2.1583%" y="1637" width="0.0263%" height="15" fill="rgb(215,43,3)" fg:x="246" fg:w="3"/><text x="2.4083%" y="1647.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6 samples, 0.05%)</title><rect x="2.1934%" y="1637" width="0.0526%" height="15" fill="rgb(238,154,13)" fg:x="250" fg:w="6"/><text x="2.4434%" y="1647.50"></text></g><g><title>tokio::runtime::coop::budget (4 samples, 0.04%)</title><rect x="2.2109%" y="1621" width="0.0351%" height="15" fill="rgb(219,56,2)" fg:x="252" fg:w="4"/><text x="2.4609%" y="1631.50"></text></g><g><title>tokio::runtime::coop::with_budget (4 samples, 0.04%)</title><rect x="2.2109%" y="1605" width="0.0351%" height="15" fill="rgb(233,0,4)" fg:x="252" fg:w="4"/><text x="2.4609%" y="1615.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (4 samples, 0.04%)</title><rect x="2.2109%" y="1589" width="0.0351%" height="15" fill="rgb(235,30,7)" fg:x="252" fg:w="4"/><text x="2.4609%" y="1599.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (4 samples, 0.04%)</title><rect x="2.2109%" y="1573" width="0.0351%" height="15" fill="rgb(250,79,13)" fg:x="252" fg:w="4"/><text x="2.4609%" y="1583.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 0.04%)</title><rect x="2.2109%" y="1557" width="0.0351%" height="15" fill="rgb(211,146,34)" fg:x="252" fg:w="4"/><text x="2.4609%" y="1567.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.02%)</title><rect x="2.2548%" y="1637" width="0.0175%" height="15" fill="rgb(228,22,38)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.02%)</title><rect x="2.2548%" y="1621" width="0.0175%" height="15" fill="rgb(235,168,5)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 0.02%)</title><rect x="2.2548%" y="1605" width="0.0175%" height="15" fill="rgb(221,155,16)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 0.02%)</title><rect x="2.2548%" y="1589" width="0.0175%" height="15" fill="rgb(215,215,53)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1599.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.02%)</title><rect x="2.2548%" y="1573" width="0.0175%" height="15" fill="rgb(223,4,10)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1583.50"></text></g><g><title>std::panicking::try (2 samples, 0.02%)</title><rect x="2.2548%" y="1557" width="0.0175%" height="15" fill="rgb(234,103,6)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1567.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.02%)</title><rect x="2.2548%" y="1541" width="0.0175%" height="15" fill="rgb(227,97,0)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1551.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.02%)</title><rect x="2.2548%" y="1525" width="0.0175%" height="15" fill="rgb(234,150,53)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1509" width="0.0175%" height="15" fill="rgb(228,201,54)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1519.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.02%)</title><rect x="2.2548%" y="1493" width="0.0175%" height="15" fill="rgb(222,22,37)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1503.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.02%)</title><rect x="2.2548%" y="1477" width="0.0175%" height="15" fill="rgb(237,53,32)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1487.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1461" width="0.0175%" height="15" fill="rgb(233,25,53)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="2.2548%" y="1445" width="0.0175%" height="15" fill="rgb(210,40,34)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1455.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1429" width="0.0175%" height="15" fill="rgb(241,220,44)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1439.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (2 samples, 0.02%)</title><rect x="2.2548%" y="1413" width="0.0175%" height="15" fill="rgb(235,28,35)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1423.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (2 samples, 0.02%)</title><rect x="2.2548%" y="1397" width="0.0175%" height="15" fill="rgb(210,56,17)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1407.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1381" width="0.0175%" height="15" fill="rgb(224,130,29)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1391.50"></text></g><g><title>tokio::runtime::context::set_scheduler (2 samples, 0.02%)</title><rect x="2.2548%" y="1365" width="0.0175%" height="15" fill="rgb(235,212,8)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1375.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="2.2548%" y="1349" width="0.0175%" height="15" fill="rgb(223,33,50)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="2.2548%" y="1333" width="0.0175%" height="15" fill="rgb(219,149,13)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1343.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1317" width="0.0175%" height="15" fill="rgb(250,156,29)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1327.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="2.2548%" y="1301" width="0.0175%" height="15" fill="rgb(216,193,19)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1311.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="2.2548%" y="1285" width="0.0175%" height="15" fill="rgb(216,135,14)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1295.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (2 samples, 0.02%)</title><rect x="2.2548%" y="1269" width="0.0175%" height="15" fill="rgb(241,47,5)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1279.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (2 samples, 0.02%)</title><rect x="2.2548%" y="1253" width="0.0175%" height="15" fill="rgb(233,42,35)" fg:x="257" fg:w="2"/><text x="2.5048%" y="1263.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (9 samples, 0.08%)</title><rect x="2.2811%" y="1637" width="0.0790%" height="15" fill="rgb(231,13,6)" fg:x="260" fg:w="9"/><text x="2.5311%" y="1647.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (13 samples, 0.11%)</title><rect x="2.3601%" y="1637" width="0.1141%" height="15" fill="rgb(207,181,40)" fg:x="269" fg:w="13"/><text x="2.6101%" y="1647.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (3 samples, 0.03%)</title><rect x="2.4829%" y="1637" width="0.0263%" height="15" fill="rgb(254,173,49)" fg:x="283" fg:w="3"/><text x="2.7329%" y="1647.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (2 samples, 0.02%)</title><rect x="2.4917%" y="1621" width="0.0175%" height="15" fill="rgb(221,1,38)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1631.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="2.4917%" y="1605" width="0.0175%" height="15" fill="rgb(206,124,46)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1615.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="2.4917%" y="1589" width="0.0175%" height="15" fill="rgb(249,21,11)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1599.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="2.4917%" y="1573" width="0.0175%" height="15" fill="rgb(222,201,40)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1583.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="2.4917%" y="1557" width="0.0175%" height="15" fill="rgb(235,61,29)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1567.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="2.4917%" y="1541" width="0.0175%" height="15" fill="rgb(219,207,3)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1551.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="2.4917%" y="1525" width="0.0175%" height="15" fill="rgb(222,56,46)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1535.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="2.4917%" y="1509" width="0.0175%" height="15" fill="rgb(239,76,54)" fg:x="284" fg:w="2"/><text x="2.7417%" y="1519.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (11 samples, 0.10%)</title><rect x="2.5180%" y="1637" width="0.0965%" height="15" fill="rgb(231,124,27)" fg:x="287" fg:w="11"/><text x="2.7680%" y="1647.50"></text></g><g><title>&lt;wisp_mux::packet::Packet as wisp_mux::packet::Encode&gt;::encode (2 samples, 0.02%)</title><rect x="2.6233%" y="1621" width="0.0175%" height="15" fill="rgb(249,195,6)" fg:x="299" fg:w="2"/><text x="2.8733%" y="1631.50"></text></g><g><title>&lt;wisp_mux::packet::PacketType as wisp_mux::packet::Encode&gt;::encode (2 samples, 0.02%)</title><rect x="2.6233%" y="1605" width="0.0175%" height="15" fill="rgb(237,174,47)" fg:x="299" fg:w="2"/><text x="2.8733%" y="1615.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (2 samples, 0.02%)</title><rect x="2.6233%" y="1589" width="0.0175%" height="15" fill="rgb(206,201,31)" fg:x="299" fg:w="2"/><text x="2.8733%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="2.6233%" y="1573" width="0.0175%" height="15" fill="rgb(231,57,52)" fg:x="299" fg:w="2"/><text x="2.8733%" y="1583.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (8 samples, 0.07%)</title><rect x="2.6145%" y="1637" width="0.0702%" height="15" fill="rgb(248,177,22)" fg:x="298" fg:w="8"/><text x="2.8645%" y="1647.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (5 samples, 0.04%)</title><rect x="2.6408%" y="1621" width="0.0439%" height="15" fill="rgb(215,211,37)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.04%)</title><rect x="2.6408%" y="1605" width="0.0439%" height="15" fill="rgb(241,128,51)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="2.6408%" y="1589" width="0.0439%" height="15" fill="rgb(227,165,31)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1599.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="2.6408%" y="1573" width="0.0439%" height="15" fill="rgb(228,167,24)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.04%)</title><rect x="2.6408%" y="1557" width="0.0439%" height="15" fill="rgb(228,143,12)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="2.6408%" y="1541" width="0.0439%" height="15" fill="rgb(249,149,8)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="2.6408%" y="1525" width="0.0439%" height="15" fill="rgb(243,35,44)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1535.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="2.6408%" y="1509" width="0.0439%" height="15" fill="rgb(246,89,9)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1519.50"></text></g><g><title>__rdl_alloc (5 samples, 0.04%)</title><rect x="2.6408%" y="1493" width="0.0439%" height="15" fill="rgb(233,213,13)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1503.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.04%)</title><rect x="2.6408%" y="1477" width="0.0439%" height="15" fill="rgb(233,141,41)" fg:x="301" fg:w="5"/><text x="2.8908%" y="1487.50"></text></g><g><title>[anon] (230 samples, 2.02%)</title><rect x="0.7808%" y="1653" width="2.0179%" height="15" fill="rgb(239,167,4)" fg:x="89" fg:w="230"/><text x="1.0308%" y="1663.50">[..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (13 samples, 0.11%)</title><rect x="2.6847%" y="1637" width="0.1141%" height="15" fill="rgb(209,217,16)" fg:x="306" fg:w="13"/><text x="2.9347%" y="1647.50"></text></g><g><title>[epoxy-server] (3 samples, 0.03%)</title><rect x="2.7987%" y="1653" width="0.0263%" height="15" fill="rgb(219,88,35)" fg:x="319" fg:w="3"/><text x="3.0487%" y="1663.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (9 samples, 0.08%)</title><rect x="2.8514%" y="1413" width="0.0790%" height="15" fill="rgb(220,193,23)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1423.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (9 samples, 0.08%)</title><rect x="2.8514%" y="1397" width="0.0790%" height="15" fill="rgb(230,90,52)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1407.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (9 samples, 0.08%)</title><rect x="2.8514%" y="1381" width="0.0790%" height="15" fill="rgb(252,106,19)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1391.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.08%)</title><rect x="2.8514%" y="1365" width="0.0790%" height="15" fill="rgb(206,74,20)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1375.50"></text></g><g><title>parking_lot_core::parking_lot::park (9 samples, 0.08%)</title><rect x="2.8514%" y="1349" width="0.0790%" height="15" fill="rgb(230,138,44)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (9 samples, 0.08%)</title><rect x="2.8514%" y="1333" width="0.0790%" height="15" fill="rgb(235,182,43)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (9 samples, 0.08%)</title><rect x="2.8514%" y="1317" width="0.0790%" height="15" fill="rgb(242,16,51)" fg:x="325" fg:w="9"/><text x="3.1014%" y="1327.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (4 samples, 0.04%)</title><rect x="2.8952%" y="1301" width="0.0351%" height="15" fill="rgb(248,9,4)" fg:x="330" fg:w="4"/><text x="3.1452%" y="1311.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (4 samples, 0.04%)</title><rect x="2.8952%" y="1285" width="0.0351%" height="15" fill="rgb(210,31,22)" fg:x="330" fg:w="4"/><text x="3.1452%" y="1295.50"></text></g><g><title>syscall (4 samples, 0.04%)</title><rect x="2.8952%" y="1269" width="0.0351%" height="15" fill="rgb(239,54,39)" fg:x="330" fg:w="4"/><text x="3.1452%" y="1279.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="3.0181%" y="981" width="0.0175%" height="15" fill="rgb(230,99,41)" fg:x="344" fg:w="2"/><text x="3.2681%" y="991.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.03%)</title><rect x="3.1058%" y="965" width="0.0263%" height="15" fill="rgb(253,106,12)" fg:x="354" fg:w="3"/><text x="3.3558%" y="975.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.03%)</title><rect x="3.1058%" y="949" width="0.0263%" height="15" fill="rgb(213,46,41)" fg:x="354" fg:w="3"/><text x="3.3558%" y="959.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.03%)</title><rect x="3.1058%" y="933" width="0.0263%" height="15" fill="rgb(215,133,35)" fg:x="354" fg:w="3"/><text x="3.3558%" y="943.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (3 samples, 0.03%)</title><rect x="3.1058%" y="917" width="0.0263%" height="15" fill="rgb(213,28,5)" fg:x="354" fg:w="3"/><text x="3.3558%" y="927.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.02%)</title><rect x="3.1146%" y="901" width="0.0175%" height="15" fill="rgb(215,77,49)" fg:x="355" fg:w="2"/><text x="3.3646%" y="911.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (5 samples, 0.04%)</title><rect x="3.1321%" y="933" width="0.0439%" height="15" fill="rgb(248,100,22)" fg:x="357" fg:w="5"/><text x="3.3821%" y="943.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (2 samples, 0.02%)</title><rect x="3.1584%" y="917" width="0.0175%" height="15" fill="rgb(208,67,9)" fg:x="360" fg:w="2"/><text x="3.4084%" y="927.50"></text></g><g><title>__floattidf (7 samples, 0.06%)</title><rect x="3.1321%" y="965" width="0.0614%" height="15" fill="rgb(219,133,21)" fg:x="357" fg:w="7"/><text x="3.3821%" y="975.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (7 samples, 0.06%)</title><rect x="3.1321%" y="949" width="0.0614%" height="15" fill="rgb(246,46,29)" fg:x="357" fg:w="7"/><text x="3.3821%" y="959.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (2 samples, 0.02%)</title><rect x="3.1760%" y="933" width="0.0175%" height="15" fill="rgb(246,185,52)" fg:x="362" fg:w="2"/><text x="3.4260%" y="943.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (2 samples, 0.02%)</title><rect x="3.1760%" y="917" width="0.0175%" height="15" fill="rgb(252,136,11)" fg:x="362" fg:w="2"/><text x="3.4260%" y="927.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (14 samples, 0.12%)</title><rect x="3.1935%" y="965" width="0.1228%" height="15" fill="rgb(219,138,53)" fg:x="364" fg:w="14"/><text x="3.4435%" y="975.50"></text></g><g><title>pow (14 samples, 0.12%)</title><rect x="3.1935%" y="949" width="0.1228%" height="15" fill="rgb(211,51,23)" fg:x="364" fg:w="14"/><text x="3.4435%" y="959.50"></text></g><g><title>[libm.so.6] (7 samples, 0.06%)</title><rect x="3.2550%" y="933" width="0.0614%" height="15" fill="rgb(247,221,28)" fg:x="371" fg:w="7"/><text x="3.5050%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (47 samples, 0.41%)</title><rect x="3.0356%" y="981" width="0.4124%" height="15" fill="rgb(251,222,45)" fg:x="346" fg:w="47"/><text x="3.2856%" y="991.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (15 samples, 0.13%)</title><rect x="3.3164%" y="965" width="0.1316%" height="15" fill="rgb(217,162,53)" fg:x="378" fg:w="15"/><text x="3.5664%" y="975.50"></text></g><g><title>clock_gettime (15 samples, 0.13%)</title><rect x="3.3164%" y="949" width="0.1316%" height="15" fill="rgb(229,93,14)" fg:x="378" fg:w="15"/><text x="3.5664%" y="959.50"></text></g><g><title>__vdso_clock_gettime (7 samples, 0.06%)</title><rect x="3.3866%" y="933" width="0.0614%" height="15" fill="rgb(209,67,49)" fg:x="386" fg:w="7"/><text x="3.6366%" y="943.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.04%)</title><rect x="3.4480%" y="965" width="0.0351%" height="15" fill="rgb(213,87,29)" fg:x="393" fg:w="4"/><text x="3.6980%" y="975.50"></text></g><g><title>clock_gettime (3 samples, 0.03%)</title><rect x="3.4567%" y="949" width="0.0263%" height="15" fill="rgb(205,151,52)" fg:x="394" fg:w="3"/><text x="3.7067%" y="959.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.03%)</title><rect x="3.4567%" y="933" width="0.0263%" height="15" fill="rgb(253,215,39)" fg:x="394" fg:w="3"/><text x="3.7067%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (5 samples, 0.04%)</title><rect x="3.4480%" y="981" width="0.0439%" height="15" fill="rgb(221,220,41)" fg:x="393" fg:w="5"/><text x="3.6980%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="3.5182%" y="917" width="0.0175%" height="15" fill="rgb(218,133,21)" fg:x="401" fg:w="2"/><text x="3.7682%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="3.5182%" y="901" width="0.0175%" height="15" fill="rgb(221,193,43)" fg:x="401" fg:w="2"/><text x="3.7682%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="3.5182%" y="885" width="0.0175%" height="15" fill="rgb(240,128,52)" fg:x="401" fg:w="2"/><text x="3.7682%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="3.5182%" y="869" width="0.0175%" height="15" fill="rgb(253,114,12)" fg:x="401" fg:w="2"/><text x="3.7682%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="3.5182%" y="853" width="0.0175%" height="15" fill="rgb(215,223,47)" fg:x="401" fg:w="2"/><text x="3.7682%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="3.5182%" y="837" width="0.0175%" height="15" fill="rgb(248,225,23)" fg:x="401" fg:w="2"/><text x="3.7682%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="3.5182%" y="821" width="0.0175%" height="15" fill="rgb(250,108,0)" fg:x="401" fg:w="2"/><text x="3.7682%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="3.5182%" y="805" width="0.0175%" height="15" fill="rgb(228,208,7)" fg:x="401" fg:w="2"/><text x="3.7682%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="3.5182%" y="789" width="0.0175%" height="15" fill="rgb(244,45,10)" fg:x="401" fg:w="2"/><text x="3.7682%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="3.5182%" y="773" width="0.0175%" height="15" fill="rgb(207,125,25)" fg:x="401" fg:w="2"/><text x="3.7682%" y="783.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (2 samples, 0.02%)</title><rect x="3.5182%" y="757" width="0.0175%" height="15" fill="rgb(210,195,18)" fg:x="401" fg:w="2"/><text x="3.7682%" y="767.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (2 samples, 0.02%)</title><rect x="3.5182%" y="741" width="0.0175%" height="15" fill="rgb(249,80,12)" fg:x="401" fg:w="2"/><text x="3.7682%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="3.5182%" y="725" width="0.0175%" height="15" fill="rgb(221,65,9)" fg:x="401" fg:w="2"/><text x="3.7682%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.02%)</title><rect x="3.5182%" y="709" width="0.0175%" height="15" fill="rgb(235,49,36)" fg:x="401" fg:w="2"/><text x="3.7682%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.02%)</title><rect x="3.5182%" y="693" width="0.0175%" height="15" fill="rgb(225,32,20)" fg:x="401" fg:w="2"/><text x="3.7682%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.02%)</title><rect x="3.5182%" y="677" width="0.0175%" height="15" fill="rgb(215,141,46)" fg:x="401" fg:w="2"/><text x="3.7682%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="3.5182%" y="661" width="0.0175%" height="15" fill="rgb(250,160,47)" fg:x="401" fg:w="2"/><text x="3.7682%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (2 samples, 0.02%)</title><rect x="3.5357%" y="917" width="0.0175%" height="15" fill="rgb(216,222,40)" fg:x="403" fg:w="2"/><text x="3.7857%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.02%)</title><rect x="3.5357%" y="901" width="0.0175%" height="15" fill="rgb(234,217,39)" fg:x="403" fg:w="2"/><text x="3.7857%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.02%)</title><rect x="3.5357%" y="885" width="0.0175%" height="15" fill="rgb(207,178,40)" fg:x="403" fg:w="2"/><text x="3.7857%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="3.5357%" y="869" width="0.0175%" height="15" fill="rgb(221,136,13)" fg:x="403" fg:w="2"/><text x="3.7857%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (2 samples, 0.02%)</title><rect x="3.5357%" y="853" width="0.0175%" height="15" fill="rgb(249,199,10)" fg:x="403" fg:w="2"/><text x="3.7857%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.02%)</title><rect x="3.5357%" y="837" width="0.0175%" height="15" fill="rgb(249,222,13)" fg:x="403" fg:w="2"/><text x="3.7857%" y="847.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (2 samples, 0.02%)</title><rect x="3.5357%" y="821" width="0.0175%" height="15" fill="rgb(244,185,38)" fg:x="403" fg:w="2"/><text x="3.7857%" y="831.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (2 samples, 0.02%)</title><rect x="3.5357%" y="805" width="0.0175%" height="15" fill="rgb(236,202,9)" fg:x="403" fg:w="2"/><text x="3.7857%" y="815.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.02%)</title><rect x="3.5357%" y="789" width="0.0175%" height="15" fill="rgb(250,229,37)" fg:x="403" fg:w="2"/><text x="3.7857%" y="799.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (2 samples, 0.02%)</title><rect x="3.5883%" y="725" width="0.0175%" height="15" fill="rgb(206,174,23)" fg:x="409" fg:w="2"/><text x="3.8383%" y="735.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="3.5883%" y="709" width="0.0175%" height="15" fill="rgb(211,33,43)" fg:x="409" fg:w="2"/><text x="3.8383%" y="719.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.02%)</title><rect x="3.5883%" y="693" width="0.0175%" height="15" fill="rgb(245,58,50)" fg:x="409" fg:w="2"/><text x="3.8383%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.02%)</title><rect x="3.5883%" y="677" width="0.0175%" height="15" fill="rgb(244,68,36)" fg:x="409" fg:w="2"/><text x="3.8383%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.02%)</title><rect x="3.5883%" y="661" width="0.0175%" height="15" fill="rgb(232,229,15)" fg:x="409" fg:w="2"/><text x="3.8383%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="3.5883%" y="645" width="0.0175%" height="15" fill="rgb(254,30,23)" fg:x="409" fg:w="2"/><text x="3.8383%" y="655.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (6 samples, 0.05%)</title><rect x="3.5708%" y="917" width="0.0526%" height="15" fill="rgb(235,160,14)" fg:x="407" fg:w="6"/><text x="3.8208%" y="927.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (6 samples, 0.05%)</title><rect x="3.5708%" y="901" width="0.0526%" height="15" fill="rgb(212,155,44)" fg:x="407" fg:w="6"/><text x="3.8208%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (6 samples, 0.05%)</title><rect x="3.5708%" y="885" width="0.0526%" height="15" fill="rgb(226,2,50)" fg:x="407" fg:w="6"/><text x="3.8208%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (6 samples, 0.05%)</title><rect x="3.5708%" y="869" width="0.0526%" height="15" fill="rgb(234,177,6)" fg:x="407" fg:w="6"/><text x="3.8208%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6 samples, 0.05%)</title><rect x="3.5708%" y="853" width="0.0526%" height="15" fill="rgb(217,24,9)" fg:x="407" fg:w="6"/><text x="3.8208%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="3.5708%" y="837" width="0.0526%" height="15" fill="rgb(220,13,46)" fg:x="407" fg:w="6"/><text x="3.8208%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (6 samples, 0.05%)</title><rect x="3.5708%" y="821" width="0.0526%" height="15" fill="rgb(239,221,27)" fg:x="407" fg:w="6"/><text x="3.8208%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.05%)</title><rect x="3.5708%" y="805" width="0.0526%" height="15" fill="rgb(222,198,25)" fg:x="407" fg:w="6"/><text x="3.8208%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (6 samples, 0.05%)</title><rect x="3.5708%" y="789" width="0.0526%" height="15" fill="rgb(211,99,13)" fg:x="407" fg:w="6"/><text x="3.8208%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 0.05%)</title><rect x="3.5708%" y="773" width="0.0526%" height="15" fill="rgb(232,111,31)" fg:x="407" fg:w="6"/><text x="3.8208%" y="783.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (5 samples, 0.04%)</title><rect x="3.5796%" y="757" width="0.0439%" height="15" fill="rgb(245,82,37)" fg:x="408" fg:w="5"/><text x="3.8296%" y="767.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (5 samples, 0.04%)</title><rect x="3.5796%" y="741" width="0.0439%" height="15" fill="rgb(227,149,46)" fg:x="408" fg:w="5"/><text x="3.8296%" y="751.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (2 samples, 0.02%)</title><rect x="3.6059%" y="725" width="0.0175%" height="15" fill="rgb(218,36,50)" fg:x="411" fg:w="2"/><text x="3.8559%" y="735.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.02%)</title><rect x="3.6059%" y="709" width="0.0175%" height="15" fill="rgb(226,80,48)" fg:x="411" fg:w="2"/><text x="3.8559%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (18 samples, 0.16%)</title><rect x="3.4918%" y="981" width="0.1579%" height="15" fill="rgb(238,224,15)" fg:x="398" fg:w="18"/><text x="3.7418%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (15 samples, 0.13%)</title><rect x="3.5182%" y="965" width="0.1316%" height="15" fill="rgb(241,136,10)" fg:x="401" fg:w="15"/><text x="3.7682%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (15 samples, 0.13%)</title><rect x="3.5182%" y="949" width="0.1316%" height="15" fill="rgb(208,32,45)" fg:x="401" fg:w="15"/><text x="3.7682%" y="959.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (15 samples, 0.13%)</title><rect x="3.5182%" y="933" width="0.1316%" height="15" fill="rgb(207,135,9)" fg:x="401" fg:w="15"/><text x="3.7682%" y="943.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (3 samples, 0.03%)</title><rect x="3.6234%" y="917" width="0.0263%" height="15" fill="rgb(206,86,44)" fg:x="413" fg:w="3"/><text x="3.8734%" y="927.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (3 samples, 0.03%)</title><rect x="3.6234%" y="901" width="0.0263%" height="15" fill="rgb(245,177,15)" fg:x="413" fg:w="3"/><text x="3.8734%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="3.7550%" y="965" width="0.0175%" height="15" fill="rgb(206,64,50)" fg:x="428" fg:w="2"/><text x="4.0050%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2 samples, 0.02%)</title><rect x="3.7550%" y="949" width="0.0175%" height="15" fill="rgb(234,36,40)" fg:x="428" fg:w="2"/><text x="4.0050%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="3.7550%" y="933" width="0.0175%" height="15" fill="rgb(213,64,8)" fg:x="428" fg:w="2"/><text x="4.0050%" y="943.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.02%)</title><rect x="3.8428%" y="949" width="0.0175%" height="15" fill="rgb(210,75,36)" fg:x="438" fg:w="2"/><text x="4.0928%" y="959.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.02%)</title><rect x="3.8428%" y="933" width="0.0175%" height="15" fill="rgb(229,88,21)" fg:x="438" fg:w="2"/><text x="4.0928%" y="943.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.02%)</title><rect x="3.8428%" y="917" width="0.0175%" height="15" fill="rgb(252,204,47)" fg:x="438" fg:w="2"/><text x="4.0928%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.8691%" y="949" width="0.0175%" height="15" fill="rgb(208,77,27)" fg:x="441" fg:w="2"/><text x="4.1191%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::wake (3 samples, 0.03%)</title><rect x="3.8866%" y="949" width="0.0263%" height="15" fill="rgb(221,76,26)" fg:x="443" fg:w="3"/><text x="4.1366%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;alloc::vec::Vec&lt;core::task::wake::Waker&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="3.8954%" y="933" width="0.0175%" height="15" fill="rgb(225,139,18)" fg:x="444" fg:w="2"/><text x="4.1454%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.02%)</title><rect x="3.8954%" y="917" width="0.0175%" height="15" fill="rgb(230,137,11)" fg:x="444" fg:w="2"/><text x="4.1454%" y="927.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="3.8954%" y="901" width="0.0175%" height="15" fill="rgb(212,28,1)" fg:x="444" fg:w="2"/><text x="4.1454%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="3.8954%" y="885" width="0.0175%" height="15" fill="rgb(248,164,17)" fg:x="444" fg:w="2"/><text x="4.1454%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="3.8954%" y="869" width="0.0175%" height="15" fill="rgb(222,171,42)" fg:x="444" fg:w="2"/><text x="4.1454%" y="879.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="3.8954%" y="853" width="0.0175%" height="15" fill="rgb(243,84,45)" fg:x="444" fg:w="2"/><text x="4.1454%" y="863.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="3.8954%" y="837" width="0.0175%" height="15" fill="rgb(252,49,23)" fg:x="444" fg:w="2"/><text x="4.1454%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.02%)</title><rect x="3.9130%" y="917" width="0.0175%" height="15" fill="rgb(215,19,7)" fg:x="446" fg:w="2"/><text x="4.1630%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (10 samples, 0.09%)</title><rect x="3.9305%" y="917" width="0.0877%" height="15" fill="rgb(238,81,41)" fg:x="448" fg:w="10"/><text x="4.1805%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.09%)</title><rect x="3.9305%" y="901" width="0.0877%" height="15" fill="rgb(210,199,37)" fg:x="448" fg:w="10"/><text x="4.1805%" y="911.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.05%)</title><rect x="4.0182%" y="805" width="0.0526%" height="15" fill="rgb(244,192,49)" fg:x="458" fg:w="6"/><text x="4.2682%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (6 samples, 0.05%)</title><rect x="4.0182%" y="789" width="0.0526%" height="15" fill="rgb(226,211,11)" fg:x="458" fg:w="6"/><text x="4.2682%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.05%)</title><rect x="4.0182%" y="773" width="0.0526%" height="15" fill="rgb(236,162,54)" fg:x="458" fg:w="6"/><text x="4.2682%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::hash (2 samples, 0.02%)</title><rect x="4.0709%" y="789" width="0.0175%" height="15" fill="rgb(220,229,9)" fg:x="464" fg:w="2"/><text x="4.3209%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (9 samples, 0.08%)</title><rect x="4.0182%" y="917" width="0.0790%" height="15" fill="rgb(250,87,22)" fg:x="458" fg:w="9"/><text x="4.2682%" y="927.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (9 samples, 0.08%)</title><rect x="4.0182%" y="901" width="0.0790%" height="15" fill="rgb(239,43,17)" fg:x="458" fg:w="9"/><text x="4.2682%" y="911.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (9 samples, 0.08%)</title><rect x="4.0182%" y="885" width="0.0790%" height="15" fill="rgb(231,177,25)" fg:x="458" fg:w="9"/><text x="4.2682%" y="895.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (9 samples, 0.08%)</title><rect x="4.0182%" y="869" width="0.0790%" height="15" fill="rgb(219,179,1)" fg:x="458" fg:w="9"/><text x="4.2682%" y="879.50"></text></g><g><title>parking_lot_core::parking_lot::park (9 samples, 0.08%)</title><rect x="4.0182%" y="853" width="0.0790%" height="15" fill="rgb(238,219,53)" fg:x="458" fg:w="9"/><text x="4.2682%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (9 samples, 0.08%)</title><rect x="4.0182%" y="837" width="0.0790%" height="15" fill="rgb(232,167,36)" fg:x="458" fg:w="9"/><text x="4.2682%" y="847.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (9 samples, 0.08%)</title><rect x="4.0182%" y="821" width="0.0790%" height="15" fill="rgb(244,19,51)" fg:x="458" fg:w="9"/><text x="4.2682%" y="831.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (3 samples, 0.03%)</title><rect x="4.0709%" y="805" width="0.0263%" height="15" fill="rgb(224,6,22)" fg:x="464" fg:w="3"/><text x="4.3209%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (7 samples, 0.06%)</title><rect x="4.1674%" y="901" width="0.0614%" height="15" fill="rgb(224,145,5)" fg:x="475" fg:w="7"/><text x="4.4174%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.06%)</title><rect x="4.1674%" y="885" width="0.0614%" height="15" fill="rgb(234,130,49)" fg:x="475" fg:w="7"/><text x="4.4174%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (15 samples, 0.13%)</title><rect x="4.2288%" y="901" width="0.1316%" height="15" fill="rgb(254,6,2)" fg:x="482" fg:w="15"/><text x="4.4788%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.13%)</title><rect x="4.2288%" y="885" width="0.1316%" height="15" fill="rgb(208,96,46)" fg:x="482" fg:w="15"/><text x="4.4788%" y="895.50"></text></g><g><title>tokio::runtime::driver::Handle::time (4 samples, 0.04%)</title><rect x="4.4657%" y="709" width="0.0351%" height="15" fill="rgb(239,3,39)" fg:x="509" fg:w="4"/><text x="4.7157%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.04%)</title><rect x="4.4657%" y="693" width="0.0351%" height="15" fill="rgb(233,210,1)" fg:x="509" fg:w="4"/><text x="4.7157%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6 samples, 0.05%)</title><rect x="4.5885%" y="693" width="0.0526%" height="15" fill="rgb(244,137,37)" fg:x="523" fg:w="6"/><text x="4.8385%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.05%)</title><rect x="4.5885%" y="677" width="0.0526%" height="15" fill="rgb(240,136,2)" fg:x="523" fg:w="6"/><text x="4.8385%" y="687.50"></text></g><g><title>core::slice::index::get_noubcheck (6 samples, 0.05%)</title><rect x="4.5885%" y="661" width="0.0526%" height="15" fill="rgb(239,18,37)" fg:x="523" fg:w="6"/><text x="4.8385%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (6 samples, 0.05%)</title><rect x="4.6412%" y="645" width="0.0526%" height="15" fill="rgb(218,185,22)" fg:x="529" fg:w="6"/><text x="4.8912%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (6 samples, 0.05%)</title><rect x="4.6412%" y="629" width="0.0526%" height="15" fill="rgb(225,218,4)" fg:x="529" fg:w="6"/><text x="4.8912%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (164 samples, 1.44%)</title><rect x="4.4657%" y="741" width="1.4388%" height="15" fill="rgb(230,182,32)" fg:x="509" fg:w="164"/><text x="4.7157%" y="751.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (164 samples, 1.44%)</title><rect x="4.4657%" y="725" width="1.4388%" height="15" fill="rgb(242,56,43)" fg:x="509" fg:w="164"/><text x="4.7157%" y="735.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (160 samples, 1.40%)</title><rect x="4.5008%" y="709" width="1.4038%" height="15" fill="rgb(233,99,24)" fg:x="513" fg:w="160"/><text x="4.7508%" y="719.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (144 samples, 1.26%)</title><rect x="4.6412%" y="693" width="1.2634%" height="15" fill="rgb(234,209,42)" fg:x="529" fg:w="144"/><text x="4.8912%" y="703.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (144 samples, 1.26%)</title><rect x="4.6412%" y="677" width="1.2634%" height="15" fill="rgb(227,7,12)" fg:x="529" fg:w="144"/><text x="4.8912%" y="687.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (144 samples, 1.26%)</title><rect x="4.6412%" y="661" width="1.2634%" height="15" fill="rgb(245,203,43)" fg:x="529" fg:w="144"/><text x="4.8912%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (138 samples, 1.21%)</title><rect x="4.6938%" y="645" width="1.2107%" height="15" fill="rgb(238,205,33)" fg:x="535" fg:w="138"/><text x="4.9438%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (138 samples, 1.21%)</title><rect x="4.6938%" y="629" width="1.2107%" height="15" fill="rgb(231,56,7)" fg:x="535" fg:w="138"/><text x="4.9438%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (165 samples, 1.45%)</title><rect x="4.4657%" y="821" width="1.4476%" height="15" fill="rgb(244,186,29)" fg:x="509" fg:w="165"/><text x="4.7157%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (165 samples, 1.45%)</title><rect x="4.4657%" y="805" width="1.4476%" height="15" fill="rgb(234,111,31)" fg:x="509" fg:w="165"/><text x="4.7157%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (165 samples, 1.45%)</title><rect x="4.4657%" y="789" width="1.4476%" height="15" fill="rgb(241,149,10)" fg:x="509" fg:w="165"/><text x="4.7157%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (165 samples, 1.45%)</title><rect x="4.4657%" y="773" width="1.4476%" height="15" fill="rgb(249,206,44)" fg:x="509" fg:w="165"/><text x="4.7157%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (165 samples, 1.45%)</title><rect x="4.4657%" y="757" width="1.4476%" height="15" fill="rgb(251,153,30)" fg:x="509" fg:w="165"/><text x="4.7157%" y="767.50"></text></g><g><title>__rdl_alloc (17 samples, 0.15%)</title><rect x="5.9309%" y="709" width="0.1491%" height="15" fill="rgb(239,152,38)" fg:x="676" fg:w="17"/><text x="6.1809%" y="719.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.15%)</title><rect x="5.9309%" y="693" width="0.1491%" height="15" fill="rgb(249,139,47)" fg:x="676" fg:w="17"/><text x="6.1809%" y="703.50"></text></g><g><title>malloc (17 samples, 0.15%)</title><rect x="5.9309%" y="677" width="0.1491%" height="15" fill="rgb(244,64,35)" fg:x="676" fg:w="17"/><text x="6.1809%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (185 samples, 1.62%)</title><rect x="4.4657%" y="885" width="1.6231%" height="15" fill="rgb(216,46,15)" fg:x="509" fg:w="185"/><text x="4.7157%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (185 samples, 1.62%)</title><rect x="4.4657%" y="869" width="1.6231%" height="15" fill="rgb(250,74,19)" fg:x="509" fg:w="185"/><text x="4.7157%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (185 samples, 1.62%)</title><rect x="4.4657%" y="853" width="1.6231%" height="15" fill="rgb(249,42,33)" fg:x="509" fg:w="185"/><text x="4.7157%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (185 samples, 1.62%)</title><rect x="4.4657%" y="837" width="1.6231%" height="15" fill="rgb(242,149,17)" fg:x="509" fg:w="185"/><text x="4.7157%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.18%)</title><rect x="5.9133%" y="821" width="0.1755%" height="15" fill="rgb(244,29,21)" fg:x="674" fg:w="20"/><text x="6.1633%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.18%)</title><rect x="5.9133%" y="805" width="0.1755%" height="15" fill="rgb(220,130,37)" fg:x="674" fg:w="20"/><text x="6.1633%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.18%)</title><rect x="5.9133%" y="789" width="0.1755%" height="15" fill="rgb(211,67,2)" fg:x="674" fg:w="20"/><text x="6.1633%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (20 samples, 0.18%)</title><rect x="5.9133%" y="773" width="0.1755%" height="15" fill="rgb(235,68,52)" fg:x="674" fg:w="20"/><text x="6.1633%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.16%)</title><rect x="5.9309%" y="757" width="0.1579%" height="15" fill="rgb(246,142,3)" fg:x="676" fg:w="18"/><text x="6.1809%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.16%)</title><rect x="5.9309%" y="741" width="0.1579%" height="15" fill="rgb(241,25,7)" fg:x="676" fg:w="18"/><text x="6.1809%" y="751.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.16%)</title><rect x="5.9309%" y="725" width="0.1579%" height="15" fill="rgb(242,119,39)" fg:x="676" fg:w="18"/><text x="6.1809%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="6.7819%" y="741" width="0.0614%" height="15" fill="rgb(241,98,45)" fg:x="773" fg:w="7"/><text x="7.0319%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="6.7819%" y="725" width="0.0614%" height="15" fill="rgb(254,28,30)" fg:x="773" fg:w="7"/><text x="7.0319%" y="735.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (28 samples, 0.25%)</title><rect x="6.8433%" y="741" width="0.2457%" height="15" fill="rgb(241,142,54)" fg:x="780" fg:w="28"/><text x="7.0933%" y="751.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (28 samples, 0.25%)</title><rect x="6.8433%" y="725" width="0.2457%" height="15" fill="rgb(222,85,15)" fg:x="780" fg:w="28"/><text x="7.0933%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (122 samples, 1.07%)</title><rect x="6.0888%" y="885" width="1.0704%" height="15" fill="rgb(210,85,47)" fg:x="694" fg:w="122"/><text x="6.3388%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (122 samples, 1.07%)</title><rect x="6.0888%" y="869" width="1.0704%" height="15" fill="rgb(224,206,25)" fg:x="694" fg:w="122"/><text x="6.3388%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (122 samples, 1.07%)</title><rect x="6.0888%" y="853" width="1.0704%" height="15" fill="rgb(243,201,19)" fg:x="694" fg:w="122"/><text x="6.3388%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 1.07%)</title><rect x="6.0888%" y="837" width="1.0704%" height="15" fill="rgb(236,59,4)" fg:x="694" fg:w="122"/><text x="6.3388%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (122 samples, 1.07%)</title><rect x="6.0888%" y="821" width="1.0704%" height="15" fill="rgb(254,179,45)" fg:x="694" fg:w="122"/><text x="6.3388%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (114 samples, 1.00%)</title><rect x="6.1590%" y="805" width="1.0002%" height="15" fill="rgb(226,14,10)" fg:x="702" fg:w="114"/><text x="6.4090%" y="815.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (114 samples, 1.00%)</title><rect x="6.1590%" y="789" width="1.0002%" height="15" fill="rgb(244,27,41)" fg:x="702" fg:w="114"/><text x="6.4090%" y="799.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (114 samples, 1.00%)</title><rect x="6.1590%" y="773" width="1.0002%" height="15" fill="rgb(235,35,32)" fg:x="702" fg:w="114"/><text x="6.4090%" y="783.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (114 samples, 1.00%)</title><rect x="6.1590%" y="757" width="1.0002%" height="15" fill="rgb(218,68,31)" fg:x="702" fg:w="114"/><text x="6.4090%" y="767.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (8 samples, 0.07%)</title><rect x="7.0890%" y="741" width="0.0702%" height="15" fill="rgb(207,120,37)" fg:x="808" fg:w="8"/><text x="7.3390%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (8 samples, 0.07%)</title><rect x="7.0890%" y="725" width="0.0702%" height="15" fill="rgb(227,98,0)" fg:x="808" fg:w="8"/><text x="7.3390%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (9 samples, 0.08%)</title><rect x="7.1767%" y="757" width="0.0790%" height="15" fill="rgb(207,7,3)" fg:x="818" fg:w="9"/><text x="7.4267%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 1.09%)</title><rect x="7.1592%" y="853" width="1.0879%" height="15" fill="rgb(206,98,19)" fg:x="816" fg:w="124"/><text x="7.4092%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;]&gt; (124 samples, 1.09%)</title><rect x="7.1592%" y="837" width="1.0879%" height="15" fill="rgb(217,5,26)" fg:x="816" fg:w="124"/><text x="7.4092%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (122 samples, 1.07%)</title><rect x="7.1767%" y="821" width="1.0704%" height="15" fill="rgb(235,190,38)" fg:x="818" fg:w="122"/><text x="7.4267%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (122 samples, 1.07%)</title><rect x="7.1767%" y="805" width="1.0704%" height="15" fill="rgb(247,86,24)" fg:x="818" fg:w="122"/><text x="7.4267%" y="815.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 1.07%)</title><rect x="7.1767%" y="789" width="1.0704%" height="15" fill="rgb(205,101,16)" fg:x="818" fg:w="122"/><text x="7.4267%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (122 samples, 1.07%)</title><rect x="7.1767%" y="773" width="1.0704%" height="15" fill="rgb(246,168,33)" fg:x="818" fg:w="122"/><text x="7.4267%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (113 samples, 0.99%)</title><rect x="7.2557%" y="757" width="0.9914%" height="15" fill="rgb(231,114,1)" fg:x="827" fg:w="113"/><text x="7.5057%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (113 samples, 0.99%)</title><rect x="7.2557%" y="741" width="0.9914%" height="15" fill="rgb(207,184,53)" fg:x="827" fg:w="113"/><text x="7.5057%" y="751.50"></text></g><g><title>core::mem::drop (138 samples, 1.21%)</title><rect x="7.1592%" y="885" width="1.2107%" height="15" fill="rgb(224,95,51)" fg:x="816" fg:w="138"/><text x="7.4092%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (138 samples, 1.21%)</title><rect x="7.1592%" y="869" width="1.2107%" height="15" fill="rgb(212,188,45)" fg:x="816" fg:w="138"/><text x="7.4092%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt;&gt; (14 samples, 0.12%)</title><rect x="8.2471%" y="853" width="0.1228%" height="15" fill="rgb(223,154,38)" fg:x="940" fg:w="14"/><text x="8.4971%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.12%)</title><rect x="8.2471%" y="837" width="0.1228%" height="15" fill="rgb(251,22,52)" fg:x="940" fg:w="14"/><text x="8.4971%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.12%)</title><rect x="8.2471%" y="821" width="0.1228%" height="15" fill="rgb(229,209,22)" fg:x="940" fg:w="14"/><text x="8.4971%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.12%)</title><rect x="8.2471%" y="805" width="0.1228%" height="15" fill="rgb(234,138,34)" fg:x="940" fg:w="14"/><text x="8.4971%" y="815.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.12%)</title><rect x="8.2471%" y="789" width="0.1228%" height="15" fill="rgb(212,95,11)" fg:x="940" fg:w="14"/><text x="8.4971%" y="799.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.12%)</title><rect x="8.2471%" y="773" width="0.1228%" height="15" fill="rgb(240,179,47)" fg:x="940" fg:w="14"/><text x="8.4971%" y="783.50"></text></g><g><title>cfree (14 samples, 0.12%)</title><rect x="8.2471%" y="757" width="0.1228%" height="15" fill="rgb(240,163,11)" fg:x="940" fg:w="14"/><text x="8.4971%" y="767.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="8.3260%" y="741" width="0.0439%" height="15" fill="rgb(236,37,12)" fg:x="949" fg:w="5"/><text x="8.5760%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="8.3962%" y="853" width="0.0263%" height="15" fill="rgb(232,164,16)" fg:x="957" fg:w="3"/><text x="8.6462%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="8.3962%" y="837" width="0.0263%" height="15" fill="rgb(244,205,15)" fg:x="957" fg:w="3"/><text x="8.6462%" y="847.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="8.3962%" y="821" width="0.0263%" height="15" fill="rgb(223,117,47)" fg:x="957" fg:w="3"/><text x="8.6462%" y="831.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.03%)</title><rect x="8.3962%" y="805" width="0.0263%" height="15" fill="rgb(244,107,35)" fg:x="957" fg:w="3"/><text x="8.6462%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.02%)</title><rect x="8.4050%" y="789" width="0.0175%" height="15" fill="rgb(205,140,8)" fg:x="958" fg:w="2"/><text x="8.6550%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="8.4050%" y="773" width="0.0175%" height="15" fill="rgb(228,84,46)" fg:x="958" fg:w="2"/><text x="8.6550%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="8.4225%" y="853" width="0.0702%" height="15" fill="rgb(254,188,9)" fg:x="960" fg:w="8"/><text x="8.6725%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="8.4225%" y="837" width="0.0702%" height="15" fill="rgb(206,112,54)" fg:x="960" fg:w="8"/><text x="8.6725%" y="847.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="8.4225%" y="821" width="0.0702%" height="15" fill="rgb(216,84,49)" fg:x="960" fg:w="8"/><text x="8.6725%" y="831.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.07%)</title><rect x="8.4225%" y="805" width="0.0702%" height="15" fill="rgb(214,194,35)" fg:x="960" fg:w="8"/><text x="8.6725%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (8 samples, 0.07%)</title><rect x="8.4225%" y="789" width="0.0702%" height="15" fill="rgb(249,28,3)" fg:x="960" fg:w="8"/><text x="8.6725%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.07%)</title><rect x="8.4225%" y="773" width="0.0702%" height="15" fill="rgb(222,56,52)" fg:x="960" fg:w="8"/><text x="8.6725%" y="783.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.04%)</title><rect x="8.4927%" y="853" width="0.0351%" height="15" fill="rgb(245,217,50)" fg:x="968" fg:w="4"/><text x="8.7427%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.04%)</title><rect x="8.4927%" y="837" width="0.0351%" height="15" fill="rgb(213,201,24)" fg:x="968" fg:w="4"/><text x="8.7427%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.04%)</title><rect x="8.4927%" y="821" width="0.0351%" height="15" fill="rgb(248,116,28)" fg:x="968" fg:w="4"/><text x="8.7427%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (4 samples, 0.04%)</title><rect x="8.4927%" y="805" width="0.0351%" height="15" fill="rgb(219,72,43)" fg:x="968" fg:w="4"/><text x="8.7427%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.04%)</title><rect x="8.4927%" y="789" width="0.0351%" height="15" fill="rgb(209,138,14)" fg:x="968" fg:w="4"/><text x="8.7427%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (11 samples, 0.10%)</title><rect x="8.5454%" y="805" width="0.0965%" height="15" fill="rgb(222,18,33)" fg:x="974" fg:w="11"/><text x="8.7954%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.10%)</title><rect x="8.5454%" y="789" width="0.0965%" height="15" fill="rgb(213,199,7)" fg:x="974" fg:w="11"/><text x="8.7954%" y="799.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (33 samples, 0.29%)</title><rect x="8.3699%" y="885" width="0.2895%" height="15" fill="rgb(250,110,10)" fg:x="954" fg:w="33"/><text x="8.6199%" y="895.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (33 samples, 0.29%)</title><rect x="8.3699%" y="869" width="0.2895%" height="15" fill="rgb(248,123,6)" fg:x="954" fg:w="33"/><text x="8.6199%" y="879.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (15 samples, 0.13%)</title><rect x="8.5278%" y="853" width="0.1316%" height="15" fill="rgb(206,91,31)" fg:x="972" fg:w="15"/><text x="8.7778%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (15 samples, 0.13%)</title><rect x="8.5278%" y="837" width="0.1316%" height="15" fill="rgb(211,154,13)" fg:x="972" fg:w="15"/><text x="8.7778%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (15 samples, 0.13%)</title><rect x="8.5278%" y="821" width="0.1316%" height="15" fill="rgb(225,148,7)" fg:x="972" fg:w="15"/><text x="8.7778%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (2 samples, 0.02%)</title><rect x="8.6419%" y="805" width="0.0175%" height="15" fill="rgb(220,160,43)" fg:x="985" fg:w="2"/><text x="8.8919%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="8.6419%" y="789" width="0.0175%" height="15" fill="rgb(213,52,39)" fg:x="985" fg:w="2"/><text x="8.8919%" y="799.50"></text></g><g><title>tokio::runtime::driver::IoStack::park (2 samples, 0.02%)</title><rect x="8.6682%" y="885" width="0.0175%" height="15" fill="rgb(243,137,7)" fg:x="988" fg:w="2"/><text x="8.9182%" y="895.50"></text></g><g><title>mio::event::event::Event::token (2 samples, 0.02%)</title><rect x="8.7208%" y="869" width="0.0175%" height="15" fill="rgb(230,79,13)" fg:x="994" fg:w="2"/><text x="8.9708%" y="879.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::token (2 samples, 0.02%)</title><rect x="8.7208%" y="853" width="0.0175%" height="15" fill="rgb(247,105,23)" fg:x="994" fg:w="2"/><text x="8.9708%" y="863.50"></text></g><g><title>[libc.so.6] (37 samples, 0.32%)</title><rect x="9.2034%" y="821" width="0.3246%" height="15" fill="rgb(223,179,41)" fg:x="1049" fg:w="37"/><text x="9.4534%" y="831.50"></text></g><g><title>mio::poll::Poll::poll (96 samples, 0.84%)</title><rect x="8.7384%" y="869" width="0.8423%" height="15" fill="rgb(218,9,34)" fg:x="996" fg:w="96"/><text x="8.9884%" y="879.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (96 samples, 0.84%)</title><rect x="8.7384%" y="853" width="0.8423%" height="15" fill="rgb(222,106,8)" fg:x="996" fg:w="96"/><text x="8.9884%" y="863.50"></text></g><g><title>epoll_wait (67 samples, 0.59%)</title><rect x="8.9928%" y="837" width="0.5878%" height="15" fill="rgb(211,220,0)" fg:x="1025" fg:w="67"/><text x="9.2428%" y="847.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="9.5280%" y="821" width="0.0526%" height="15" fill="rgb(229,52,16)" fg:x="1086" fg:w="6"/><text x="9.7780%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (61 samples, 0.54%)</title><rect x="9.5982%" y="853" width="0.5352%" height="15" fill="rgb(212,155,18)" fg:x="1094" fg:w="61"/><text x="9.8482%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.54%)</title><rect x="9.5982%" y="837" width="0.5352%" height="15" fill="rgb(242,21,14)" fg:x="1094" fg:w="61"/><text x="9.8482%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (42 samples, 0.37%)</title><rect x="10.1334%" y="853" width="0.3685%" height="15" fill="rgb(222,19,48)" fg:x="1155" fg:w="42"/><text x="10.3834%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.37%)</title><rect x="10.1334%" y="837" width="0.3685%" height="15" fill="rgb(232,45,27)" fg:x="1155" fg:w="42"/><text x="10.3834%" y="847.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (105 samples, 0.92%)</title><rect x="9.5982%" y="869" width="0.9212%" height="15" fill="rgb(249,103,42)" fg:x="1094" fg:w="105"/><text x="9.8482%" y="879.50"></text></g><g><title>core::mem::drop (52 samples, 0.46%)</title><rect x="10.5457%" y="853" width="0.4562%" height="15" fill="rgb(246,81,33)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (52 samples, 0.46%)</title><rect x="10.5457%" y="837" width="0.4562%" height="15" fill="rgb(252,33,42)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (52 samples, 0.46%)</title><rect x="10.5457%" y="821" width="0.4562%" height="15" fill="rgb(209,212,41)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="831.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.46%)</title><rect x="10.5457%" y="805" width="0.4562%" height="15" fill="rgb(207,154,6)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (52 samples, 0.46%)</title><rect x="10.5457%" y="789" width="0.4562%" height="15" fill="rgb(223,64,47)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (52 samples, 0.46%)</title><rect x="10.5457%" y="773" width="0.4562%" height="15" fill="rgb(211,161,38)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.46%)</title><rect x="10.5457%" y="757" width="0.4562%" height="15" fill="rgb(219,138,40)" fg:x="1202" fg:w="52"/><text x="10.7957%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.03%)</title><rect x="11.0019%" y="853" width="0.0263%" height="15" fill="rgb(241,228,46)" fg:x="1254" fg:w="3"/><text x="11.2519%" y="863.50"></text></g><g><title>core::mem::replace (3 samples, 0.03%)</title><rect x="11.0019%" y="837" width="0.0263%" height="15" fill="rgb(223,209,38)" fg:x="1254" fg:w="3"/><text x="11.2519%" y="847.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="11.0019%" y="821" width="0.0263%" height="15" fill="rgb(236,164,45)" fg:x="1254" fg:w="3"/><text x="11.2519%" y="831.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (10 samples, 0.09%)</title><rect x="11.0283%" y="853" width="0.0877%" height="15" fill="rgb(231,15,5)" fg:x="1257" fg:w="10"/><text x="11.2783%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.09%)</title><rect x="11.0283%" y="837" width="0.0877%" height="15" fill="rgb(252,35,15)" fg:x="1257" fg:w="10"/><text x="11.2783%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (10 samples, 0.09%)</title><rect x="11.0283%" y="821" width="0.0877%" height="15" fill="rgb(248,181,18)" fg:x="1257" fg:w="10"/><text x="11.2783%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (9 samples, 0.08%)</title><rect x="11.0370%" y="805" width="0.0790%" height="15" fill="rgb(233,39,42)" fg:x="1258" fg:w="9"/><text x="11.2870%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9 samples, 0.08%)</title><rect x="11.0370%" y="789" width="0.0790%" height="15" fill="rgb(238,110,33)" fg:x="1258" fg:w="9"/><text x="11.2870%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (3 samples, 0.03%)</title><rect x="11.1248%" y="789" width="0.0263%" height="15" fill="rgb(233,195,10)" fg:x="1268" fg:w="3"/><text x="11.3748%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (3 samples, 0.03%)</title><rect x="11.1248%" y="773" width="0.0263%" height="15" fill="rgb(254,105,3)" fg:x="1268" fg:w="3"/><text x="11.3748%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="11.1335%" y="757" width="0.0175%" height="15" fill="rgb(221,225,9)" fg:x="1269" fg:w="2"/><text x="11.3835%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="11.1335%" y="741" width="0.0175%" height="15" fill="rgb(224,227,45)" fg:x="1269" fg:w="2"/><text x="11.3835%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5 samples, 0.04%)</title><rect x="11.1599%" y="773" width="0.0439%" height="15" fill="rgb(229,198,43)" fg:x="1272" fg:w="5"/><text x="11.4099%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (5 samples, 0.04%)</title><rect x="11.1599%" y="757" width="0.0439%" height="15" fill="rgb(206,209,35)" fg:x="1272" fg:w="5"/><text x="11.4099%" y="767.50"></text></g><g><title>tokio::runtime::context::with_scheduler (5 samples, 0.04%)</title><rect x="11.1599%" y="741" width="0.0439%" height="15" fill="rgb(245,195,53)" fg:x="1272" fg:w="5"/><text x="11.4099%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (5 samples, 0.04%)</title><rect x="11.1599%" y="725" width="0.0439%" height="15" fill="rgb(240,92,26)" fg:x="1272" fg:w="5"/><text x="11.4099%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (4 samples, 0.04%)</title><rect x="11.1686%" y="709" width="0.0351%" height="15" fill="rgb(207,40,23)" fg:x="1273" fg:w="4"/><text x="11.4186%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (7 samples, 0.06%)</title><rect x="11.1511%" y="789" width="0.0614%" height="15" fill="rgb(223,111,35)" fg:x="1271" fg:w="7"/><text x="11.4011%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.04%)</title><rect x="11.2125%" y="757" width="0.0351%" height="15" fill="rgb(229,147,28)" fg:x="1278" fg:w="4"/><text x="11.4625%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.04%)</title><rect x="11.2125%" y="741" width="0.0351%" height="15" fill="rgb(211,29,28)" fg:x="1278" fg:w="4"/><text x="11.4625%" y="751.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (295 samples, 2.59%)</title><rect x="8.6857%" y="885" width="2.5882%" height="15" fill="rgb(228,72,33)" fg:x="990" fg:w="295"/><text x="8.9357%" y="895.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (86 samples, 0.75%)</title><rect x="10.5194%" y="869" width="0.7545%" height="15" fill="rgb(205,214,31)" fg:x="1199" fg:w="86"/><text x="10.7694%" y="879.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (17 samples, 0.15%)</title><rect x="11.1248%" y="853" width="0.1491%" height="15" fill="rgb(224,111,15)" fg:x="1268" fg:w="17"/><text x="11.3748%" y="863.50"></text></g><g><title>core::task::wake::Waker::wake (17 samples, 0.15%)</title><rect x="11.1248%" y="837" width="0.1491%" height="15" fill="rgb(253,21,26)" fg:x="1268" fg:w="17"/><text x="11.3748%" y="847.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (17 samples, 0.15%)</title><rect x="11.1248%" y="821" width="0.1491%" height="15" fill="rgb(245,139,43)" fg:x="1268" fg:w="17"/><text x="11.3748%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (17 samples, 0.15%)</title><rect x="11.1248%" y="805" width="0.1491%" height="15" fill="rgb(252,170,7)" fg:x="1268" fg:w="17"/><text x="11.3748%" y="815.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (7 samples, 0.06%)</title><rect x="11.2125%" y="789" width="0.0614%" height="15" fill="rgb(231,118,14)" fg:x="1278" fg:w="7"/><text x="11.4625%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (7 samples, 0.06%)</title><rect x="11.2125%" y="773" width="0.0614%" height="15" fill="rgb(238,83,0)" fg:x="1278" fg:w="7"/><text x="11.4625%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::_{{closure}} (2 samples, 0.02%)</title><rect x="11.2564%" y="757" width="0.0175%" height="15" fill="rgb(221,39,39)" fg:x="1283" fg:w="2"/><text x="11.5064%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.03%)</title><rect x="11.3002%" y="821" width="0.0263%" height="15" fill="rgb(222,119,46)" fg:x="1288" fg:w="3"/><text x="11.5502%" y="831.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (3 samples, 0.03%)</title><rect x="11.3002%" y="805" width="0.0263%" height="15" fill="rgb(222,165,49)" fg:x="1288" fg:w="3"/><text x="11.5502%" y="815.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (3 samples, 0.03%)</title><rect x="11.3002%" y="789" width="0.0263%" height="15" fill="rgb(219,113,52)" fg:x="1288" fg:w="3"/><text x="11.5502%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="11.3090%" y="773" width="0.0175%" height="15" fill="rgb(214,7,15)" fg:x="1289" fg:w="2"/><text x="11.5590%" y="783.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (5 samples, 0.04%)</title><rect x="11.3002%" y="869" width="0.0439%" height="15" fill="rgb(235,32,4)" fg:x="1288" fg:w="5"/><text x="11.5502%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.04%)</title><rect x="11.3002%" y="853" width="0.0439%" height="15" fill="rgb(238,90,54)" fg:x="1288" fg:w="5"/><text x="11.5502%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.04%)</title><rect x="11.3002%" y="837" width="0.0439%" height="15" fill="rgb(213,208,19)" fg:x="1288" fg:w="5"/><text x="11.5502%" y="847.50"></text></g><g><title>tokio::runtime::context::thread_rng_n::_{{closure}} (2 samples, 0.02%)</title><rect x="11.3265%" y="821" width="0.0175%" height="15" fill="rgb(233,156,4)" fg:x="1291" fg:w="2"/><text x="11.5765%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (3 samples, 0.03%)</title><rect x="11.6775%" y="613" width="0.0263%" height="15" fill="rgb(207,194,5)" fg:x="1331" fg:w="3"/><text x="11.9275%" y="623.50"></text></g><g><title>core::mem::drop (61 samples, 0.54%)</title><rect x="11.6775%" y="693" width="0.5352%" height="15" fill="rgb(206,111,30)" fg:x="1331" fg:w="61"/><text x="11.9275%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::wheel::Wheel&gt;&gt; (61 samples, 0.54%)</title><rect x="11.6775%" y="677" width="0.5352%" height="15" fill="rgb(243,70,54)" fg:x="1331" fg:w="61"/><text x="11.9275%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::wheel::Wheel&gt;&gt; (61 samples, 0.54%)</title><rect x="11.6775%" y="661" width="0.5352%" height="15" fill="rgb(242,28,8)" fg:x="1331" fg:w="61"/><text x="11.9275%" y="671.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.54%)</title><rect x="11.6775%" y="645" width="0.5352%" height="15" fill="rgb(219,106,18)" fg:x="1331" fg:w="61"/><text x="11.9275%" y="655.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (61 samples, 0.54%)</title><rect x="11.6775%" y="629" width="0.5352%" height="15" fill="rgb(244,222,10)" fg:x="1331" fg:w="61"/><text x="11.9275%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (58 samples, 0.51%)</title><rect x="11.7038%" y="613" width="0.5089%" height="15" fill="rgb(236,179,52)" fg:x="1334" fg:w="58"/><text x="11.9538%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.51%)</title><rect x="11.7038%" y="597" width="0.5089%" height="15" fill="rgb(213,23,39)" fg:x="1334" fg:w="58"/><text x="11.9538%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5 samples, 0.04%)</title><rect x="12.3530%" y="677" width="0.0439%" height="15" fill="rgb(238,48,10)" fg:x="1408" fg:w="5"/><text x="12.6030%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.04%)</title><rect x="12.3530%" y="661" width="0.0439%" height="15" fill="rgb(251,196,23)" fg:x="1408" fg:w="5"/><text x="12.6030%" y="671.50"></text></g><g><title>core::slice::index::get_noubcheck (5 samples, 0.04%)</title><rect x="12.3530%" y="645" width="0.0439%" height="15" fill="rgb(250,152,24)" fg:x="1408" fg:w="5"/><text x="12.6030%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (5 samples, 0.04%)</title><rect x="12.3969%" y="629" width="0.0439%" height="15" fill="rgb(209,150,17)" fg:x="1413" fg:w="5"/><text x="12.6469%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (5 samples, 0.04%)</title><rect x="12.3969%" y="613" width="0.0439%" height="15" fill="rgb(234,202,34)" fg:x="1413" fg:w="5"/><text x="12.6469%" y="623.50"></text></g><g><title>tokio::runtime::time::Inner::lock_sharded_wheel (133 samples, 1.17%)</title><rect x="12.2127%" y="693" width="1.1669%" height="15" fill="rgb(253,148,53)" fg:x="1392" fg:w="133"/><text x="12.4627%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (112 samples, 0.98%)</title><rect x="12.3969%" y="677" width="0.9826%" height="15" fill="rgb(218,129,16)" fg:x="1413" fg:w="112"/><text x="12.6469%" y="687.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (112 samples, 0.98%)</title><rect x="12.3969%" y="661" width="0.9826%" height="15" fill="rgb(216,85,19)" fg:x="1413" fg:w="112"/><text x="12.6469%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (112 samples, 0.98%)</title><rect x="12.3969%" y="645" width="0.9826%" height="15" fill="rgb(235,228,7)" fg:x="1413" fg:w="112"/><text x="12.6469%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (107 samples, 0.94%)</title><rect x="12.4408%" y="629" width="0.9388%" height="15" fill="rgb(245,175,0)" fg:x="1418" fg:w="107"/><text x="12.6908%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (107 samples, 0.94%)</title><rect x="12.4408%" y="613" width="0.9388%" height="15" fill="rgb(208,168,36)" fg:x="1418" fg:w="107"/><text x="12.6908%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="13.9323%" y="661" width="0.0439%" height="15" fill="rgb(246,171,24)" fg:x="1588" fg:w="5"/><text x="14.1823%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="13.9323%" y="645" width="0.0439%" height="15" fill="rgb(215,142,24)" fg:x="1588" fg:w="5"/><text x="14.1823%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (43 samples, 0.38%)</title><rect x="13.9761%" y="661" width="0.3773%" height="15" fill="rgb(250,187,7)" fg:x="1593" fg:w="43"/><text x="14.2261%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (43 samples, 0.38%)</title><rect x="13.9761%" y="645" width="0.3773%" height="15" fill="rgb(228,66,33)" fg:x="1593" fg:w="43"/><text x="14.2261%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (114 samples, 1.00%)</title><rect x="13.3883%" y="677" width="1.0002%" height="15" fill="rgb(234,215,21)" fg:x="1526" fg:w="114"/><text x="13.6383%" y="687.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (4 samples, 0.04%)</title><rect x="14.3534%" y="661" width="0.0351%" height="15" fill="rgb(222,191,20)" fg:x="1636" fg:w="4"/><text x="14.6034%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.04%)</title><rect x="14.3534%" y="645" width="0.0351%" height="15" fill="rgb(245,79,54)" fg:x="1636" fg:w="4"/><text x="14.6034%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::set_elapsed (18 samples, 0.16%)</title><rect x="14.3885%" y="677" width="0.1579%" height="15" fill="rgb(240,10,37)" fg:x="1640" fg:w="18"/><text x="14.6385%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (141 samples, 1.24%)</title><rect x="13.3883%" y="693" width="1.2371%" height="15" fill="rgb(214,192,32)" fg:x="1526" fg:w="141"/><text x="13.6383%" y="703.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (9 samples, 0.08%)</title><rect x="14.5464%" y="677" width="0.0790%" height="15" fill="rgb(209,36,54)" fg:x="1658" fg:w="9"/><text x="14.7964%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (20 samples, 0.18%)</title><rect x="14.9412%" y="661" width="0.1755%" height="15" fill="rgb(220,10,11)" fg:x="1703" fg:w="20"/><text x="15.1912%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (20 samples, 0.18%)</title><rect x="14.9412%" y="645" width="0.1755%" height="15" fill="rgb(221,106,17)" fg:x="1703" fg:w="20"/><text x="15.1912%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (74 samples, 0.65%)</title><rect x="14.6254%" y="693" width="0.6492%" height="15" fill="rgb(251,142,44)" fg:x="1667" fg:w="74"/><text x="14.8754%" y="703.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (74 samples, 0.65%)</title><rect x="14.6254%" y="677" width="0.6492%" height="15" fill="rgb(238,13,15)" fg:x="1667" fg:w="74"/><text x="14.8754%" y="687.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (18 samples, 0.16%)</title><rect x="15.1167%" y="661" width="0.1579%" height="15" fill="rgb(208,107,27)" fg:x="1723" fg:w="18"/><text x="15.3667%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (18 samples, 0.16%)</title><rect x="15.1167%" y="645" width="0.1579%" height="15" fill="rgb(205,136,37)" fg:x="1723" fg:w="18"/><text x="15.3667%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (449 samples, 3.94%)</title><rect x="11.3529%" y="853" width="3.9393%" height="15" fill="rgb(250,205,27)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="863.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (449 samples, 3.94%)</title><rect x="11.3529%" y="837" width="3.9393%" height="15" fill="rgb(210,80,43)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="847.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (449 samples, 3.94%)</title><rect x="11.3529%" y="821" width="3.9393%" height="15" fill="rgb(247,160,36)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="831.50">core..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (449 samples, 3.94%)</title><rect x="11.3529%" y="805" width="3.9393%" height="15" fill="rgb(234,13,49)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="815.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (449 samples, 3.94%)</title><rect x="11.3529%" y="789" width="3.9393%" height="15" fill="rgb(234,122,0)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="799.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (449 samples, 3.94%)</title><rect x="11.3529%" y="773" width="3.9393%" height="15" fill="rgb(207,146,38)" fg:x="1294" fg:w="449"/><text x="11.6029%" y="783.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (446 samples, 3.91%)</title><rect x="11.3792%" y="757" width="3.9130%" height="15" fill="rgb(207,177,25)" fg:x="1297" fg:w="446"/><text x="11.6292%" y="767.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (446 samples, 3.91%)</title><rect x="11.3792%" y="741" width="3.9130%" height="15" fill="rgb(211,178,42)" fg:x="1297" fg:w="446"/><text x="11.6292%" y="751.50">core..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (437 samples, 3.83%)</title><rect x="11.4582%" y="725" width="3.8340%" height="15" fill="rgb(230,69,54)" fg:x="1306" fg:w="437"/><text x="11.7082%" y="735.50">toki..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (432 samples, 3.79%)</title><rect x="11.5020%" y="709" width="3.7901%" height="15" fill="rgb(214,135,41)" fg:x="1311" fg:w="432"/><text x="11.7520%" y="719.50">toki..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (2 samples, 0.02%)</title><rect x="15.2746%" y="693" width="0.0175%" height="15" fill="rgb(237,67,25)" fg:x="1741" fg:w="2"/><text x="15.5246%" y="703.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (452 samples, 3.97%)</title><rect x="11.3441%" y="869" width="3.9656%" height="15" fill="rgb(222,189,50)" fg:x="1293" fg:w="452"/><text x="11.5941%" y="879.50">toki..</text></g><g><title>core::time::Duration::as_millis (3 samples, 0.03%)</title><rect x="15.3185%" y="837" width="0.0263%" height="15" fill="rgb(245,148,34)" fg:x="1746" fg:w="3"/><text x="15.5685%" y="847.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (12 samples, 0.11%)</title><rect x="15.3097%" y="853" width="0.1053%" height="15" fill="rgb(222,29,6)" fg:x="1745" fg:w="12"/><text x="15.5597%" y="863.50"></text></g><g><title>tokio::time::instant::Instant::saturating_duration_since (8 samples, 0.07%)</title><rect x="15.3448%" y="837" width="0.0702%" height="15" fill="rgb(221,189,43)" fg:x="1749" fg:w="8"/><text x="15.5948%" y="847.50"></text></g><g><title>std::time::Instant::duration_since (8 samples, 0.07%)</title><rect x="15.3448%" y="821" width="0.0702%" height="15" fill="rgb(207,36,27)" fg:x="1749" fg:w="8"/><text x="15.5948%" y="831.50"></text></g><g><title>std::time::Instant::checked_duration_since (7 samples, 0.06%)</title><rect x="15.3536%" y="805" width="0.0614%" height="15" fill="rgb(217,90,24)" fg:x="1750" fg:w="7"/><text x="15.6036%" y="815.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (7 samples, 0.06%)</title><rect x="15.3536%" y="789" width="0.0614%" height="15" fill="rgb(224,66,35)" fg:x="1750" fg:w="7"/><text x="15.6036%" y="799.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (6 samples, 0.05%)</title><rect x="15.3623%" y="773" width="0.0526%" height="15" fill="rgb(221,13,50)" fg:x="1751" fg:w="6"/><text x="15.6123%" y="783.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (25 samples, 0.22%)</title><rect x="15.4150%" y="821" width="0.2193%" height="15" fill="rgb(236,68,49)" fg:x="1757" fg:w="25"/><text x="15.6650%" y="831.50"></text></g><g><title>clock_gettime (23 samples, 0.20%)</title><rect x="15.4325%" y="805" width="0.2018%" height="15" fill="rgb(229,146,28)" fg:x="1759" fg:w="23"/><text x="15.6825%" y="815.50"></text></g><g><title>__vdso_clock_gettime (21 samples, 0.18%)</title><rect x="15.4501%" y="789" width="0.1842%" height="15" fill="rgb(225,31,38)" fg:x="1761" fg:w="21"/><text x="15.7001%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (1,316 samples, 11.55%)</title><rect x="4.0972%" y="917" width="11.5459%" height="15" fill="rgb(250,208,3)" fg:x="467" fg:w="1316"/><text x="4.3472%" y="927.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::time::Driver::park_internal (1,286 samples, 11.28%)</title><rect x="4.3604%" y="901" width="11.2827%" height="15" fill="rgb(246,54,23)" fg:x="497" fg:w="1286"/><text x="4.6104%" y="911.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (498 samples, 4.37%)</title><rect x="11.2739%" y="885" width="4.3692%" height="15" fill="rgb(243,76,11)" fg:x="1285" fg:w="498"/><text x="11.5239%" y="895.50">tokio..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (38 samples, 0.33%)</title><rect x="15.3097%" y="869" width="0.3334%" height="15" fill="rgb(245,21,50)" fg:x="1745" fg:w="38"/><text x="15.5597%" y="879.50"></text></g><g><title>tokio::time::clock::Clock::now (26 samples, 0.23%)</title><rect x="15.4150%" y="853" width="0.2281%" height="15" fill="rgb(228,9,43)" fg:x="1757" fg:w="26"/><text x="15.6650%" y="863.50"></text></g><g><title>tokio::time::clock::now (26 samples, 0.23%)</title><rect x="15.4150%" y="837" width="0.2281%" height="15" fill="rgb(208,100,47)" fg:x="1757" fg:w="26"/><text x="15.6650%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1,346 samples, 11.81%)</title><rect x="3.9130%" y="949" width="11.8091%" height="15" fill="rgb(232,26,8)" fg:x="446" fg:w="1346"/><text x="4.1630%" y="959.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (1,346 samples, 11.81%)</title><rect x="3.9130%" y="933" width="11.8091%" height="15" fill="rgb(216,166,38)" fg:x="446" fg:w="1346"/><text x="4.1630%" y="943.50">tokio::runtime::sc..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (9 samples, 0.08%)</title><rect x="15.6431%" y="917" width="0.0790%" height="15" fill="rgb(251,202,51)" fg:x="1783" fg:w="9"/><text x="15.8931%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (9 samples, 0.08%)</title><rect x="15.6431%" y="901" width="0.0790%" height="15" fill="rgb(254,216,34)" fg:x="1783" fg:w="9"/><text x="15.8931%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.08%)</title><rect x="15.6431%" y="885" width="0.0790%" height="15" fill="rgb(251,32,27)" fg:x="1783" fg:w="9"/><text x="15.8931%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,364 samples, 11.97%)</title><rect x="3.7726%" y="965" width="11.9670%" height="15" fill="rgb(208,127,28)" fg:x="430" fg:w="1364"/><text x="4.0226%" y="975.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::should_notify_others (2 samples, 0.02%)</title><rect x="15.7221%" y="949" width="0.0175%" height="15" fill="rgb(224,137,22)" fg:x="1792" fg:w="2"/><text x="15.9721%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::len (2 samples, 0.02%)</title><rect x="15.7221%" y="933" width="0.0175%" height="15" fill="rgb(254,70,32)" fg:x="1792" fg:w="2"/><text x="15.9721%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (8 samples, 0.07%)</title><rect x="15.7747%" y="949" width="0.0702%" height="15" fill="rgb(229,75,37)" fg:x="1798" fg:w="8"/><text x="16.0247%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (8 samples, 0.07%)</title><rect x="15.7747%" y="933" width="0.0702%" height="15" fill="rgb(252,64,23)" fg:x="1798" fg:w="8"/><text x="16.0247%" y="943.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="15.7747%" y="917" width="0.0702%" height="15" fill="rgb(232,162,48)" fg:x="1798" fg:w="8"/><text x="16.0247%" y="927.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.07%)</title><rect x="15.7747%" y="901" width="0.0702%" height="15" fill="rgb(246,160,12)" fg:x="1798" fg:w="8"/><text x="16.0247%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (7 samples, 0.06%)</title><rect x="15.7835%" y="885" width="0.0614%" height="15" fill="rgb(247,166,0)" fg:x="1799" fg:w="7"/><text x="16.0335%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.06%)</title><rect x="15.7835%" y="869" width="0.0614%" height="15" fill="rgb(249,219,21)" fg:x="1799" fg:w="7"/><text x="16.0335%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (15 samples, 0.13%)</title><rect x="15.7396%" y="965" width="0.1316%" height="15" fill="rgb(205,209,3)" fg:x="1794" fg:w="15"/><text x="15.9896%" y="975.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.03%)</title><rect x="15.8449%" y="949" width="0.0263%" height="15" fill="rgb(243,44,1)" fg:x="1806" fg:w="3"/><text x="16.0949%" y="959.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.03%)</title><rect x="15.8449%" y="933" width="0.0263%" height="15" fill="rgb(206,159,16)" fg:x="1806" fg:w="3"/><text x="16.0949%" y="943.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.03%)</title><rect x="15.8449%" y="917" width="0.0263%" height="15" fill="rgb(244,77,30)" fg:x="1806" fg:w="3"/><text x="16.0949%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.02%)</title><rect x="15.8537%" y="901" width="0.0175%" height="15" fill="rgb(218,69,12)" fg:x="1807" fg:w="2"/><text x="16.1037%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="15.8537%" y="885" width="0.0175%" height="15" fill="rgb(212,87,7)" fg:x="1807" fg:w="2"/><text x="16.1037%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (7 samples, 0.06%)</title><rect x="15.8888%" y="933" width="0.0614%" height="15" fill="rgb(245,114,25)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (7 samples, 0.06%)</title><rect x="15.8888%" y="917" width="0.0614%" height="15" fill="rgb(210,61,42)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="927.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="15.8888%" y="901" width="0.0614%" height="15" fill="rgb(211,52,33)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="911.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (7 samples, 0.06%)</title><rect x="15.8888%" y="885" width="0.0614%" height="15" fill="rgb(234,58,33)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (7 samples, 0.06%)</title><rect x="15.8888%" y="869" width="0.0614%" height="15" fill="rgb(220,115,36)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.06%)</title><rect x="15.8888%" y="853" width="0.0614%" height="15" fill="rgb(243,153,54)" fg:x="1811" fg:w="7"/><text x="16.1388%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (7 samples, 0.06%)</title><rect x="15.9502%" y="933" width="0.0614%" height="15" fill="rgb(251,47,18)" fg:x="1818" fg:w="7"/><text x="16.2002%" y="943.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.06%)</title><rect x="15.9502%" y="917" width="0.0614%" height="15" fill="rgb(242,102,42)" fg:x="1818" fg:w="7"/><text x="16.2002%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (7 samples, 0.06%)</title><rect x="15.9502%" y="901" width="0.0614%" height="15" fill="rgb(234,31,38)" fg:x="1818" fg:w="7"/><text x="16.2002%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (21 samples, 0.18%)</title><rect x="15.8888%" y="949" width="0.1842%" height="15" fill="rgb(221,117,51)" fg:x="1811" fg:w="21"/><text x="16.1388%" y="959.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (7 samples, 0.06%)</title><rect x="16.0116%" y="933" width="0.0614%" height="15" fill="rgb(212,20,18)" fg:x="1825" fg:w="7"/><text x="16.2616%" y="943.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (7 samples, 0.06%)</title><rect x="16.0116%" y="917" width="0.0614%" height="15" fill="rgb(245,133,36)" fg:x="1825" fg:w="7"/><text x="16.2616%" y="927.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (7 samples, 0.06%)</title><rect x="16.0116%" y="901" width="0.0614%" height="15" fill="rgb(212,6,19)" fg:x="1825" fg:w="7"/><text x="16.2616%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (7 samples, 0.06%)</title><rect x="16.0116%" y="885" width="0.0614%" height="15" fill="rgb(218,1,36)" fg:x="1825" fg:w="7"/><text x="16.2616%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7 samples, 0.06%)</title><rect x="16.0116%" y="869" width="0.0614%" height="15" fill="rgb(246,84,54)" fg:x="1825" fg:w="7"/><text x="16.2616%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::swap_remove (2 samples, 0.02%)</title><rect x="16.0905%" y="933" width="0.0175%" height="15" fill="rgb(242,110,6)" fg:x="1834" fg:w="2"/><text x="16.3405%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.02%)</title><rect x="16.0905%" y="917" width="0.0175%" height="15" fill="rgb(214,47,5)" fg:x="1834" fg:w="2"/><text x="16.3405%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (3 samples, 0.03%)</title><rect x="16.1169%" y="933" width="0.0263%" height="15" fill="rgb(218,159,25)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (3 samples, 0.03%)</title><rect x="16.1169%" y="917" width="0.0263%" height="15" fill="rgb(215,211,28)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="927.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="16.1169%" y="901" width="0.0263%" height="15" fill="rgb(238,59,32)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="911.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.03%)</title><rect x="16.1169%" y="885" width="0.0263%" height="15" fill="rgb(226,82,3)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.03%)</title><rect x="16.1169%" y="869" width="0.0263%" height="15" fill="rgb(240,164,32)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="16.1169%" y="853" width="0.0263%" height="15" fill="rgb(232,46,7)" fg:x="1837" fg:w="3"/><text x="16.3669%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (10 samples, 0.09%)</title><rect x="16.0730%" y="949" width="0.0877%" height="15" fill="rgb(229,129,53)" fg:x="1832" fg:w="10"/><text x="16.3230%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::unpark_one (2 samples, 0.02%)</title><rect x="16.1432%" y="933" width="0.0175%" height="15" fill="rgb(234,188,29)" fg:x="1840" fg:w="2"/><text x="16.3932%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="16.1432%" y="917" width="0.0175%" height="15" fill="rgb(246,141,4)" fg:x="1840" fg:w="2"/><text x="16.3932%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="16.1432%" y="901" width="0.0175%" height="15" fill="rgb(229,23,39)" fg:x="1840" fg:w="2"/><text x="16.3932%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (36 samples, 0.32%)</title><rect x="15.8712%" y="965" width="0.3158%" height="15" fill="rgb(206,12,3)" fg:x="1809" fg:w="36"/><text x="16.1212%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::has_tasks (3 samples, 0.03%)</title><rect x="16.1607%" y="949" width="0.0263%" height="15" fill="rgb(252,226,20)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::has_tasks (3 samples, 0.03%)</title><rect x="16.1607%" y="933" width="0.0263%" height="15" fill="rgb(216,123,35)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (3 samples, 0.03%)</title><rect x="16.1607%" y="917" width="0.0263%" height="15" fill="rgb(212,68,40)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (3 samples, 0.03%)</title><rect x="16.1607%" y="901" width="0.0263%" height="15" fill="rgb(254,125,32)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (3 samples, 0.03%)</title><rect x="16.1607%" y="885" width="0.0263%" height="15" fill="rgb(253,97,22)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.03%)</title><rect x="16.1607%" y="869" width="0.0263%" height="15" fill="rgb(241,101,14)" fg:x="1842" fg:w="3"/><text x="16.4107%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (6 samples, 0.05%)</title><rect x="16.2046%" y="933" width="0.0526%" height="15" fill="rgb(238,103,29)" fg:x="1847" fg:w="6"/><text x="16.4546%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (6 samples, 0.05%)</title><rect x="16.2046%" y="917" width="0.0526%" height="15" fill="rgb(233,195,47)" fg:x="1847" fg:w="6"/><text x="16.4546%" y="927.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="16.2046%" y="901" width="0.0526%" height="15" fill="rgb(246,218,30)" fg:x="1847" fg:w="6"/><text x="16.4546%" y="911.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (6 samples, 0.05%)</title><rect x="16.2046%" y="885" width="0.0526%" height="15" fill="rgb(219,145,47)" fg:x="1847" fg:w="6"/><text x="16.4546%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (5 samples, 0.04%)</title><rect x="16.2134%" y="869" width="0.0439%" height="15" fill="rgb(243,12,26)" fg:x="1848" fg:w="5"/><text x="16.4634%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.04%)</title><rect x="16.2134%" y="853" width="0.0439%" height="15" fill="rgb(214,87,16)" fg:x="1848" fg:w="5"/><text x="16.4634%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (13 samples, 0.11%)</title><rect x="16.1958%" y="949" width="0.1141%" height="15" fill="rgb(208,99,42)" fg:x="1846" fg:w="13"/><text x="16.4458%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::dec_num_unparked (5 samples, 0.04%)</title><rect x="16.2660%" y="933" width="0.0439%" height="15" fill="rgb(253,99,2)" fg:x="1854" fg:w="5"/><text x="16.5160%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.04%)</title><rect x="16.2660%" y="917" width="0.0439%" height="15" fill="rgb(220,168,23)" fg:x="1854" fg:w="5"/><text x="16.5160%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.04%)</title><rect x="16.2660%" y="901" width="0.0439%" height="15" fill="rgb(242,38,24)" fg:x="1854" fg:w="5"/><text x="16.5160%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (5 samples, 0.04%)</title><rect x="16.3187%" y="885" width="0.0439%" height="15" fill="rgb(225,182,9)" fg:x="1860" fg:w="5"/><text x="16.5687%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="16.3187%" y="869" width="0.0439%" height="15" fill="rgb(243,178,37)" fg:x="1860" fg:w="5"/><text x="16.5687%" y="879.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (7 samples, 0.06%)</title><rect x="16.3099%" y="949" width="0.0614%" height="15" fill="rgb(232,139,19)" fg:x="1859" fg:w="7"/><text x="16.5599%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::is_empty (7 samples, 0.06%)</title><rect x="16.3099%" y="933" width="0.0614%" height="15" fill="rgb(225,201,24)" fg:x="1859" fg:w="7"/><text x="16.5599%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (6 samples, 0.05%)</title><rect x="16.3187%" y="917" width="0.0526%" height="15" fill="rgb(221,47,46)" fg:x="1860" fg:w="6"/><text x="16.5687%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (6 samples, 0.05%)</title><rect x="16.3187%" y="901" width="0.0526%" height="15" fill="rgb(249,23,13)" fg:x="1860" fg:w="6"/><text x="16.5687%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (1,452 samples, 12.74%)</title><rect x="3.6498%" y="981" width="12.7391%" height="15" fill="rgb(219,9,5)" fg:x="416" fg:w="1452"/><text x="3.8998%" y="991.50">tokio::runtime::sch..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (23 samples, 0.20%)</title><rect x="16.1871%" y="965" width="0.2018%" height="15" fill="rgb(254,171,16)" fg:x="1845" fg:w="23"/><text x="16.4371%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::has_tasks (2 samples, 0.02%)</title><rect x="16.3713%" y="949" width="0.0175%" height="15" fill="rgb(230,171,20)" fg:x="1866" fg:w="2"/><text x="16.6213%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="16.4064%" y="853" width="0.0175%" height="15" fill="rgb(210,71,41)" fg:x="1870" fg:w="2"/><text x="16.6564%" y="863.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (2 samples, 0.02%)</title><rect x="16.4064%" y="837" width="0.0175%" height="15" fill="rgb(206,173,20)" fg:x="1870" fg:w="2"/><text x="16.6564%" y="847.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="16.4064%" y="821" width="0.0175%" height="15" fill="rgb(233,88,34)" fg:x="1870" fg:w="2"/><text x="16.6564%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="16.4064%" y="805" width="0.0175%" height="15" fill="rgb(223,209,46)" fg:x="1870" fg:w="2"/><text x="16.6564%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;tokio::runtime::coop::with_budget::ResetGuard,std::thread::local::AccessError&gt;&gt; (3 samples, 0.03%)</title><rect x="16.4064%" y="933" width="0.0263%" height="15" fill="rgb(250,43,18)" fg:x="1870" fg:w="3"/><text x="16.6564%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::with_budget::ResetGuard&gt; (3 samples, 0.03%)</title><rect x="16.4064%" y="917" width="0.0263%" height="15" fill="rgb(208,13,10)" fg:x="1870" fg:w="3"/><text x="16.6564%" y="927.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="16.4064%" y="901" width="0.0263%" height="15" fill="rgb(212,200,36)" fg:x="1870" fg:w="3"/><text x="16.6564%" y="911.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.03%)</title><rect x="16.4064%" y="885" width="0.0263%" height="15" fill="rgb(225,90,30)" fg:x="1870" fg:w="3"/><text x="16.6564%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.03%)</title><rect x="16.4064%" y="869" width="0.0263%" height="15" fill="rgb(236,182,39)" fg:x="1870" fg:w="3"/><text x="16.6564%" y="879.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.07%)</title><rect x="16.4503%" y="917" width="0.0702%" height="15" fill="rgb(212,144,35)" fg:x="1875" fg:w="8"/><text x="16.7003%" y="927.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (8 samples, 0.07%)</title><rect x="16.4503%" y="901" width="0.0702%" height="15" fill="rgb(228,63,44)" fg:x="1875" fg:w="8"/><text x="16.7003%" y="911.50"></text></g><g><title>core::cell::BorrowRefMut::new (8 samples, 0.07%)</title><rect x="16.4503%" y="885" width="0.0702%" height="15" fill="rgb(228,109,6)" fg:x="1875" fg:w="8"/><text x="16.7003%" y="895.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="16.5204%" y="885" width="0.0263%" height="15" fill="rgb(238,117,24)" fg:x="1883" fg:w="3"/><text x="16.7704%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.04%)</title><rect x="16.5204%" y="917" width="0.0351%" height="15" fill="rgb(242,26,26)" fg:x="1883" fg:w="4"/><text x="16.7704%" y="927.50"></text></g><g><title>core::mem::replace (4 samples, 0.04%)</title><rect x="16.5204%" y="901" width="0.0351%" height="15" fill="rgb(221,92,48)" fg:x="1883" fg:w="4"/><text x="16.7704%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (5 samples, 0.04%)</title><rect x="16.5555%" y="917" width="0.0439%" height="15" fill="rgb(209,209,32)" fg:x="1887" fg:w="5"/><text x="16.8055%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="16.6257%" y="773" width="0.0175%" height="15" fill="rgb(221,70,22)" fg:x="1895" fg:w="2"/><text x="16.8757%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2 samples, 0.02%)</title><rect x="16.6257%" y="757" width="0.0175%" height="15" fill="rgb(248,145,5)" fg:x="1895" fg:w="2"/><text x="16.8757%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="16.6257%" y="741" width="0.0175%" height="15" fill="rgb(226,116,26)" fg:x="1895" fg:w="2"/><text x="16.8757%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.02%)</title><rect x="16.6608%" y="725" width="0.0175%" height="15" fill="rgb(244,5,17)" fg:x="1899" fg:w="2"/><text x="16.9108%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="16.6608%" y="709" width="0.0175%" height="15" fill="rgb(252,159,33)" fg:x="1899" fg:w="2"/><text x="16.9108%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (2 samples, 0.02%)</title><rect x="16.6784%" y="725" width="0.0175%" height="15" fill="rgb(206,71,0)" fg:x="1901" fg:w="2"/><text x="16.9284%" y="735.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.02%)</title><rect x="16.6784%" y="709" width="0.0175%" height="15" fill="rgb(233,118,54)" fg:x="1901" fg:w="2"/><text x="16.9284%" y="719.50"></text></g><g><title>clock_gettime (2 samples, 0.02%)</title><rect x="16.6784%" y="693" width="0.0175%" height="15" fill="rgb(234,83,48)" fg:x="1901" fg:w="2"/><text x="16.9284%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::hash (2 samples, 0.02%)</title><rect x="16.6959%" y="709" width="0.0175%" height="15" fill="rgb(228,3,54)" fg:x="1903" fg:w="2"/><text x="16.9459%" y="719.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.08%)</title><rect x="16.6433%" y="757" width="0.0790%" height="15" fill="rgb(226,155,13)" fg:x="1897" fg:w="9"/><text x="16.8933%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (8 samples, 0.07%)</title><rect x="16.6520%" y="741" width="0.0702%" height="15" fill="rgb(241,28,37)" fg:x="1898" fg:w="8"/><text x="16.9020%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.03%)</title><rect x="16.6959%" y="725" width="0.0263%" height="15" fill="rgb(233,93,10)" fg:x="1903" fg:w="3"/><text x="16.9459%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (3 samples, 0.03%)</title><rect x="16.7222%" y="725" width="0.0263%" height="15" fill="rgb(225,113,19)" fg:x="1906" fg:w="3"/><text x="16.9722%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.03%)</title><rect x="16.7222%" y="709" width="0.0263%" height="15" fill="rgb(241,2,18)" fg:x="1906" fg:w="3"/><text x="16.9722%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (5 samples, 0.04%)</title><rect x="16.7222%" y="757" width="0.0439%" height="15" fill="rgb(228,207,21)" fg:x="1906" fg:w="5"/><text x="16.9722%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (5 samples, 0.04%)</title><rect x="16.7222%" y="741" width="0.0439%" height="15" fill="rgb(213,211,35)" fg:x="1906" fg:w="5"/><text x="16.9722%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (3 samples, 0.03%)</title><rect x="16.7661%" y="757" width="0.0263%" height="15" fill="rgb(209,83,10)" fg:x="1911" fg:w="3"/><text x="17.0161%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (2 samples, 0.02%)</title><rect x="16.7749%" y="741" width="0.0175%" height="15" fill="rgb(209,164,1)" fg:x="1912" fg:w="2"/><text x="17.0249%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="16.7749%" y="725" width="0.0175%" height="15" fill="rgb(213,184,43)" fg:x="1912" fg:w="2"/><text x="17.0249%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.03%)</title><rect x="16.8100%" y="725" width="0.0263%" height="15" fill="rgb(231,61,34)" fg:x="1916" fg:w="3"/><text x="17.0600%" y="735.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="16.8100%" y="709" width="0.0263%" height="15" fill="rgb(235,75,3)" fg:x="1916" fg:w="3"/><text x="17.0600%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (6 samples, 0.05%)</title><rect x="16.8451%" y="725" width="0.0526%" height="15" fill="rgb(220,106,47)" fg:x="1920" fg:w="6"/><text x="17.0951%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.05%)</title><rect x="16.8451%" y="709" width="0.0526%" height="15" fill="rgb(210,196,33)" fg:x="1920" fg:w="6"/><text x="17.0951%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.05%)</title><rect x="16.8451%" y="693" width="0.0526%" height="15" fill="rgb(229,154,42)" fg:x="1920" fg:w="6"/><text x="17.0951%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (35 samples, 0.31%)</title><rect x="16.5994%" y="853" width="0.3071%" height="15" fill="rgb(228,114,26)" fg:x="1892" fg:w="35"/><text x="16.8494%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (35 samples, 0.31%)</title><rect x="16.5994%" y="837" width="0.3071%" height="15" fill="rgb(208,144,1)" fg:x="1892" fg:w="35"/><text x="16.8494%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (35 samples, 0.31%)</title><rect x="16.5994%" y="821" width="0.3071%" height="15" fill="rgb(239,112,37)" fg:x="1892" fg:w="35"/><text x="16.8494%" y="831.50"></text></g><g><title>tokio::runtime::context::with_scheduler (35 samples, 0.31%)</title><rect x="16.5994%" y="805" width="0.3071%" height="15" fill="rgb(210,96,50)" fg:x="1892" fg:w="35"/><text x="16.8494%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (34 samples, 0.30%)</title><rect x="16.6082%" y="789" width="0.2983%" height="15" fill="rgb(222,178,2)" fg:x="1893" fg:w="34"/><text x="16.8582%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (30 samples, 0.26%)</title><rect x="16.6433%" y="773" width="0.2632%" height="15" fill="rgb(226,74,18)" fg:x="1897" fg:w="30"/><text x="16.8933%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (13 samples, 0.11%)</title><rect x="16.7924%" y="757" width="0.1141%" height="15" fill="rgb(225,67,54)" fg:x="1914" fg:w="13"/><text x="17.0424%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (11 samples, 0.10%)</title><rect x="16.8100%" y="741" width="0.0965%" height="15" fill="rgb(251,92,32)" fg:x="1916" fg:w="11"/><text x="17.0600%" y="751.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (18 samples, 0.16%)</title><rect x="17.4680%" y="437" width="0.1579%" height="15" fill="rgb(228,149,22)" fg:x="1991" fg:w="18"/><text x="17.7180%" y="447.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (2 samples, 0.02%)</title><rect x="17.7400%" y="373" width="0.0175%" height="15" fill="rgb(243,54,13)" fg:x="2022" fg:w="2"/><text x="17.9900%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.03%)</title><rect x="17.7400%" y="405" width="0.0263%" height="15" fill="rgb(243,180,28)" fg:x="2022" fg:w="3"/><text x="17.9900%" y="415.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (3 samples, 0.03%)</title><rect x="17.7400%" y="389" width="0.0263%" height="15" fill="rgb(208,167,24)" fg:x="2022" fg:w="3"/><text x="17.9900%" y="399.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::future::FusedFuture&gt;::is_terminated (6 samples, 0.05%)</title><rect x="17.9330%" y="341" width="0.0526%" height="15" fill="rgb(245,73,45)" fg:x="2044" fg:w="6"/><text x="18.1830%" y="351.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as futures_core::future::FusedFuture&gt;::is_terminated (6 samples, 0.05%)</title><rect x="17.9330%" y="325" width="0.0526%" height="15" fill="rgb(237,203,48)" fg:x="2044" fg:w="6"/><text x="18.1830%" y="335.50"></text></g><g><title>flume::Shared&lt;T&gt;::is_disconnected (6 samples, 0.05%)</title><rect x="17.9330%" y="309" width="0.0526%" height="15" fill="rgb(211,197,16)" fg:x="2044" fg:w="6"/><text x="18.1830%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (6 samples, 0.05%)</title><rect x="17.9330%" y="293" width="0.0526%" height="15" fill="rgb(243,99,51)" fg:x="2044" fg:w="6"/><text x="18.1830%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.05%)</title><rect x="17.9330%" y="277" width="0.0526%" height="15" fill="rgb(215,123,29)" fg:x="2044" fg:w="6"/><text x="18.1830%" y="287.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (8 samples, 0.07%)</title><rect x="17.9856%" y="341" width="0.0702%" height="15" fill="rgb(239,186,37)" fg:x="2050" fg:w="8"/><text x="18.2356%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (7 samples, 0.06%)</title><rect x="18.1523%" y="245" width="0.0614%" height="15" fill="rgb(252,136,39)" fg:x="2069" fg:w="7"/><text x="18.4023%" y="255.50"></text></g><g><title>core::ptr::read (7 samples, 0.06%)</title><rect x="18.1523%" y="229" width="0.0614%" height="15" fill="rgb(223,213,32)" fg:x="2069" fg:w="7"/><text x="18.4023%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2 samples, 0.02%)</title><rect x="18.2137%" y="213" width="0.0175%" height="15" fill="rgb(233,115,5)" fg:x="2076" fg:w="2"/><text x="18.4637%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (11 samples, 0.10%)</title><rect x="18.1435%" y="261" width="0.0965%" height="15" fill="rgb(207,226,44)" fg:x="2068" fg:w="11"/><text x="18.3935%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3 samples, 0.03%)</title><rect x="18.2137%" y="245" width="0.0263%" height="15" fill="rgb(208,126,0)" fg:x="2076" fg:w="3"/><text x="18.4637%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3 samples, 0.03%)</title><rect x="18.2137%" y="229" width="0.0263%" height="15" fill="rgb(244,66,21)" fg:x="2076" fg:w="3"/><text x="18.4637%" y="239.50"></text></g><g><title>core::mem::drop (9 samples, 0.08%)</title><rect x="18.2400%" y="261" width="0.0790%" height="15" fill="rgb(222,97,12)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="18.2400%" y="245" width="0.0790%" height="15" fill="rgb(219,213,19)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="255.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="18.2400%" y="229" width="0.0790%" height="15" fill="rgb(252,169,30)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (9 samples, 0.08%)</title><rect x="18.2400%" y="213" width="0.0790%" height="15" fill="rgb(206,32,51)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (9 samples, 0.08%)</title><rect x="18.2400%" y="197" width="0.0790%" height="15" fill="rgb(250,172,42)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (9 samples, 0.08%)</title><rect x="18.2400%" y="181" width="0.0790%" height="15" fill="rgb(209,34,43)" fg:x="2079" fg:w="9"/><text x="18.4900%" y="191.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (7 samples, 0.06%)</title><rect x="18.3190%" y="261" width="0.0614%" height="15" fill="rgb(223,11,35)" fg:x="2088" fg:w="7"/><text x="18.5690%" y="271.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::trigger (3 samples, 0.03%)</title><rect x="18.3804%" y="245" width="0.0263%" height="15" fill="rgb(251,219,26)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="18.3804%" y="229" width="0.0263%" height="15" fill="rgb(231,119,3)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="18.3804%" y="213" width="0.0263%" height="15" fill="rgb(216,97,11)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.03%)</title><rect x="18.3804%" y="197" width="0.0263%" height="15" fill="rgb(223,59,9)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="18.3804%" y="181" width="0.0263%" height="15" fill="rgb(233,93,31)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="18.3804%" y="165" width="0.0263%" height="15" fill="rgb(239,81,33)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="18.3804%" y="149" width="0.0263%" height="15" fill="rgb(213,120,34)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="159.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="18.3804%" y="133" width="0.0263%" height="15" fill="rgb(243,49,53)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="18.3804%" y="117" width="0.0263%" height="15" fill="rgb(247,216,33)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="127.50"></text></g><g><title>malloc (3 samples, 0.03%)</title><rect x="18.3804%" y="101" width="0.0263%" height="15" fill="rgb(226,26,14)" fg:x="2095" fg:w="3"/><text x="18.6304%" y="111.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner::_{{closure}} (4 samples, 0.04%)</title><rect x="18.3804%" y="261" width="0.0351%" height="15" fill="rgb(215,49,53)" fg:x="2095" fg:w="4"/><text x="18.6304%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.02%)</title><rect x="18.4243%" y="213" width="0.0175%" height="15" fill="rgb(245,162,40)" fg:x="2100" fg:w="2"/><text x="18.6743%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.02%)</title><rect x="18.4243%" y="197" width="0.0175%" height="15" fill="rgb(229,68,17)" fg:x="2100" fg:w="2"/><text x="18.6743%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.15%)</title><rect x="18.4418%" y="213" width="0.1491%" height="15" fill="rgb(213,182,10)" fg:x="2102" fg:w="17"/><text x="18.6918%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.15%)</title><rect x="18.4418%" y="197" width="0.1491%" height="15" fill="rgb(245,125,30)" fg:x="2102" fg:w="17"/><text x="18.6918%" y="207.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (56 samples, 0.49%)</title><rect x="18.1084%" y="277" width="0.4913%" height="15" fill="rgb(232,202,2)" fg:x="2064" fg:w="56"/><text x="18.3584%" y="287.50"></text></g><g><title>flume::wait_lock (21 samples, 0.18%)</title><rect x="18.4155%" y="261" width="0.1842%" height="15" fill="rgb(237,140,51)" fg:x="2099" fg:w="21"/><text x="18.6655%" y="271.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.18%)</title><rect x="18.4155%" y="245" width="0.1842%" height="15" fill="rgb(236,157,25)" fg:x="2099" fg:w="21"/><text x="18.6655%" y="255.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (21 samples, 0.18%)</title><rect x="18.4155%" y="229" width="0.1842%" height="15" fill="rgb(219,209,0)" fg:x="2099" fg:w="21"/><text x="18.6655%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.02%)</title><rect x="18.5998%" y="245" width="0.0175%" height="15" fill="rgb(240,116,54)" fg:x="2120" fg:w="2"/><text x="18.8498%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (2 samples, 0.02%)</title><rect x="18.5998%" y="229" width="0.0175%" height="15" fill="rgb(216,10,36)" fg:x="2120" fg:w="2"/><text x="18.8498%" y="239.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="18.5998%" y="213" width="0.0175%" height="15" fill="rgb(222,72,44)" fg:x="2120" fg:w="2"/><text x="18.8498%" y="223.50"></text></g><g><title>flume::Chan&lt;T&gt;::pull_pending (3 samples, 0.03%)</title><rect x="18.6173%" y="245" width="0.0263%" height="15" fill="rgb(232,159,9)" fg:x="2122" fg:w="3"/><text x="18.8673%" y="255.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.59%)</title><rect x="18.0646%" y="309" width="0.5878%" height="15" fill="rgb(210,39,32)" fg:x="2059" fg:w="67"/><text x="18.3146%" y="319.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (67 samples, 0.59%)</title><rect x="18.0646%" y="293" width="0.5878%" height="15" fill="rgb(216,194,45)" fg:x="2059" fg:w="67"/><text x="18.3146%" y="303.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (6 samples, 0.05%)</title><rect x="18.5998%" y="277" width="0.0526%" height="15" fill="rgb(218,18,35)" fg:x="2120" fg:w="6"/><text x="18.8498%" y="287.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (6 samples, 0.05%)</title><rect x="18.5998%" y="261" width="0.0526%" height="15" fill="rgb(207,83,51)" fg:x="2120" fg:w="6"/><text x="18.8498%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.03%)</title><rect x="18.6875%" y="229" width="0.0263%" height="15" fill="rgb(225,63,43)" fg:x="2130" fg:w="3"/><text x="18.9375%" y="239.50"></text></g><g><title>core::mem::replace (3 samples, 0.03%)</title><rect x="18.6875%" y="213" width="0.0263%" height="15" fill="rgb(207,57,36)" fg:x="2130" fg:w="3"/><text x="18.9375%" y="223.50"></text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="18.6875%" y="197" width="0.0263%" height="15" fill="rgb(216,99,33)" fg:x="2130" fg:w="3"/><text x="18.9375%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.04%)</title><rect x="18.6875%" y="245" width="0.0351%" height="15" fill="rgb(225,42,16)" fg:x="2130" fg:w="4"/><text x="18.9375%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (5 samples, 0.04%)</title><rect x="18.7226%" y="245" width="0.0439%" height="15" fill="rgb(220,201,45)" fg:x="2134" fg:w="5"/><text x="18.9726%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="18.7226%" y="229" width="0.0439%" height="15" fill="rgb(225,33,4)" fg:x="2134" fg:w="5"/><text x="18.9726%" y="239.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="18.7226%" y="213" width="0.0439%" height="15" fill="rgb(224,33,50)" fg:x="2134" fg:w="5"/><text x="18.9726%" y="223.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (5 samples, 0.04%)</title><rect x="18.7226%" y="197" width="0.0439%" height="15" fill="rgb(246,198,51)" fg:x="2134" fg:w="5"/><text x="18.9726%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (4 samples, 0.04%)</title><rect x="18.7314%" y="181" width="0.0351%" height="15" fill="rgb(205,22,4)" fg:x="2135" fg:w="4"/><text x="18.9814%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.04%)</title><rect x="18.7314%" y="165" width="0.0351%" height="15" fill="rgb(206,3,8)" fg:x="2135" fg:w="4"/><text x="18.9814%" y="175.50"></text></g><g><title>event_listener::TaskRef::into_task (6 samples, 0.05%)</title><rect x="18.7665%" y="245" width="0.0526%" height="15" fill="rgb(251,23,15)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="18.7665%" y="229" width="0.0526%" height="15" fill="rgb(252,88,28)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (6 samples, 0.05%)</title><rect x="18.7665%" y="213" width="0.0526%" height="15" fill="rgb(212,127,14)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (6 samples, 0.05%)</title><rect x="18.7665%" y="197" width="0.0526%" height="15" fill="rgb(247,145,37)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.05%)</title><rect x="18.7665%" y="181" width="0.0526%" height="15" fill="rgb(209,117,53)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.05%)</title><rect x="18.7665%" y="165" width="0.0526%" height="15" fill="rgb(212,90,42)" fg:x="2139" fg:w="6"/><text x="19.0165%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (119 samples, 1.04%)</title><rect x="17.8277%" y="373" width="1.0440%" height="15" fill="rgb(218,164,37)" fg:x="2032" fg:w="119"/><text x="18.0777%" y="383.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}}::_{{closure}} (118 samples, 1.04%)</title><rect x="17.8365%" y="357" width="1.0353%" height="15" fill="rgb(246,65,34)" fg:x="2033" fg:w="118"/><text x="18.0865%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (93 samples, 0.82%)</title><rect x="18.0558%" y="341" width="0.8159%" height="15" fill="rgb(231,100,33)" fg:x="2058" fg:w="93"/><text x="18.3058%" y="351.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (92 samples, 0.81%)</title><rect x="18.0646%" y="325" width="0.8072%" height="15" fill="rgb(228,126,14)" fg:x="2059" fg:w="92"/><text x="18.3146%" y="335.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (25 samples, 0.22%)</title><rect x="18.6524%" y="309" width="0.2193%" height="15" fill="rgb(215,173,21)" fg:x="2126" fg:w="25"/><text x="18.9024%" y="319.50"></text></g><g><title>&lt;event_listener::EventListener&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.22%)</title><rect x="18.6524%" y="293" width="0.2193%" height="15" fill="rgb(210,6,40)" fg:x="2126" fg:w="25"/><text x="18.9024%" y="303.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::poll_internal (24 samples, 0.21%)</title><rect x="18.6612%" y="277" width="0.2106%" height="15" fill="rgb(212,48,18)" fg:x="2127" fg:w="24"/><text x="18.9112%" y="287.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::register (24 samples, 0.21%)</title><rect x="18.6612%" y="261" width="0.2106%" height="15" fill="rgb(230,214,11)" fg:x="2127" fg:w="24"/><text x="18.9112%" y="271.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (6 samples, 0.05%)</title><rect x="18.8191%" y="245" width="0.0526%" height="15" fill="rgb(254,105,39)" fg:x="2145" fg:w="6"/><text x="19.0691%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="18.8191%" y="229" width="0.0526%" height="15" fill="rgb(245,158,5)" fg:x="2145" fg:w="6"/><text x="19.0691%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (6 samples, 0.05%)</title><rect x="18.8191%" y="213" width="0.0526%" height="15" fill="rgb(249,208,11)" fg:x="2145" fg:w="6"/><text x="19.0691%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.05%)</title><rect x="18.8191%" y="197" width="0.0526%" height="15" fill="rgb(210,39,28)" fg:x="2145" fg:w="6"/><text x="19.0691%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="18.8191%" y="181" width="0.0526%" height="15" fill="rgb(211,56,53)" fg:x="2145" fg:w="6"/><text x="19.0691%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (8 samples, 0.07%)</title><rect x="18.8717%" y="357" width="0.0702%" height="15" fill="rgb(226,201,30)" fg:x="2151" fg:w="8"/><text x="19.1217%" y="367.50"></text></g><g><title>core::ptr::swap (8 samples, 0.07%)</title><rect x="18.8717%" y="341" width="0.0702%" height="15" fill="rgb(239,101,34)" fg:x="2151" fg:w="8"/><text x="19.1217%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.07%)</title><rect x="18.8717%" y="325" width="0.0702%" height="15" fill="rgb(226,209,5)" fg:x="2151" fg:w="8"/><text x="19.1217%" y="335.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (137 samples, 1.20%)</title><rect x="17.7663%" y="405" width="1.2020%" height="15" fill="rgb(250,105,47)" fg:x="2025" fg:w="137"/><text x="18.0163%" y="415.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (137 samples, 1.20%)</title><rect x="17.7663%" y="389" width="1.2020%" height="15" fill="rgb(230,72,3)" fg:x="2025" fg:w="137"/><text x="18.0163%" y="399.50"></text></g><g><title>futures_util::async_await::random::shuffle (11 samples, 0.10%)</title><rect x="18.8717%" y="373" width="0.0965%" height="15" fill="rgb(232,218,39)" fg:x="2151" fg:w="11"/><text x="19.1217%" y="383.50"></text></g><g><title>futures_util::async_await::random::gen_index (3 samples, 0.03%)</title><rect x="18.9419%" y="357" width="0.0263%" height="15" fill="rgb(248,166,6)" fg:x="2159" fg:w="3"/><text x="19.1919%" y="367.50"></text></g><g><title>futures_util::async_await::random::random (3 samples, 0.03%)</title><rect x="18.9419%" y="341" width="0.0263%" height="15" fill="rgb(247,89,20)" fg:x="2159" fg:w="3"/><text x="19.1919%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="18.9419%" y="325" width="0.0263%" height="15" fill="rgb(248,130,54)" fg:x="2159" fg:w="3"/><text x="19.1919%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.03%)</title><rect x="18.9419%" y="309" width="0.0263%" height="15" fill="rgb(234,196,4)" fg:x="2159" fg:w="3"/><text x="19.1919%" y="319.50"></text></g><g><title>futures_util::async_await::random::random::_{{closure}} (3 samples, 0.03%)</title><rect x="18.9419%" y="293" width="0.0263%" height="15" fill="rgb(250,143,31)" fg:x="2159" fg:w="3"/><text x="19.1919%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="18.9507%" y="277" width="0.0175%" height="15" fill="rgb(211,110,34)" fg:x="2160" fg:w="2"/><text x="19.2007%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="18.9507%" y="261" width="0.0175%" height="15" fill="rgb(215,124,48)" fg:x="2160" fg:w="2"/><text x="19.2007%" y="271.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="18.9507%" y="245" width="0.0175%" height="15" fill="rgb(216,46,13)" fg:x="2160" fg:w="2"/><text x="19.2007%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="18.9507%" y="229" width="0.0175%" height="15" fill="rgb(205,184,25)" fg:x="2160" fg:w="2"/><text x="19.2007%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.03%)</title><rect x="18.9858%" y="325" width="0.0263%" height="15" fill="rgb(228,1,10)" fg:x="2164" fg:w="3"/><text x="19.2358%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt; (2 samples, 0.02%)</title><rect x="18.9946%" y="309" width="0.0175%" height="15" fill="rgb(213,116,27)" fg:x="2165" fg:w="2"/><text x="19.2446%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="18.9858%" y="357" width="0.0526%" height="15" fill="rgb(241,95,50)" fg:x="2164" fg:w="6"/><text x="19.2358%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="18.9858%" y="341" width="0.0526%" height="15" fill="rgb(238,48,32)" fg:x="2164" fg:w="6"/><text x="19.2358%" y="351.50"></text></g><g><title>cfree (3 samples, 0.03%)</title><rect x="19.0121%" y="325" width="0.0263%" height="15" fill="rgb(235,113,49)" fg:x="2167" fg:w="3"/><text x="19.2621%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (3 samples, 0.03%)</title><rect x="19.0384%" y="357" width="0.0263%" height="15" fill="rgb(205,127,43)" fg:x="2170" fg:w="3"/><text x="19.2884%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.03%)</title><rect x="19.0384%" y="341" width="0.0263%" height="15" fill="rgb(250,162,2)" fg:x="2170" fg:w="3"/><text x="19.2884%" y="351.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="18.9682%" y="389" width="0.1053%" height="15" fill="rgb(220,13,41)" fg:x="2162" fg:w="12"/><text x="19.2182%" y="399.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::reset_hook (12 samples, 0.11%)</title><rect x="18.9682%" y="373" width="0.1053%" height="15" fill="rgb(249,221,25)" fg:x="2162" fg:w="12"/><text x="19.2182%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flume::async::RecvFut&lt;bytes::bytes::Bytes&gt;&gt; (13 samples, 0.11%)</title><rect x="18.9682%" y="405" width="0.1141%" height="15" fill="rgb(215,208,19)" fg:x="2162" fg:w="13"/><text x="19.2182%" y="415.50"></text></g><g><title>cfree (8 samples, 0.07%)</title><rect x="19.0823%" y="373" width="0.0702%" height="15" fill="rgb(236,175,2)" fg:x="2175" fg:w="8"/><text x="19.3323%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="19.1349%" y="357" width="0.0175%" height="15" fill="rgb(241,52,2)" fg:x="2181" fg:w="2"/><text x="19.3849%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt; (9 samples, 0.08%)</title><rect x="19.1525%" y="309" width="0.0790%" height="15" fill="rgb(248,140,14)" fg:x="2183" fg:w="9"/><text x="19.4025%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="19.1525%" y="293" width="0.0790%" height="15" fill="rgb(253,22,42)" fg:x="2183" fg:w="9"/><text x="19.4025%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.08%)</title><rect x="19.1525%" y="277" width="0.0790%" height="15" fill="rgb(234,61,47)" fg:x="2183" fg:w="9"/><text x="19.4025%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.08%)</title><rect x="19.1525%" y="261" width="0.0790%" height="15" fill="rgb(208,226,15)" fg:x="2183" fg:w="9"/><text x="19.4025%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::State&lt;()&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="19.2665%" y="277" width="0.0439%" height="15" fill="rgb(217,221,4)" fg:x="2196" fg:w="5"/><text x="19.5165%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&lt;()&gt;&gt; (5 samples, 0.04%)</title><rect x="19.2665%" y="261" width="0.0439%" height="15" fill="rgb(212,174,34)" fg:x="2196" fg:w="5"/><text x="19.5165%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::Task&gt; (5 samples, 0.04%)</title><rect x="19.2665%" y="245" width="0.0439%" height="15" fill="rgb(253,83,4)" fg:x="2196" fg:w="5"/><text x="19.5165%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (4 samples, 0.04%)</title><rect x="19.2753%" y="229" width="0.0351%" height="15" fill="rgb(250,195,49)" fg:x="2197" fg:w="4"/><text x="19.5253%" y="239.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="19.2753%" y="213" width="0.0351%" height="15" fill="rgb(241,192,25)" fg:x="2197" fg:w="4"/><text x="19.5253%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (4 samples, 0.04%)</title><rect x="19.2753%" y="197" width="0.0351%" height="15" fill="rgb(208,124,10)" fg:x="2197" fg:w="4"/><text x="19.5253%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (4 samples, 0.04%)</title><rect x="19.2753%" y="181" width="0.0351%" height="15" fill="rgb(222,33,0)" fg:x="2197" fg:w="4"/><text x="19.5253%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (4 samples, 0.04%)</title><rect x="19.2753%" y="165" width="0.0351%" height="15" fill="rgb(234,209,28)" fg:x="2197" fg:w="4"/><text x="19.5253%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.03%)</title><rect x="19.2841%" y="149" width="0.0263%" height="15" fill="rgb(224,11,23)" fg:x="2198" fg:w="3"/><text x="19.5341%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="19.2841%" y="133" width="0.0263%" height="15" fill="rgb(232,99,1)" fg:x="2198" fg:w="3"/><text x="19.5341%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (8 samples, 0.07%)</title><rect x="19.3192%" y="261" width="0.0702%" height="15" fill="rgb(237,95,45)" fg:x="2202" fg:w="8"/><text x="19.5692%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="19.3280%" y="245" width="0.0614%" height="15" fill="rgb(208,109,11)" fg:x="2203" fg:w="7"/><text x="19.5780%" y="255.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="19.3280%" y="229" width="0.0614%" height="15" fill="rgb(216,190,48)" fg:x="2203" fg:w="7"/><text x="19.5780%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (7 samples, 0.06%)</title><rect x="19.3280%" y="213" width="0.0614%" height="15" fill="rgb(251,171,36)" fg:x="2203" fg:w="7"/><text x="19.5780%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (6 samples, 0.05%)</title><rect x="19.3367%" y="197" width="0.0526%" height="15" fill="rgb(230,62,22)" fg:x="2204" fg:w="6"/><text x="19.5867%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.05%)</title><rect x="19.3367%" y="181" width="0.0526%" height="15" fill="rgb(225,114,35)" fg:x="2204" fg:w="6"/><text x="19.5867%" y="191.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (10 samples, 0.09%)</title><rect x="19.3894%" y="261" width="0.0877%" height="15" fill="rgb(215,118,42)" fg:x="2210" fg:w="10"/><text x="19.6394%" y="271.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.09%)</title><rect x="19.3894%" y="245" width="0.0877%" height="15" fill="rgb(243,119,21)" fg:x="2210" fg:w="10"/><text x="19.6394%" y="255.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (10 samples, 0.09%)</title><rect x="19.3894%" y="229" width="0.0877%" height="15" fill="rgb(252,177,53)" fg:x="2210" fg:w="10"/><text x="19.6394%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (10 samples, 0.09%)</title><rect x="19.3894%" y="213" width="0.0877%" height="15" fill="rgb(237,209,29)" fg:x="2210" fg:w="10"/><text x="19.6394%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.09%)</title><rect x="19.3894%" y="197" width="0.0877%" height="15" fill="rgb(212,65,23)" fg:x="2210" fg:w="10"/><text x="19.6394%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;event_listener::EventListener&gt;&gt; (53 samples, 0.46%)</title><rect x="19.0823%" y="405" width="0.4650%" height="15" fill="rgb(230,222,46)" fg:x="2175" fg:w="53"/><text x="19.3323%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (53 samples, 0.46%)</title><rect x="19.0823%" y="389" width="0.4650%" height="15" fill="rgb(215,135,32)" fg:x="2175" fg:w="53"/><text x="19.3323%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (45 samples, 0.39%)</title><rect x="19.1525%" y="373" width="0.3948%" height="15" fill="rgb(246,101,22)" fg:x="2183" fg:w="45"/><text x="19.4025%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (45 samples, 0.39%)</title><rect x="19.1525%" y="357" width="0.3948%" height="15" fill="rgb(206,107,13)" fg:x="2183" fg:w="45"/><text x="19.4025%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt;&gt; (45 samples, 0.39%)</title><rect x="19.1525%" y="341" width="0.3948%" height="15" fill="rgb(250,100,44)" fg:x="2183" fg:w="45"/><text x="19.4025%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::InnerListener&lt;(),alloc::sync::Arc&lt;event_listener::Inner&lt;()&gt;&gt;&gt;&gt; (45 samples, 0.39%)</title><rect x="19.1525%" y="325" width="0.3948%" height="15" fill="rgb(231,147,38)" fg:x="2183" fg:w="45"/><text x="19.4025%" y="335.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop (35 samples, 0.31%)</title><rect x="19.2402%" y="309" width="0.3071%" height="15" fill="rgb(229,8,40)" fg:x="2193" fg:w="35"/><text x="19.4902%" y="319.50"></text></g><g><title>event_listener::_::&lt;impl core::ops::drop::Drop for event_listener::InnerListener&lt;T,B&gt;&gt;::drop::__drop_inner (35 samples, 0.31%)</title><rect x="19.2402%" y="293" width="0.3071%" height="15" fill="rgb(221,135,30)" fg:x="2193" fg:w="35"/><text x="19.4902%" y="303.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::remove (27 samples, 0.24%)</title><rect x="19.3104%" y="277" width="0.2369%" height="15" fill="rgb(249,193,18)" fg:x="2201" fg:w="27"/><text x="19.5604%" y="287.50"></text></g><g><title>event_listener::sys::Inner&lt;T&gt;::remove (8 samples, 0.07%)</title><rect x="19.4771%" y="261" width="0.0702%" height="15" fill="rgb(209,133,39)" fg:x="2220" fg:w="8"/><text x="19.7271%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (11 samples, 0.10%)</title><rect x="19.5473%" y="405" width="0.0965%" height="15" fill="rgb(232,100,14)" fg:x="2228" fg:w="11"/><text x="19.7973%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.10%)</title><rect x="19.5473%" y="389" width="0.0965%" height="15" fill="rgb(224,185,1)" fg:x="2228" fg:w="11"/><text x="19.7973%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (13 samples, 0.11%)</title><rect x="19.6438%" y="405" width="0.1141%" height="15" fill="rgb(223,139,8)" fg:x="2239" fg:w="13"/><text x="19.8938%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.11%)</title><rect x="19.6438%" y="389" width="0.1141%" height="15" fill="rgb(232,213,38)" fg:x="2239" fg:w="13"/><text x="19.8938%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.23%)</title><rect x="19.7666%" y="389" width="0.2281%" height="15" fill="rgb(207,94,22)" fg:x="2253" fg:w="26"/><text x="20.0166%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.23%)</title><rect x="19.7666%" y="373" width="0.2281%" height="15" fill="rgb(219,183,54)" fg:x="2253" fg:w="26"/><text x="20.0166%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.23%)</title><rect x="19.7666%" y="357" width="0.2281%" height="15" fill="rgb(216,185,54)" fg:x="2253" fg:w="26"/><text x="20.0166%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (6 samples, 0.05%)</title><rect x="19.9947%" y="389" width="0.0526%" height="15" fill="rgb(254,217,39)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.05%)</title><rect x="19.9947%" y="373" width="0.0526%" height="15" fill="rgb(240,178,23)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.05%)</title><rect x="19.9947%" y="357" width="0.0526%" height="15" fill="rgb(218,11,47)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="19.9947%" y="341" width="0.0526%" height="15" fill="rgb(218,51,51)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="19.9947%" y="325" width="0.0526%" height="15" fill="rgb(238,126,27)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="335.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="19.9947%" y="309" width="0.0526%" height="15" fill="rgb(249,202,22)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="319.50"></text></g><g><title>__rdl_alloc (6 samples, 0.05%)</title><rect x="19.9947%" y="293" width="0.0526%" height="15" fill="rgb(254,195,49)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.05%)</title><rect x="19.9947%" y="277" width="0.0526%" height="15" fill="rgb(208,123,14)" fg:x="2279" fg:w="6"/><text x="20.2447%" y="287.50"></text></g><g><title>malloc (5 samples, 0.04%)</title><rect x="20.0035%" y="261" width="0.0439%" height="15" fill="rgb(224,200,8)" fg:x="2280" fg:w="5"/><text x="20.2535%" y="271.50"></text></g><g><title>event_listener::Event&lt;T&gt;::inner (16 samples, 0.14%)</title><rect x="20.0474%" y="389" width="0.1404%" height="15" fill="rgb(217,61,36)" fg:x="2285" fg:w="16"/><text x="20.2974%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (15 samples, 0.13%)</title><rect x="20.0562%" y="373" width="0.1316%" height="15" fill="rgb(206,35,45)" fg:x="2286" fg:w="15"/><text x="20.3062%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.13%)</title><rect x="20.0562%" y="357" width="0.1316%" height="15" fill="rgb(217,65,33)" fg:x="2286" fg:w="15"/><text x="20.3062%" y="367.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (2 samples, 0.02%)</title><rect x="20.2053%" y="357" width="0.0175%" height="15" fill="rgb(222,158,48)" fg:x="2303" fg:w="2"/><text x="20.4553%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::sys::ListLock&lt;()&gt;&gt; (9 samples, 0.08%)</title><rect x="20.2228%" y="357" width="0.0790%" height="15" fill="rgb(254,2,54)" fg:x="2305" fg:w="9"/><text x="20.4728%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::sys::Inner&lt;()&gt;&gt;&gt; (8 samples, 0.07%)</title><rect x="20.2316%" y="341" width="0.0702%" height="15" fill="rgb(250,143,38)" fg:x="2306" fg:w="8"/><text x="20.4816%" y="351.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="20.2316%" y="325" width="0.0702%" height="15" fill="rgb(248,25,0)" fg:x="2306" fg:w="8"/><text x="20.4816%" y="335.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (8 samples, 0.07%)</title><rect x="20.2316%" y="309" width="0.0702%" height="15" fill="rgb(206,152,27)" fg:x="2306" fg:w="8"/><text x="20.4816%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (8 samples, 0.07%)</title><rect x="20.2316%" y="293" width="0.0702%" height="15" fill="rgb(240,77,30)" fg:x="2306" fg:w="8"/><text x="20.4816%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (8 samples, 0.07%)</title><rect x="20.2316%" y="277" width="0.0702%" height="15" fill="rgb(231,5,3)" fg:x="2306" fg:w="8"/><text x="20.4816%" y="287.50"></text></g><g><title>event_listener::Event&lt;T&gt;::listen (75 samples, 0.66%)</title><rect x="19.7579%" y="405" width="0.6580%" height="15" fill="rgb(207,226,32)" fg:x="2252" fg:w="75"/><text x="20.0079%" y="415.50"></text></g><g><title>event_listener::InnerListener&lt;T,B&gt;::listen (26 samples, 0.23%)</title><rect x="20.1878%" y="389" width="0.2281%" height="15" fill="rgb(222,207,47)" fg:x="2301" fg:w="26"/><text x="20.4378%" y="399.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::insert (26 samples, 0.23%)</title><rect x="20.1878%" y="373" width="0.2281%" height="15" fill="rgb(229,115,45)" fg:x="2301" fg:w="26"/><text x="20.4378%" y="383.50"></text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::lock (13 samples, 0.11%)</title><rect x="20.3018%" y="357" width="0.1141%" height="15" fill="rgb(224,191,6)" fg:x="2314" fg:w="13"/><text x="20.5518%" y="367.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 0.11%)</title><rect x="20.3018%" y="341" width="0.1141%" height="15" fill="rgb(230,227,24)" fg:x="2314" fg:w="13"/><text x="20.5518%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (13 samples, 0.11%)</title><rect x="20.3018%" y="325" width="0.1141%" height="15" fill="rgb(228,80,19)" fg:x="2314" fg:w="13"/><text x="20.5518%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.11%)</title><rect x="20.3018%" y="309" width="0.1141%" height="15" fill="rgb(247,229,0)" fg:x="2314" fg:w="13"/><text x="20.5518%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.11%)</title><rect x="20.3018%" y="293" width="0.1141%" height="15" fill="rgb(237,194,15)" fg:x="2314" fg:w="13"/><text x="20.5518%" y="303.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="20.4685%" y="325" width="0.0439%" height="15" fill="rgb(219,203,20)" fg:x="2333" fg:w="5"/><text x="20.7185%" y="335.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="20.4685%" y="309" width="0.0439%" height="15" fill="rgb(234,128,8)" fg:x="2333" fg:w="5"/><text x="20.7185%" y="319.50"></text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="20.4685%" y="293" width="0.0439%" height="15" fill="rgb(248,202,8)" fg:x="2333" fg:w="5"/><text x="20.7185%" y="303.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="20.4685%" y="277" width="0.0439%" height="15" fill="rgb(206,104,37)" fg:x="2333" fg:w="5"/><text x="20.7185%" y="287.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (5 samples, 0.04%)</title><rect x="20.4685%" y="261" width="0.0439%" height="15" fill="rgb(223,8,27)" fg:x="2333" fg:w="5"/><text x="20.7185%" y="271.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (3 samples, 0.03%)</title><rect x="20.4861%" y="245" width="0.0263%" height="15" fill="rgb(216,217,28)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (3 samples, 0.03%)</title><rect x="20.4861%" y="229" width="0.0263%" height="15" fill="rgb(249,199,1)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="239.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (3 samples, 0.03%)</title><rect x="20.4861%" y="213" width="0.0263%" height="15" fill="rgb(240,85,17)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="223.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (3 samples, 0.03%)</title><rect x="20.4861%" y="197" width="0.0263%" height="15" fill="rgb(206,108,45)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="207.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (3 samples, 0.03%)</title><rect x="20.4861%" y="181" width="0.0263%" height="15" fill="rgb(245,210,41)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="191.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.03%)</title><rect x="20.4861%" y="165" width="0.0263%" height="15" fill="rgb(206,13,37)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="175.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.03%)</title><rect x="20.4861%" y="149" width="0.0263%" height="15" fill="rgb(250,61,18)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="159.50"></text></g><g><title>__send (3 samples, 0.03%)</title><rect x="20.4861%" y="133" width="0.0263%" height="15" fill="rgb(235,172,48)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="20.4861%" y="117" width="0.0263%" height="15" fill="rgb(249,201,17)" fg:x="2335" fg:w="3"/><text x="20.7361%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (2 samples, 0.02%)</title><rect x="20.5124%" y="325" width="0.0175%" height="15" fill="rgb(219,208,6)" fg:x="2338" fg:w="2"/><text x="20.7624%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (2 samples, 0.02%)</title><rect x="20.5124%" y="309" width="0.0175%" height="15" fill="rgb(248,31,23)" fg:x="2338" fg:w="2"/><text x="20.7624%" y="319.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="20.5124%" y="293" width="0.0175%" height="15" fill="rgb(245,15,42)" fg:x="2338" fg:w="2"/><text x="20.7624%" y="303.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12 samples, 0.11%)</title><rect x="20.4334%" y="389" width="0.1053%" height="15" fill="rgb(222,217,39)" fg:x="2329" fg:w="12"/><text x="20.6834%" y="399.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_frame::_{{closure}} (12 samples, 0.11%)</title><rect x="20.4334%" y="373" width="0.1053%" height="15" fill="rgb(210,219,27)" fg:x="2329" fg:w="12"/><text x="20.6834%" y="383.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (9 samples, 0.08%)</title><rect x="20.4597%" y="357" width="0.0790%" height="15" fill="rgb(252,166,36)" fg:x="2332" fg:w="9"/><text x="20.7097%" y="367.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (8 samples, 0.07%)</title><rect x="20.4685%" y="341" width="0.0702%" height="15" fill="rgb(245,132,34)" fg:x="2333" fg:w="8"/><text x="20.7185%" y="351.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (367 samples, 3.22%)</title><rect x="17.3364%" y="501" width="3.2199%" height="15" fill="rgb(236,54,3)" fg:x="1976" fg:w="367"/><text x="17.5864%" y="511.50">&lt;S ..</text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoStream as futures_core::stream::Stream&gt;::poll_next (367 samples, 3.22%)</title><rect x="17.3364%" y="485" width="3.2199%" height="15" fill="rgb(241,173,43)" fg:x="1976" fg:w="367"/><text x="17.5864%" y="495.50">&lt;wi..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (367 samples, 3.22%)</title><rect x="17.3364%" y="469" width="3.2199%" height="15" fill="rgb(215,190,9)" fg:x="1976" fg:w="367"/><text x="17.5864%" y="479.50">&lt;co..</text></g><g><title>&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (366 samples, 3.21%)</title><rect x="17.3451%" y="453" width="3.2111%" height="15" fill="rgb(242,101,16)" fg:x="1977" fg:w="366"/><text x="17.5951%" y="463.50">&lt;fu..</text></g><g><title>wisp_mux::stream::MuxStreamRead::into_inner_stream::_{{closure}}::_{{closure}} (333 samples, 2.92%)</title><rect x="17.6347%" y="437" width="2.9216%" height="15" fill="rgb(223,190,21)" fg:x="2010" fg:w="333"/><text x="17.8847%" y="447.50">wi..</text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (327 samples, 2.87%)</title><rect x="17.6873%" y="421" width="2.8689%" height="15" fill="rgb(215,228,25)" fg:x="2016" fg:w="327"/><text x="17.9373%" y="431.50">wi..</text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_frame::_{{closure}} (16 samples, 0.14%)</title><rect x="20.4159%" y="405" width="0.1404%" height="15" fill="rgb(225,36,22)" fg:x="2327" fg:w="16"/><text x="20.6659%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::into_async_read::ReadState&lt;bytes::bytes::Bytes&gt;&gt; (2 samples, 0.02%)</title><rect x="20.5562%" y="501" width="0.0175%" height="15" fill="rgb(251,106,46)" fg:x="2343" fg:w="2"/><text x="20.8062%" y="511.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncRead as futures_io::if_std::AsyncBufRead&gt;::poll_fill_buf (381 samples, 3.34%)</title><rect x="17.2574%" y="533" width="3.3427%" height="15" fill="rgb(208,90,1)" fg:x="1967" fg:w="381"/><text x="17.5074%" y="543.50">&lt;wi..</text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncBufRead&gt;::poll_fill_buf (381 samples, 3.34%)</title><rect x="17.2574%" y="517" width="3.3427%" height="15" fill="rgb(243,10,4)" fg:x="1967" fg:w="381"/><text x="17.5074%" y="527.50">&lt;fu..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.03%)</title><rect x="20.5738%" y="501" width="0.0263%" height="15" fill="rgb(212,137,27)" fg:x="2345" fg:w="3"/><text x="20.8238%" y="511.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="20.5738%" y="485" width="0.0263%" height="15" fill="rgb(231,220,49)" fg:x="2345" fg:w="3"/><text x="20.8238%" y="495.50"></text></g><g><title>&lt;futures_util::io::fill_buf::FillBuf&lt;R&gt; as core::future::future::Future&gt;::poll (385 samples, 3.38%)</title><rect x="17.2486%" y="549" width="3.3778%" height="15" fill="rgb(237,96,20)" fg:x="1966" fg:w="385"/><text x="17.4986%" y="559.50">&lt;fu..</text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.03%)</title><rect x="20.6001%" y="533" width="0.0263%" height="15" fill="rgb(239,229,30)" fg:x="2348" fg:w="3"/><text x="20.8501%" y="543.50"></text></g><g><title>core::mem::replace (3 samples, 0.03%)</title><rect x="20.6001%" y="517" width="0.0263%" height="15" fill="rgb(219,65,33)" fg:x="2348" fg:w="3"/><text x="20.8501%" y="527.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="20.6089%" y="501" width="0.0175%" height="15" fill="rgb(243,134,7)" fg:x="2349" fg:w="2"/><text x="20.8589%" y="511.50"></text></g><g><title>[libc.so.6] (69 samples, 0.61%)</title><rect x="20.9949%" y="357" width="0.6054%" height="15" fill="rgb(216,177,54)" fg:x="2393" fg:w="69"/><text x="21.2449%" y="367.50"></text></g><g><title>__send (118 samples, 1.04%)</title><rect x="20.6615%" y="373" width="1.0353%" height="15" fill="rgb(211,160,20)" fg:x="2355" fg:w="118"/><text x="20.9115%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="21.6003%" y="357" width="0.0965%" height="15" fill="rgb(239,85,39)" fg:x="2462" fg:w="11"/><text x="21.8503%" y="367.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (122 samples, 1.07%)</title><rect x="20.6527%" y="469" width="1.0704%" height="15" fill="rgb(232,125,22)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="479.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (122 samples, 1.07%)</title><rect x="20.6527%" y="453" width="1.0704%" height="15" fill="rgb(244,57,34)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="463.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (122 samples, 1.07%)</title><rect x="20.6527%" y="437" width="1.0704%" height="15" fill="rgb(214,203,32)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="447.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (122 samples, 1.07%)</title><rect x="20.6527%" y="421" width="1.0704%" height="15" fill="rgb(207,58,43)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="431.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (122 samples, 1.07%)</title><rect x="20.6527%" y="405" width="1.0704%" height="15" fill="rgb(215,193,15)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="415.50"></text></g><g><title>std::sys_common::net::TcpStream::write (122 samples, 1.07%)</title><rect x="20.6527%" y="389" width="1.0704%" height="15" fill="rgb(232,15,44)" fg:x="2354" fg:w="122"/><text x="20.9027%" y="399.50"></text></g><g><title>std::sys::pal::unix::cvt (3 samples, 0.03%)</title><rect x="21.6968%" y="373" width="0.0263%" height="15" fill="rgb(212,3,48)" fg:x="2473" fg:w="3"/><text x="21.9468%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.22%)</title><rect x="21.7319%" y="421" width="0.2193%" height="15" fill="rgb(218,128,7)" fg:x="2477" fg:w="25"/><text x="21.9819%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.22%)</title><rect x="21.7319%" y="405" width="0.2193%" height="15" fill="rgb(226,216,39)" fg:x="2477" fg:w="25"/><text x="21.9819%" y="415.50"></text></g><g><title>&lt;tokio::io::util::write::Write&lt;W&gt; as core::future::future::Future&gt;::poll (154 samples, 1.35%)</title><rect x="20.6264%" y="549" width="1.3511%" height="15" fill="rgb(243,47,51)" fg:x="2351" fg:w="154"/><text x="20.8764%" y="559.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (154 samples, 1.35%)</title><rect x="20.6264%" y="533" width="1.3511%" height="15" fill="rgb(241,183,40)" fg:x="2351" fg:w="154"/><text x="20.8764%" y="543.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (154 samples, 1.35%)</title><rect x="20.6264%" y="517" width="1.3511%" height="15" fill="rgb(231,217,32)" fg:x="2351" fg:w="154"/><text x="20.8764%" y="527.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (154 samples, 1.35%)</title><rect x="20.6264%" y="501" width="1.3511%" height="15" fill="rgb(229,61,38)" fg:x="2351" fg:w="154"/><text x="20.8764%" y="511.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (153 samples, 1.34%)</title><rect x="20.6352%" y="485" width="1.3423%" height="15" fill="rgb(225,210,5)" fg:x="2352" fg:w="153"/><text x="20.8852%" y="495.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (29 samples, 0.25%)</title><rect x="21.7231%" y="469" width="0.2544%" height="15" fill="rgb(231,79,45)" fg:x="2476" fg:w="29"/><text x="21.9731%" y="479.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (29 samples, 0.25%)</title><rect x="21.7231%" y="453" width="0.2544%" height="15" fill="rgb(224,100,7)" fg:x="2476" fg:w="29"/><text x="21.9731%" y="463.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (28 samples, 0.25%)</title><rect x="21.7319%" y="437" width="0.2457%" height="15" fill="rgb(241,198,18)" fg:x="2477" fg:w="28"/><text x="21.9819%" y="447.50"></text></g><g><title>tokio::util::bit::Pack::unpack (2 samples, 0.02%)</title><rect x="21.9600%" y="421" width="0.0175%" height="15" fill="rgb(252,97,53)" fg:x="2503" fg:w="2"/><text x="22.2100%" y="431.50"></text></g><g><title>tokio::util::bit::unpack (2 samples, 0.02%)</title><rect x="21.9600%" y="405" width="0.0175%" height="15" fill="rgb(220,88,7)" fg:x="2503" fg:w="2"/><text x="22.2100%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (212 samples, 1.86%)</title><rect x="22.0302%" y="293" width="1.8600%" height="15" fill="rgb(213,176,14)" fg:x="2511" fg:w="212"/><text x="22.2802%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (212 samples, 1.86%)</title><rect x="22.0302%" y="277" width="1.8600%" height="15" fill="rgb(246,73,7)" fg:x="2511" fg:w="212"/><text x="22.2802%" y="287.50">a..</text></g><g><title>__rdl_dealloc (212 samples, 1.86%)</title><rect x="22.0302%" y="261" width="1.8600%" height="15" fill="rgb(245,64,36)" fg:x="2511" fg:w="212"/><text x="22.2802%" y="271.50">_..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (212 samples, 1.86%)</title><rect x="22.0302%" y="245" width="1.8600%" height="15" fill="rgb(245,80,10)" fg:x="2511" fg:w="212"/><text x="22.2802%" y="255.50">s..</text></g><g><title>cfree (212 samples, 1.86%)</title><rect x="22.0302%" y="229" width="1.8600%" height="15" fill="rgb(232,107,50)" fg:x="2511" fg:w="212"/><text x="22.2802%" y="239.50">c..</text></g><g><title>[libc.so.6] (190 samples, 1.67%)</title><rect x="22.2232%" y="213" width="1.6670%" height="15" fill="rgb(253,3,0)" fg:x="2533" fg:w="190"/><text x="22.4732%" y="223.50"></text></g><g><title>[libc.so.6] (158 samples, 1.39%)</title><rect x="22.5039%" y="197" width="1.3862%" height="15" fill="rgb(212,99,53)" fg:x="2565" fg:w="158"/><text x="22.7539%" y="207.50"></text></g><g><title>[libc.so.6] (133 samples, 1.17%)</title><rect x="22.7233%" y="181" width="1.1669%" height="15" fill="rgb(249,111,54)" fg:x="2590" fg:w="133"/><text x="22.9733%" y="191.50"></text></g><g><title>[libc.so.6] (8 samples, 0.07%)</title><rect x="23.8200%" y="165" width="0.0702%" height="15" fill="rgb(249,55,30)" fg:x="2715" fg:w="8"/><text x="24.0700%" y="175.50"></text></g><g><title>core::mem::drop (214 samples, 1.88%)</title><rect x="22.0302%" y="389" width="1.8775%" height="15" fill="rgb(237,47,42)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (214 samples, 1.88%)</title><rect x="22.0302%" y="373" width="1.8775%" height="15" fill="rgb(211,20,18)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (214 samples, 1.88%)</title><rect x="22.0302%" y="357" width="1.8775%" height="15" fill="rgb(231,203,46)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (214 samples, 1.88%)</title><rect x="22.0302%" y="341" width="1.8775%" height="15" fill="rgb(237,142,3)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (214 samples, 1.88%)</title><rect x="22.0302%" y="325" width="1.8775%" height="15" fill="rgb(241,107,1)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (214 samples, 1.88%)</title><rect x="22.0302%" y="309" width="1.8775%" height="15" fill="rgb(229,83,13)" fg:x="2511" fg:w="214"/><text x="22.2802%" y="319.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="23.8902%" y="293" width="0.0175%" height="15" fill="rgb(241,91,40)" fg:x="2723" fg:w="2"/><text x="24.1402%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.28%)</title><rect x="23.9077%" y="389" width="0.2808%" height="15" fill="rgb(225,3,45)" fg:x="2725" fg:w="32"/><text x="24.1577%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.28%)</title><rect x="23.9077%" y="373" width="0.2808%" height="15" fill="rgb(244,223,14)" fg:x="2725" fg:w="32"/><text x="24.1577%" y="383.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (251 samples, 2.20%)</title><rect x="22.0214%" y="453" width="2.2021%" height="15" fill="rgb(224,124,37)" fg:x="2510" fg:w="251"/><text x="22.2714%" y="463.50">b..</text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (251 samples, 2.20%)</title><rect x="22.0214%" y="437" width="2.2021%" height="15" fill="rgb(251,171,30)" fg:x="2510" fg:w="251"/><text x="22.2714%" y="447.50">&lt;..</text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (251 samples, 2.20%)</title><rect x="22.0214%" y="421" width="2.2021%" height="15" fill="rgb(236,46,54)" fg:x="2510" fg:w="251"/><text x="22.2714%" y="431.50">b..</text></g><g><title>bytes::bytes_mut::release_shared (251 samples, 2.20%)</title><rect x="22.0214%" y="405" width="2.2021%" height="15" fill="rgb(245,213,5)" fg:x="2510" fg:w="251"/><text x="22.2714%" y="415.50">b..</text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.04%)</title><rect x="24.1885%" y="389" width="0.0351%" height="15" fill="rgb(230,144,27)" fg:x="2757" fg:w="4"/><text x="24.4385%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="24.1885%" y="373" width="0.0351%" height="15" fill="rgb(220,86,6)" fg:x="2757" fg:w="4"/><text x="24.4385%" y="383.50"></text></g><g><title>epoxy_server::stream::copy_read_fast::_{{closure}} (1,014 samples, 8.90%)</title><rect x="17.0118%" y="565" width="8.8963%" height="15" fill="rgb(240,20,13)" fg:x="1939" fg:w="1014"/><text x="17.2618%" y="575.50">epoxy_server:..</text></g><g><title>futures_util::io::AsyncBufReadExt::consume_unpin (448 samples, 3.93%)</title><rect x="21.9775%" y="549" width="3.9305%" height="15" fill="rgb(217,89,34)" fg:x="2505" fg:w="448"/><text x="22.2275%" y="559.50">futu..</text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncRead as futures_io::if_std::AsyncBufRead&gt;::consume (448 samples, 3.93%)</title><rect x="21.9775%" y="533" width="3.9305%" height="15" fill="rgb(229,13,5)" fg:x="2505" fg:w="448"/><text x="22.2275%" y="543.50">&lt;wis..</text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncBufRead&gt;::consume (448 samples, 3.93%)</title><rect x="21.9775%" y="517" width="3.9305%" height="15" fill="rgb(244,67,35)" fg:x="2505" fg:w="448"/><text x="22.2275%" y="527.50">&lt;fut..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::into_async_read::ReadState&lt;bytes::bytes::Bytes&gt;&gt; (444 samples, 3.90%)</title><rect x="22.0126%" y="501" width="3.8954%" height="15" fill="rgb(221,40,2)" fg:x="2509" fg:w="444"/><text x="22.2626%" y="511.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (444 samples, 3.90%)</title><rect x="22.0126%" y="485" width="3.8954%" height="15" fill="rgb(237,157,21)" fg:x="2509" fg:w="444"/><text x="22.2626%" y="495.50">core..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (444 samples, 3.90%)</title><rect x="22.0126%" y="469" width="3.8954%" height="15" fill="rgb(222,94,11)" fg:x="2509" fg:w="444"/><text x="22.2626%" y="479.50">&lt;byt..</text></g><g><title>cfree (192 samples, 1.68%)</title><rect x="24.2235%" y="453" width="1.6845%" height="15" fill="rgb(249,113,6)" fg:x="2761" fg:w="192"/><text x="24.4735%" y="463.50"></text></g><g><title>[libc.so.6] (154 samples, 1.35%)</title><rect x="24.5569%" y="437" width="1.3511%" height="15" fill="rgb(238,137,36)" fg:x="2799" fg:w="154"/><text x="24.8069%" y="447.50"></text></g><g><title>[libc.so.6] (93 samples, 0.82%)</title><rect x="25.0921%" y="421" width="0.8159%" height="15" fill="rgb(210,102,26)" fg:x="2860" fg:w="93"/><text x="25.3421%" y="431.50"></text></g><g><title>[libc.so.6] (79 samples, 0.69%)</title><rect x="25.2149%" y="405" width="0.6931%" height="15" fill="rgb(218,30,30)" fg:x="2874" fg:w="79"/><text x="25.4649%" y="415.50"></text></g><g><title>[libc.so.6] (8 samples, 0.07%)</title><rect x="25.8379%" y="389" width="0.0702%" height="15" fill="rgb(214,67,26)" fg:x="2945" fg:w="8"/><text x="26.0879%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.04%)</title><rect x="26.4432%" y="485" width="0.0351%" height="15" fill="rgb(251,9,53)" fg:x="3014" fg:w="4"/><text x="26.6932%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (4 samples, 0.04%)</title><rect x="26.4432%" y="469" width="0.0351%" height="15" fill="rgb(228,204,25)" fg:x="3014" fg:w="4"/><text x="26.6932%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.04%)</title><rect x="26.4432%" y="453" width="0.0351%" height="15" fill="rgb(207,153,8)" fg:x="3014" fg:w="4"/><text x="26.6932%" y="463.50"></text></g><g><title>[libc.so.6] (231 samples, 2.03%)</title><rect x="27.7856%" y="309" width="2.0267%" height="15" fill="rgb(242,9,16)" fg:x="3167" fg:w="231"/><text x="28.0356%" y="319.50">[..</text></g><g><title>recv (374 samples, 3.28%)</title><rect x="26.8205%" y="325" width="3.2813%" height="15" fill="rgb(217,211,10)" fg:x="3057" fg:w="374"/><text x="27.0705%" y="335.50">recv</text></g><g><title>[unknown] (33 samples, 0.29%)</title><rect x="29.8122%" y="309" width="0.2895%" height="15" fill="rgb(219,228,52)" fg:x="3398" fg:w="33"/><text x="30.0622%" y="319.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (376 samples, 3.30%)</title><rect x="26.8205%" y="453" width="3.2988%" height="15" fill="rgb(231,92,29)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="463.50">&lt;&amp;m..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (376 samples, 3.30%)</title><rect x="26.8205%" y="437" width="3.2988%" height="15" fill="rgb(232,8,23)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="447.50">mio..</text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (376 samples, 3.30%)</title><rect x="26.8205%" y="421" width="3.2988%" height="15" fill="rgb(216,211,34)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="431.50">mio..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (376 samples, 3.30%)</title><rect x="26.8205%" y="405" width="3.2988%" height="15" fill="rgb(236,151,0)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="415.50">&lt;&amp;m..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (376 samples, 3.30%)</title><rect x="26.8205%" y="389" width="3.2988%" height="15" fill="rgb(209,168,3)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="399.50">&lt;&amp;s..</text></g><g><title>std::sys_common::net::TcpStream::read (376 samples, 3.30%)</title><rect x="26.8205%" y="373" width="3.2988%" height="15" fill="rgb(208,129,28)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="383.50">std..</text></g><g><title>std::sys::pal::unix::net::Socket::read (376 samples, 3.30%)</title><rect x="26.8205%" y="357" width="3.2988%" height="15" fill="rgb(229,78,22)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="367.50">std..</text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (376 samples, 3.30%)</title><rect x="26.8205%" y="341" width="3.2988%" height="15" fill="rgb(228,187,13)" fg:x="3057" fg:w="376"/><text x="27.0705%" y="351.50">std..</text></g><g><title>std::sys::pal::unix::cvt (2 samples, 0.02%)</title><rect x="30.1018%" y="325" width="0.0175%" height="15" fill="rgb(240,119,24)" fg:x="3431" fg:w="2"/><text x="30.3518%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="30.1193%" y="453" width="0.0175%" height="15" fill="rgb(209,194,42)" fg:x="3433" fg:w="2"/><text x="30.3693%" y="463.50"></text></g><g><title>std::io::error::Error::kind (8 samples, 0.07%)</title><rect x="30.1369%" y="453" width="0.0702%" height="15" fill="rgb(247,200,46)" fg:x="3435" fg:w="8"/><text x="30.3869%" y="463.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (8 samples, 0.07%)</title><rect x="30.1369%" y="437" width="0.0702%" height="15" fill="rgb(218,76,16)" fg:x="3435" fg:w="8"/><text x="30.3869%" y="447.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (8 samples, 0.07%)</title><rect x="30.1369%" y="421" width="0.0702%" height="15" fill="rgb(225,21,48)" fg:x="3435" fg:w="8"/><text x="30.3869%" y="431.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (2 samples, 0.02%)</title><rect x="30.2071%" y="453" width="0.0175%" height="15" fill="rgb(239,223,50)" fg:x="3443" fg:w="2"/><text x="30.4571%" y="463.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::set_filled (2 samples, 0.02%)</title><rect x="30.2071%" y="437" width="0.0175%" height="15" fill="rgb(244,45,21)" fg:x="3443" fg:w="2"/><text x="30.4571%" y="447.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (3 samples, 0.03%)</title><rect x="30.2246%" y="453" width="0.0263%" height="15" fill="rgb(232,33,43)" fg:x="3445" fg:w="3"/><text x="30.4746%" y="463.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (2 samples, 0.02%)</title><rect x="30.2509%" y="453" width="0.0175%" height="15" fill="rgb(209,8,3)" fg:x="3448" fg:w="2"/><text x="30.5009%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.02%)</title><rect x="30.2509%" y="437" width="0.0175%" height="15" fill="rgb(214,25,53)" fg:x="3448" fg:w="2"/><text x="30.5009%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="30.2509%" y="421" width="0.0175%" height="15" fill="rgb(254,186,54)" fg:x="3448" fg:w="2"/><text x="30.5009%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (3 samples, 0.03%)</title><rect x="30.3474%" y="421" width="0.0263%" height="15" fill="rgb(208,174,49)" fg:x="3459" fg:w="3"/><text x="30.5974%" y="431.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="30.3474%" y="405" width="0.0263%" height="15" fill="rgb(233,191,51)" fg:x="3459" fg:w="3"/><text x="30.5974%" y="415.50"></text></g><g><title>tokio::runtime::coop::Budget::is_unconstrained (3 samples, 0.03%)</title><rect x="30.3474%" y="389" width="0.0263%" height="15" fill="rgb(222,134,10)" fg:x="3459" fg:w="3"/><text x="30.5974%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.03%)</title><rect x="30.3474%" y="373" width="0.0263%" height="15" fill="rgb(230,226,20)" fg:x="3459" fg:w="3"/><text x="30.5974%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.03%)</title><rect x="30.3474%" y="357" width="0.0263%" height="15" fill="rgb(251,111,25)" fg:x="3459" fg:w="3"/><text x="30.5974%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.05%)</title><rect x="30.3737%" y="373" width="0.0526%" height="15" fill="rgb(224,40,46)" fg:x="3462" fg:w="6"/><text x="30.6237%" y="383.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (6 samples, 0.05%)</title><rect x="30.3737%" y="357" width="0.0526%" height="15" fill="rgb(236,108,47)" fg:x="3462" fg:w="6"/><text x="30.6237%" y="367.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (6 samples, 0.05%)</title><rect x="30.3737%" y="341" width="0.0526%" height="15" fill="rgb(234,93,0)" fg:x="3462" fg:w="6"/><text x="30.6237%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.04%)</title><rect x="30.3825%" y="325" width="0.0439%" height="15" fill="rgb(224,213,32)" fg:x="3463" fg:w="5"/><text x="30.6325%" y="335.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.10%)</title><rect x="30.3737%" y="421" width="0.0965%" height="15" fill="rgb(251,11,48)" fg:x="3462" fg:w="11"/><text x="30.6237%" y="431.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.10%)</title><rect x="30.3737%" y="405" width="0.0965%" height="15" fill="rgb(236,173,5)" fg:x="3462" fg:w="11"/><text x="30.6237%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.10%)</title><rect x="30.3737%" y="389" width="0.0965%" height="15" fill="rgb(230,95,12)" fg:x="3462" fg:w="11"/><text x="30.6237%" y="399.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (5 samples, 0.04%)</title><rect x="30.4264%" y="373" width="0.0439%" height="15" fill="rgb(232,209,1)" fg:x="3468" fg:w="5"/><text x="30.6764%" y="383.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (5 samples, 0.04%)</title><rect x="30.4264%" y="357" width="0.0439%" height="15" fill="rgb(232,6,1)" fg:x="3468" fg:w="5"/><text x="30.6764%" y="367.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (5 samples, 0.04%)</title><rect x="30.4264%" y="341" width="0.0439%" height="15" fill="rgb(210,224,50)" fg:x="3468" fg:w="5"/><text x="30.6764%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.27%)</title><rect x="30.5229%" y="405" width="0.2720%" height="15" fill="rgb(228,127,35)" fg:x="3479" fg:w="31"/><text x="30.7729%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.27%)</title><rect x="30.5229%" y="389" width="0.2720%" height="15" fill="rgb(245,102,45)" fg:x="3479" fg:w="31"/><text x="30.7729%" y="399.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (501 samples, 4.40%)</title><rect x="26.4169%" y="501" width="4.3955%" height="15" fill="rgb(214,1,49)" fg:x="3011" fg:w="501"/><text x="26.6669%" y="511.50">&lt;toki..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (494 samples, 4.33%)</title><rect x="26.4783%" y="485" width="4.3341%" height="15" fill="rgb(226,163,40)" fg:x="3018" fg:w="494"/><text x="26.7283%" y="495.50">tokio..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (461 samples, 4.04%)</title><rect x="26.7679%" y="469" width="4.0446%" height="15" fill="rgb(239,212,28)" fg:x="3051" fg:w="461"/><text x="27.0179%" y="479.50">toki..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (62 samples, 0.54%)</title><rect x="30.2685%" y="453" width="0.5440%" height="15" fill="rgb(220,20,13)" fg:x="3450" fg:w="62"/><text x="30.5185%" y="463.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (58 samples, 0.51%)</title><rect x="30.3036%" y="437" width="0.5089%" height="15" fill="rgb(210,164,35)" fg:x="3454" fg:w="58"/><text x="30.5536%" y="447.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (39 samples, 0.34%)</title><rect x="30.4703%" y="421" width="0.3422%" height="15" fill="rgb(248,109,41)" fg:x="3473" fg:w="39"/><text x="30.7203%" y="431.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (6 samples, 0.05%)</title><rect x="30.8124%" y="501" width="0.0526%" height="15" fill="rgb(238,23,50)" fg:x="3512" fg:w="6"/><text x="31.0624%" y="511.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::new (2 samples, 0.02%)</title><rect x="30.8651%" y="501" width="0.0175%" height="15" fill="rgb(211,48,49)" fg:x="3518" fg:w="2"/><text x="31.1151%" y="511.50"></text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_fill_buf (521 samples, 4.57%)</title><rect x="26.3204%" y="517" width="4.5710%" height="15" fill="rgb(223,36,21)" fg:x="3000" fg:w="521"/><text x="26.5704%" y="527.50">tokio..</text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (24 samples, 0.21%)</title><rect x="31.1458%" y="421" width="0.2106%" height="15" fill="rgb(207,123,46)" fg:x="3550" fg:w="24"/><text x="31.3958%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::sink_unfold::UnfoldState&lt;wisp_mux::stream::MuxStreamWrite,wisp_mux::stream::MuxStreamWrite::into_inner_sink::{{closure}}::{{closure}}&gt;&gt; (5 samples, 0.04%)</title><rect x="31.3125%" y="405" width="0.0439%" height="15" fill="rgb(240,218,32)" fg:x="3569" fg:w="5"/><text x="31.5625%" y="415.50"></text></g><g><title>wisp_mux::sink_unfold::UnfoldState&lt;T,Fut&gt;::project_future (2 samples, 0.02%)</title><rect x="31.3564%" y="421" width="0.0175%" height="15" fill="rgb(252,5,43)" fg:x="3574" fg:w="2"/><text x="31.6064%" y="431.50"></text></g><g><title>wisp_mux::sink_unfold::_::&lt;impl wisp_mux::sink_unfold::UnfoldState&lt;T,Fut&gt;&gt;::project (2 samples, 0.02%)</title><rect x="31.3564%" y="405" width="0.0175%" height="15" fill="rgb(252,84,19)" fg:x="3574" fg:w="2"/><text x="31.6064%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="31.7512%" y="389" width="0.0175%" height="15" fill="rgb(243,152,39)" fg:x="3619" fg:w="2"/><text x="32.0012%" y="399.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="31.9267%" y="325" width="0.0439%" height="15" fill="rgb(234,160,15)" fg:x="3639" fg:w="5"/><text x="32.1767%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.02%)</title><rect x="31.9705%" y="309" width="0.0175%" height="15" fill="rgb(237,34,20)" fg:x="3644" fg:w="2"/><text x="32.2205%" y="319.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (11 samples, 0.10%)</title><rect x="31.9705%" y="325" width="0.0965%" height="15" fill="rgb(229,97,13)" fg:x="3644" fg:w="11"/><text x="32.2205%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.08%)</title><rect x="31.9881%" y="309" width="0.0790%" height="15" fill="rgb(234,71,50)" fg:x="3646" fg:w="9"/><text x="32.2381%" y="319.50"></text></g><g><title>[libc.so.6] (9 samples, 0.08%)</title><rect x="31.9881%" y="293" width="0.0790%" height="15" fill="rgb(253,155,4)" fg:x="3646" fg:w="9"/><text x="32.2381%" y="303.50"></text></g><g><title>&lt;wisp_mux::packet::PacketType as wisp_mux::packet::Encode&gt;::encode (26 samples, 0.23%)</title><rect x="31.8740%" y="341" width="0.2281%" height="15" fill="rgb(222,185,37)" fg:x="3633" fg:w="26"/><text x="32.1240%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::Payload&gt; (4 samples, 0.04%)</title><rect x="32.0670%" y="325" width="0.0351%" height="15" fill="rgb(251,177,13)" fg:x="3655" fg:w="4"/><text x="32.3170%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (4 samples, 0.04%)</title><rect x="32.0670%" y="309" width="0.0351%" height="15" fill="rgb(250,179,40)" fg:x="3655" fg:w="4"/><text x="32.3170%" y="319.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="32.0670%" y="293" width="0.0351%" height="15" fill="rgb(242,44,2)" fg:x="3655" fg:w="4"/><text x="32.3170%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (6 samples, 0.05%)</title><rect x="32.1109%" y="293" width="0.0526%" height="15" fill="rgb(216,177,13)" fg:x="3660" fg:w="6"/><text x="32.3609%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (4 samples, 0.04%)</title><rect x="32.1284%" y="277" width="0.0351%" height="15" fill="rgb(216,106,43)" fg:x="3662" fg:w="4"/><text x="32.3784%" y="287.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u32_le (9 samples, 0.08%)</title><rect x="32.1021%" y="341" width="0.0790%" height="15" fill="rgb(216,183,2)" fg:x="3659" fg:w="9"/><text x="32.3521%" y="351.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (9 samples, 0.08%)</title><rect x="32.1021%" y="325" width="0.0790%" height="15" fill="rgb(249,75,3)" fg:x="3659" fg:w="9"/><text x="32.3521%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (9 samples, 0.08%)</title><rect x="32.1021%" y="309" width="0.0790%" height="15" fill="rgb(219,67,39)" fg:x="3659" fg:w="9"/><text x="32.3521%" y="319.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_u8 (3 samples, 0.03%)</title><rect x="32.1811%" y="341" width="0.0263%" height="15" fill="rgb(253,228,2)" fg:x="3668" fg:w="3"/><text x="32.4311%" y="351.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (3 samples, 0.03%)</title><rect x="32.1811%" y="325" width="0.0263%" height="15" fill="rgb(235,138,27)" fg:x="3668" fg:w="3"/><text x="32.4311%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (3 samples, 0.03%)</title><rect x="32.1811%" y="309" width="0.0263%" height="15" fill="rgb(236,97,51)" fg:x="3668" fg:w="3"/><text x="32.4311%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="32.1899%" y="293" width="0.0175%" height="15" fill="rgb(240,80,30)" fg:x="3669" fg:w="2"/><text x="32.4399%" y="303.50"></text></g><g><title>&lt;wisp_mux::packet::Packet as wisp_mux::packet::Encode&gt;::encode (39 samples, 0.34%)</title><rect x="31.8740%" y="357" width="0.3422%" height="15" fill="rgb(230,178,19)" fg:x="3633" fg:w="39"/><text x="32.1240%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (39 samples, 0.34%)</title><rect x="32.2162%" y="341" width="0.3422%" height="15" fill="rgb(210,190,27)" fg:x="3672" fg:w="39"/><text x="32.4662%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.34%)</title><rect x="32.2162%" y="325" width="0.3422%" height="15" fill="rgb(222,107,31)" fg:x="3672" fg:w="39"/><text x="32.4662%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.34%)</title><rect x="32.2162%" y="309" width="0.3422%" height="15" fill="rgb(216,127,34)" fg:x="3672" fg:w="39"/><text x="32.4662%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (39 samples, 0.34%)</title><rect x="32.2162%" y="293" width="0.3422%" height="15" fill="rgb(234,116,52)" fg:x="3672" fg:w="39"/><text x="32.4662%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.32%)</title><rect x="32.2337%" y="277" width="0.3246%" height="15" fill="rgb(222,124,15)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.32%)</title><rect x="32.2337%" y="261" width="0.3246%" height="15" fill="rgb(231,179,28)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="271.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.32%)</title><rect x="32.2337%" y="245" width="0.3246%" height="15" fill="rgb(226,93,45)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="255.50"></text></g><g><title>__rdl_alloc (37 samples, 0.32%)</title><rect x="32.2337%" y="229" width="0.3246%" height="15" fill="rgb(215,8,51)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (37 samples, 0.32%)</title><rect x="32.2337%" y="213" width="0.3246%" height="15" fill="rgb(223,106,5)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="223.50"></text></g><g><title>malloc (37 samples, 0.32%)</title><rect x="32.2337%" y="197" width="0.3246%" height="15" fill="rgb(250,191,5)" fg:x="3674" fg:w="37"/><text x="32.4837%" y="207.50"></text></g><g><title>core::cmp::min (3 samples, 0.03%)</title><rect x="32.6022%" y="309" width="0.0263%" height="15" fill="rgb(242,132,44)" fg:x="3716" fg:w="3"/><text x="32.8522%" y="319.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.03%)</title><rect x="32.6022%" y="293" width="0.0263%" height="15" fill="rgb(251,152,29)" fg:x="3716" fg:w="3"/><text x="32.8522%" y="303.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.03%)</title><rect x="32.6022%" y="277" width="0.0263%" height="15" fill="rgb(218,179,5)" fg:x="3716" fg:w="3"/><text x="32.8522%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (52 samples, 0.46%)</title><rect x="32.2162%" y="357" width="0.4562%" height="15" fill="rgb(227,67,19)" fg:x="3672" fg:w="52"/><text x="32.4662%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::from_vec (13 samples, 0.11%)</title><rect x="32.5583%" y="341" width="0.1141%" height="15" fill="rgb(233,119,31)" fg:x="3711" fg:w="13"/><text x="32.8083%" y="351.50"></text></g><g><title>bytes::bytes_mut::original_capacity_to_repr (9 samples, 0.08%)</title><rect x="32.5934%" y="325" width="0.0790%" height="15" fill="rgb(241,120,22)" fg:x="3715" fg:w="9"/><text x="32.8434%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::leading_zeros (5 samples, 0.04%)</title><rect x="32.6285%" y="309" width="0.0439%" height="15" fill="rgb(224,102,30)" fg:x="3719" fg:w="5"/><text x="32.8785%" y="319.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for wisp_mux::ws::Frame&gt;::from (111 samples, 0.97%)</title><rect x="31.7687%" y="389" width="0.9739%" height="15" fill="rgb(210,164,37)" fg:x="3621" fg:w="111"/><text x="32.0187%" y="399.50"></text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (108 samples, 0.95%)</title><rect x="31.7951%" y="373" width="0.9475%" height="15" fill="rgb(226,191,16)" fg:x="3624" fg:w="108"/><text x="32.0451%" y="383.50"></text></g><g><title>wisp_mux::packet::PacketType::get_packet_size (8 samples, 0.07%)</title><rect x="32.6724%" y="357" width="0.0702%" height="15" fill="rgb(214,40,45)" fg:x="3724" fg:w="8"/><text x="32.9224%" y="367.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="32.7250%" y="341" width="0.0175%" height="15" fill="rgb(244,29,26)" fg:x="3730" fg:w="2"/><text x="32.9750%" y="351.50"></text></g><g><title>&lt;wisp_mux::Role as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="33.1198%" y="373" width="0.0175%" height="15" fill="rgb(216,16,5)" fg:x="3775" fg:w="2"/><text x="33.3698%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::LockedWebSocketWrite::write_split::{{closure}}&gt; (5 samples, 0.04%)</title><rect x="33.1374%" y="373" width="0.0439%" height="15" fill="rgb(249,76,35)" fg:x="3777" fg:w="5"/><text x="33.3874%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (4 samples, 0.04%)</title><rect x="33.1813%" y="373" width="0.0351%" height="15" fill="rgb(207,11,44)" fg:x="3782" fg:w="4"/><text x="33.4313%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="33.1813%" y="357" width="0.0351%" height="15" fill="rgb(228,190,49)" fg:x="3782" fg:w="4"/><text x="33.4313%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WebSocketWrite&lt;tokio_util::either::Either&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,tokio::net::unix::split_owned::OwnedWriteHalf&gt;&gt;::write_frame::{{closure}}&gt; (4 samples, 0.04%)</title><rect x="35.1816%" y="325" width="0.0351%" height="15" fill="rgb(214,173,12)" fg:x="4010" fg:w="4"/><text x="35.4316%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio_util::either::Either&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,tokio::net::unix::split_owned::OwnedWriteHalf&gt;&gt;::{{closure}}&gt; (6 samples, 0.05%)</title><rect x="35.9624%" y="309" width="0.0526%" height="15" fill="rgb(218,26,35)" fg:x="4099" fg:w="6"/><text x="36.2124%" y="319.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (24 samples, 0.21%)</title><rect x="37.0065%" y="293" width="0.2106%" height="15" fill="rgb(220,200,19)" fg:x="4218" fg:w="24"/><text x="37.2565%" y="303.50"></text></g><g><title>[libc.so.6] (225 samples, 1.97%)</title><rect x="38.4541%" y="85" width="1.9740%" height="15" fill="rgb(239,95,49)" fg:x="4383" fg:w="225"/><text x="38.7041%" y="95.50">[..</text></g><g><title>__send (366 samples, 3.21%)</title><rect x="37.5768%" y="101" width="3.2111%" height="15" fill="rgb(235,85,53)" fg:x="4283" fg:w="366"/><text x="37.8268%" y="111.50">__s..</text></g><g><title>[unknown] (41 samples, 0.36%)</title><rect x="40.4281%" y="85" width="0.3597%" height="15" fill="rgb(233,133,31)" fg:x="4608" fg:w="41"/><text x="40.6781%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (387 samples, 3.40%)</title><rect x="37.5680%" y="197" width="3.3953%" height="15" fill="rgb(218,25,20)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="207.50">&lt;&amp;m..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (387 samples, 3.40%)</title><rect x="37.5680%" y="181" width="3.3953%" height="15" fill="rgb(252,210,38)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="191.50">mio..</text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (387 samples, 3.40%)</title><rect x="37.5680%" y="165" width="3.3953%" height="15" fill="rgb(242,134,21)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="175.50">mio..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (387 samples, 3.40%)</title><rect x="37.5680%" y="149" width="3.3953%" height="15" fill="rgb(213,28,48)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="159.50">&lt;&amp;m..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (387 samples, 3.40%)</title><rect x="37.5680%" y="133" width="3.3953%" height="15" fill="rgb(250,196,2)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="143.50">&lt;&amp;s..</text></g><g><title>std::sys_common::net::TcpStream::write (387 samples, 3.40%)</title><rect x="37.5680%" y="117" width="3.3953%" height="15" fill="rgb(227,5,17)" fg:x="4282" fg:w="387"/><text x="37.8180%" y="127.50">std..</text></g><g><title>std::sys::pal::unix::cvt (20 samples, 0.18%)</title><rect x="40.7879%" y="101" width="0.1755%" height="15" fill="rgb(221,226,24)" fg:x="4649" fg:w="20"/><text x="41.0379%" y="111.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="40.9633%" y="197" width="0.0175%" height="15" fill="rgb(211,5,48)" fg:x="4669" fg:w="2"/><text x="41.2133%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (2 samples, 0.02%)</title><rect x="41.0335%" y="165" width="0.0175%" height="15" fill="rgb(219,150,6)" fg:x="4677" fg:w="2"/><text x="41.2835%" y="175.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="41.0335%" y="149" width="0.0175%" height="15" fill="rgb(251,46,16)" fg:x="4677" fg:w="2"/><text x="41.2835%" y="159.50"></text></g><g><title>tokio::runtime::coop::Budget::is_unconstrained (2 samples, 0.02%)</title><rect x="41.0335%" y="133" width="0.0175%" height="15" fill="rgb(220,204,40)" fg:x="4677" fg:w="2"/><text x="41.2835%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.02%)</title><rect x="41.0335%" y="117" width="0.0175%" height="15" fill="rgb(211,85,2)" fg:x="4677" fg:w="2"/><text x="41.2835%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="41.0335%" y="101" width="0.0175%" height="15" fill="rgb(229,17,7)" fg:x="4677" fg:w="2"/><text x="41.2835%" y="111.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="41.0511%" y="117" width="0.0175%" height="15" fill="rgb(239,72,28)" fg:x="4679" fg:w="2"/><text x="41.3011%" y="127.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (2 samples, 0.02%)</title><rect x="41.0511%" y="101" width="0.0175%" height="15" fill="rgb(230,47,54)" fg:x="4679" fg:w="2"/><text x="41.3011%" y="111.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="41.0511%" y="85" width="0.0175%" height="15" fill="rgb(214,50,8)" fg:x="4679" fg:w="2"/><text x="41.3011%" y="95.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="41.0511%" y="69" width="0.0175%" height="15" fill="rgb(216,198,43)" fg:x="4679" fg:w="2"/><text x="41.3011%" y="79.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (6 samples, 0.05%)</title><rect x="41.0511%" y="165" width="0.0526%" height="15" fill="rgb(234,20,35)" fg:x="4679" fg:w="6"/><text x="41.3011%" y="175.50"></text></g><g><title>tokio::runtime::context::budget (6 samples, 0.05%)</title><rect x="41.0511%" y="149" width="0.0526%" height="15" fill="rgb(254,45,19)" fg:x="4679" fg:w="6"/><text x="41.3011%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="41.0511%" y="133" width="0.0526%" height="15" fill="rgb(219,14,44)" fg:x="4679" fg:w="6"/><text x="41.3011%" y="143.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (4 samples, 0.04%)</title><rect x="41.0686%" y="117" width="0.0351%" height="15" fill="rgb(217,220,26)" fg:x="4681" fg:w="4"/><text x="41.3186%" y="127.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (4 samples, 0.04%)</title><rect x="41.0686%" y="101" width="0.0351%" height="15" fill="rgb(213,158,28)" fg:x="4681" fg:w="4"/><text x="41.3186%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.04%)</title><rect x="41.0686%" y="85" width="0.0351%" height="15" fill="rgb(252,51,52)" fg:x="4681" fg:w="4"/><text x="41.3186%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.31%)</title><rect x="41.1125%" y="149" width="0.3071%" height="15" fill="rgb(246,89,16)" fg:x="4686" fg:w="35"/><text x="41.3625%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.31%)</title><rect x="41.1125%" y="133" width="0.3071%" height="15" fill="rgb(216,158,49)" fg:x="4686" fg:w="35"/><text x="41.3625%" y="143.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (452 samples, 3.97%)</title><rect x="37.4890%" y="277" width="3.9656%" height="15" fill="rgb(236,107,19)" fg:x="4273" fg:w="452"/><text x="37.7390%" y="287.50">&lt;&amp;mu..</text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (452 samples, 3.97%)</title><rect x="37.4890%" y="261" width="3.9656%" height="15" fill="rgb(228,185,30)" fg:x="4273" fg:w="452"/><text x="37.7390%" y="271.50">&lt;tok..</text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (451 samples, 3.96%)</title><rect x="37.4978%" y="245" width="3.9568%" height="15" fill="rgb(246,134,8)" fg:x="4274" fg:w="451"/><text x="37.7478%" y="255.50">&lt;tok..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (451 samples, 3.96%)</title><rect x="37.4978%" y="229" width="3.9568%" height="15" fill="rgb(214,143,50)" fg:x="4274" fg:w="451"/><text x="37.7478%" y="239.50">toki..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (445 samples, 3.90%)</title><rect x="37.5504%" y="213" width="3.9042%" height="15" fill="rgb(228,75,8)" fg:x="4280" fg:w="445"/><text x="37.8004%" y="223.50">toki..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (54 samples, 0.47%)</title><rect x="40.9809%" y="197" width="0.4738%" height="15" fill="rgb(207,175,4)" fg:x="4671" fg:w="54"/><text x="41.2309%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (53 samples, 0.46%)</title><rect x="40.9896%" y="181" width="0.4650%" height="15" fill="rgb(205,108,24)" fg:x="4672" fg:w="53"/><text x="41.2396%" y="191.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (40 samples, 0.35%)</title><rect x="41.1037%" y="165" width="0.3509%" height="15" fill="rgb(244,120,49)" fg:x="4685" fg:w="40"/><text x="41.3537%" y="175.50"></text></g><g><title>tokio::util::bit::Pack::unpack (4 samples, 0.04%)</title><rect x="41.4195%" y="149" width="0.0351%" height="15" fill="rgb(223,47,38)" fg:x="4721" fg:w="4"/><text x="41.6695%" y="159.50"></text></g><g><title>tokio::util::bit::unpack (4 samples, 0.04%)</title><rect x="41.4195%" y="133" width="0.0351%" height="15" fill="rgb(229,179,11)" fg:x="4721" fg:w="4"/><text x="41.6695%" y="143.50"></text></g><g><title>core::ptr::read (5 samples, 0.04%)</title><rect x="41.4546%" y="245" width="0.0439%" height="15" fill="rgb(231,122,1)" fg:x="4725" fg:w="5"/><text x="41.7046%" y="255.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (489 samples, 4.29%)</title><rect x="37.2171%" y="293" width="4.2902%" height="15" fill="rgb(245,119,9)" fg:x="4242" fg:w="489"/><text x="37.4671%" y="303.50">&lt;toki..</text></g><g><title>core::mem::take (6 samples, 0.05%)</title><rect x="41.4546%" y="277" width="0.0526%" height="15" fill="rgb(241,163,25)" fg:x="4725" fg:w="6"/><text x="41.7046%" y="287.50"></text></g><g><title>core::mem::replace (6 samples, 0.05%)</title><rect x="41.4546%" y="261" width="0.0526%" height="15" fill="rgb(217,214,3)" fg:x="4725" fg:w="6"/><text x="41.7046%" y="271.50"></text></g><g><title>cfree (297 samples, 2.61%)</title><rect x="41.6740%" y="261" width="2.6057%" height="15" fill="rgb(240,86,28)" fg:x="4750" fg:w="297"/><text x="41.9240%" y="271.50">cf..</text></g><g><title>[libc.so.6] (217 samples, 1.90%)</title><rect x="42.3759%" y="245" width="1.9038%" height="15" fill="rgb(215,47,9)" fg:x="4830" fg:w="217"/><text x="42.6259%" y="255.50">[..</text></g><g><title>[libc.so.6] (60 samples, 0.53%)</title><rect x="43.7533%" y="229" width="0.5264%" height="15" fill="rgb(252,25,45)" fg:x="4987" fg:w="60"/><text x="44.0033%" y="239.50"></text></g><g><title>[libc.so.6] (35 samples, 0.31%)</title><rect x="43.9726%" y="213" width="0.3071%" height="15" fill="rgb(251,164,9)" fg:x="5012" fg:w="35"/><text x="44.2226%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.08%)</title><rect x="44.2007%" y="197" width="0.0790%" height="15" fill="rgb(233,194,0)" fg:x="5038" fg:w="9"/><text x="44.4507%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (324 samples, 2.84%)</title><rect x="41.5073%" y="293" width="2.8426%" height="15" fill="rgb(249,111,24)" fg:x="4731" fg:w="324"/><text x="41.7573%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (324 samples, 2.84%)</title><rect x="41.5073%" y="277" width="2.8426%" height="15" fill="rgb(250,223,3)" fg:x="4731" fg:w="324"/><text x="41.7573%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (8 samples, 0.07%)</title><rect x="44.2797%" y="261" width="0.0702%" height="15" fill="rgb(236,178,37)" fg:x="5047" fg:w="8"/><text x="44.5297%" y="271.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="44.2797%" y="245" width="0.0702%" height="15" fill="rgb(241,158,50)" fg:x="5047" fg:w="8"/><text x="44.5297%" y="255.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (5 samples, 0.04%)</title><rect x="44.3060%" y="229" width="0.0439%" height="15" fill="rgb(213,121,41)" fg:x="5050" fg:w="5"/><text x="44.5560%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.04%)</title><rect x="44.3060%" y="213" width="0.0439%" height="15" fill="rgb(240,92,3)" fg:x="5050" fg:w="5"/><text x="44.5560%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.04%)</title><rect x="44.3060%" y="197" width="0.0439%" height="15" fill="rgb(205,123,3)" fg:x="5050" fg:w="5"/><text x="44.5560%" y="207.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (6 samples, 0.05%)</title><rect x="44.3587%" y="277" width="0.0526%" height="15" fill="rgb(205,97,47)" fg:x="5056" fg:w="6"/><text x="44.6087%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.05%)</title><rect x="44.4113%" y="277" width="0.0526%" height="15" fill="rgb(247,152,14)" fg:x="5062" fg:w="6"/><text x="44.6613%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.05%)</title><rect x="44.4113%" y="261" width="0.0526%" height="15" fill="rgb(248,195,53)" fg:x="5062" fg:w="6"/><text x="44.6613%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="44.4288%" y="245" width="0.0351%" height="15" fill="rgb(226,201,16)" fg:x="5064" fg:w="4"/><text x="44.6788%" y="255.50"></text></g><g><title>fastwebsockets::frame::Frame::fmt_head (15 samples, 0.13%)</title><rect x="44.4639%" y="277" width="0.1316%" height="15" fill="rgb(205,98,0)" fg:x="5068" fg:w="15"/><text x="44.7139%" y="287.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (4 samples, 0.04%)</title><rect x="44.5604%" y="261" width="0.0351%" height="15" fill="rgb(214,191,48)" fg:x="5079" fg:w="4"/><text x="44.8104%" y="271.50"></text></g><g><title>fastwebsockets::frame::Frame::write (33 samples, 0.29%)</title><rect x="44.3499%" y="293" width="0.2895%" height="15" fill="rgb(237,112,39)" fg:x="5055" fg:w="33"/><text x="44.5999%" y="303.50"></text></g><g><title>fastwebsockets::frame::Frame::write::reserve_enough (5 samples, 0.04%)</title><rect x="44.5955%" y="277" width="0.0439%" height="15" fill="rgb(247,203,27)" fg:x="5083" fg:w="5"/><text x="44.8455%" y="287.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="44.9114%" y="277" width="0.0439%" height="15" fill="rgb(235,124,28)" fg:x="5119" fg:w="5"/><text x="45.1614%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="44.9991%" y="213" width="0.0175%" height="15" fill="rgb(208,207,46)" fg:x="5129" fg:w="2"/><text x="45.2491%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="44.9991%" y="197" width="0.0175%" height="15" fill="rgb(234,176,4)" fg:x="5129" fg:w="2"/><text x="45.2491%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.07%)</title><rect x="44.9553%" y="229" width="0.0702%" height="15" fill="rgb(230,133,28)" fg:x="5124" fg:w="8"/><text x="45.2053%" y="239.50"></text></g><g><title>[libc.so.6] (467 samples, 4.10%)</title><rect x="46.7889%" y="53" width="4.0972%" height="15" fill="rgb(211,137,40)" fg:x="5333" fg:w="467"/><text x="47.0389%" y="63.50">[lib..</text></g><g><title>__send (705 samples, 6.19%)</title><rect x="45.4553%" y="69" width="6.1853%" height="15" fill="rgb(254,35,13)" fg:x="5181" fg:w="705"/><text x="45.7053%" y="79.50">__send</text></g><g><title>[unknown] (86 samples, 0.75%)</title><rect x="50.8861%" y="53" width="0.7545%" height="15" fill="rgb(225,49,51)" fg:x="5800" fg:w="86"/><text x="51.1361%" y="63.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (725 samples, 6.36%)</title><rect x="45.4378%" y="165" width="6.3608%" height="15" fill="rgb(251,10,15)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="175.50">&lt;&amp;mio::n..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (725 samples, 6.36%)</title><rect x="45.4378%" y="149" width="6.3608%" height="15" fill="rgb(228,207,15)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="159.50">mio::io_..</text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (725 samples, 6.36%)</title><rect x="45.4378%" y="133" width="6.3608%" height="15" fill="rgb(241,99,19)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="143.50">mio::sys..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (725 samples, 6.36%)</title><rect x="45.4378%" y="117" width="6.3608%" height="15" fill="rgb(207,104,49)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="127.50">&lt;&amp;mio::n..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (725 samples, 6.36%)</title><rect x="45.4378%" y="101" width="6.3608%" height="15" fill="rgb(234,99,18)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="111.50">&lt;&amp;std::n..</text></g><g><title>std::sys_common::net::TcpStream::write (725 samples, 6.36%)</title><rect x="45.4378%" y="85" width="6.3608%" height="15" fill="rgb(213,191,49)" fg:x="5179" fg:w="725"/><text x="45.6878%" y="95.50">std::sys..</text></g><g><title>std::sys::pal::unix::cvt (18 samples, 0.16%)</title><rect x="51.6406%" y="69" width="0.1579%" height="15" fill="rgb(210,226,19)" fg:x="5886" fg:w="18"/><text x="51.8906%" y="79.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.04%)</title><rect x="51.7986%" y="165" width="0.0351%" height="15" fill="rgb(229,97,18)" fg:x="5904" fg:w="4"/><text x="52.0486%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (2 samples, 0.02%)</title><rect x="51.9302%" y="133" width="0.0175%" height="15" fill="rgb(211,167,15)" fg:x="5919" fg:w="2"/><text x="52.1802%" y="143.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="51.9302%" y="117" width="0.0175%" height="15" fill="rgb(210,169,34)" fg:x="5919" fg:w="2"/><text x="52.1802%" y="127.50"></text></g><g><title>tokio::runtime::coop::Budget::is_unconstrained (2 samples, 0.02%)</title><rect x="51.9302%" y="101" width="0.0175%" height="15" fill="rgb(241,121,31)" fg:x="5919" fg:w="2"/><text x="52.1802%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.02%)</title><rect x="51.9302%" y="85" width="0.0175%" height="15" fill="rgb(232,40,11)" fg:x="5919" fg:w="2"/><text x="52.1802%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="51.9302%" y="69" width="0.0175%" height="15" fill="rgb(205,86,26)" fg:x="5919" fg:w="2"/><text x="52.1802%" y="79.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.08%)</title><rect x="51.9477%" y="85" width="0.0790%" height="15" fill="rgb(231,126,28)" fg:x="5921" fg:w="9"/><text x="52.1977%" y="95.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (9 samples, 0.08%)</title><rect x="51.9477%" y="69" width="0.0790%" height="15" fill="rgb(219,221,18)" fg:x="5921" fg:w="9"/><text x="52.1977%" y="79.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (9 samples, 0.08%)</title><rect x="51.9477%" y="53" width="0.0790%" height="15" fill="rgb(211,40,0)" fg:x="5921" fg:w="9"/><text x="52.1977%" y="63.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.06%)</title><rect x="51.9653%" y="37" width="0.0614%" height="15" fill="rgb(239,85,43)" fg:x="5923" fg:w="7"/><text x="52.2153%" y="47.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.10%)</title><rect x="51.9477%" y="133" width="0.0965%" height="15" fill="rgb(231,55,21)" fg:x="5921" fg:w="11"/><text x="52.1977%" y="143.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.10%)</title><rect x="51.9477%" y="117" width="0.0965%" height="15" fill="rgb(225,184,43)" fg:x="5921" fg:w="11"/><text x="52.1977%" y="127.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.10%)</title><rect x="51.9477%" y="101" width="0.0965%" height="15" fill="rgb(251,158,41)" fg:x="5921" fg:w="11"/><text x="52.1977%" y="111.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (2 samples, 0.02%)</title><rect x="52.0267%" y="85" width="0.0175%" height="15" fill="rgb(234,159,37)" fg:x="5930" fg:w="2"/><text x="52.2767%" y="95.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (2 samples, 0.02%)</title><rect x="52.0267%" y="69" width="0.0175%" height="15" fill="rgb(216,204,22)" fg:x="5930" fg:w="2"/><text x="52.2767%" y="79.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (2 samples, 0.02%)</title><rect x="52.0267%" y="53" width="0.0175%" height="15" fill="rgb(214,17,3)" fg:x="5930" fg:w="2"/><text x="52.2767%" y="63.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.42%)</title><rect x="52.0881%" y="117" width="0.4211%" height="15" fill="rgb(212,111,17)" fg:x="5937" fg:w="48"/><text x="52.3381%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.42%)</title><rect x="52.0881%" y="101" width="0.4211%" height="15" fill="rgb(221,157,24)" fg:x="5937" fg:w="48"/><text x="52.3381%" y="111.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (8 samples, 0.07%)</title><rect x="52.5092%" y="117" width="0.0702%" height="15" fill="rgb(252,16,13)" fg:x="5985" fg:w="8"/><text x="52.7592%" y="127.50"></text></g><g><title>&lt;tokio::io::util::write_vectored::WriteVectored&lt;W&gt; as core::future::future::Future&gt;::poll (875 samples, 7.68%)</title><rect x="44.9553%" y="277" width="7.6768%" height="15" fill="rgb(221,62,2)" fg:x="5124" fg:w="875"/><text x="45.2053%" y="287.50">&lt;tokio::io:..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (875 samples, 7.68%)</title><rect x="44.9553%" y="261" width="7.6768%" height="15" fill="rgb(247,87,22)" fg:x="5124" fg:w="875"/><text x="45.2053%" y="271.50">&lt;&amp;mut T as ..</text></g><g><title>tokio::io::async_write::AsyncWrite::poll_write_vectored (875 samples, 7.68%)</title><rect x="44.9553%" y="245" width="7.6768%" height="15" fill="rgb(215,73,9)" fg:x="5124" fg:w="875"/><text x="45.2053%" y="255.50">tokio::io::..</text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (867 samples, 7.61%)</title><rect x="45.0254%" y="229" width="7.6066%" height="15" fill="rgb(207,175,33)" fg:x="5132" fg:w="867"/><text x="45.2754%" y="239.50">&lt;tokio_uti..</text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (856 samples, 7.51%)</title><rect x="45.1220%" y="213" width="7.5101%" height="15" fill="rgb(243,129,54)" fg:x="5143" fg:w="856"/><text x="45.3720%" y="223.50">&lt;tokio::ne..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (845 samples, 7.41%)</title><rect x="45.2185%" y="197" width="7.4136%" height="15" fill="rgb(227,119,45)" fg:x="5154" fg:w="845"/><text x="45.4685%" y="207.50">tokio::net..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (835 samples, 7.33%)</title><rect x="45.3062%" y="181" width="7.3258%" height="15" fill="rgb(205,109,36)" fg:x="5164" fg:w="835"/><text x="45.5562%" y="191.50">tokio::io:..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (91 samples, 0.80%)</title><rect x="51.8337%" y="165" width="0.7984%" height="15" fill="rgb(205,6,39)" fg:x="5908" fg:w="91"/><text x="52.0837%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (87 samples, 0.76%)</title><rect x="51.8687%" y="149" width="0.7633%" height="15" fill="rgb(221,32,16)" fg:x="5912" fg:w="87"/><text x="52.1187%" y="159.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (67 samples, 0.59%)</title><rect x="52.0442%" y="133" width="0.5878%" height="15" fill="rgb(228,144,50)" fg:x="5932" fg:w="67"/><text x="52.2942%" y="143.50"></text></g><g><title>tokio::util::bit::Pack::unpack (6 samples, 0.05%)</title><rect x="52.5794%" y="117" width="0.0526%" height="15" fill="rgb(229,201,53)" fg:x="5993" fg:w="6"/><text x="52.8294%" y="127.50"></text></g><g><title>tokio::util::bit::unpack (6 samples, 0.05%)</title><rect x="52.5794%" y="101" width="0.0526%" height="15" fill="rgb(249,153,27)" fg:x="5993" fg:w="6"/><text x="52.8294%" y="111.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (4 samples, 0.04%)</title><rect x="52.6320%" y="277" width="0.0351%" height="15" fill="rgb(227,106,25)" fg:x="5999" fg:w="4"/><text x="52.8820%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.04%)</title><rect x="52.6320%" y="261" width="0.0351%" height="15" fill="rgb(230,65,29)" fg:x="5999" fg:w="4"/><text x="52.8820%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="52.6320%" y="245" width="0.0351%" height="15" fill="rgb(221,57,46)" fg:x="5999" fg:w="4"/><text x="52.8820%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.02%)</title><rect x="52.6496%" y="229" width="0.0175%" height="15" fill="rgb(229,161,17)" fg:x="6001" fg:w="2"/><text x="52.8996%" y="239.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="52.7198%" y="261" width="0.0175%" height="15" fill="rgb(222,213,11)" fg:x="6009" fg:w="2"/><text x="52.9698%" y="271.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (1,998 samples, 17.53%)</title><rect x="35.2167%" y="325" width="17.5294%" height="15" fill="rgb(235,35,13)" fg:x="4014" fg:w="1998"/><text x="35.4667%" y="335.50">fastwebsockets::WebSocketWr..</text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (1,907 samples, 16.73%)</title><rect x="36.0151%" y="309" width="16.7310%" height="15" fill="rgb(233,158,34)" fg:x="4105" fg:w="1907"/><text x="36.2651%" y="319.50">fastwebsockets::WriteHalf:..</text></g><g><title>fastwebsockets::frame::Frame::writev::_{{closure}} (924 samples, 8.11%)</title><rect x="44.6394%" y="293" width="8.1067%" height="15" fill="rgb(215,151,48)" fg:x="5088" fg:w="924"/><text x="44.8894%" y="303.50">fastwebsock..</text></g><g><title>fastwebsockets::frame::Frame::fmt_head (9 samples, 0.08%)</title><rect x="52.6671%" y="277" width="0.0790%" height="15" fill="rgb(229,84,14)" fg:x="6003" fg:w="9"/><text x="52.9171%" y="287.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,144 samples, 18.81%)</title><rect x="33.9972%" y="357" width="18.8103%" height="15" fill="rgb(229,68,14)" fg:x="3875" fg:w="2144"/><text x="34.2472%" y="367.50">&lt;core::pin::Pin&lt;P&gt; as core::f..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (2,144 samples, 18.81%)</title><rect x="33.9972%" y="341" width="18.8103%" height="15" fill="rgb(243,106,26)" fg:x="3875" fg:w="2144"/><text x="34.2472%" y="351.50">wisp_mux::fastwebsockets::_&lt;i..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;wisp_mux::ws::Frame&gt; for fastwebsockets::frame::Frame&gt;::from (7 samples, 0.06%)</title><rect x="52.7461%" y="325" width="0.0614%" height="15" fill="rgb(206,45,38)" fg:x="6012" fg:w="7"/><text x="52.9961%" y="335.50"></text></g><g><title>wisp_mux::fastwebsockets::match_payload_reverse (5 samples, 0.04%)</title><rect x="52.7636%" y="309" width="0.0439%" height="15" fill="rgb(226,6,15)" fg:x="6014" fg:w="5"/><text x="53.0136%" y="319.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (2 samples, 0.02%)</title><rect x="52.8602%" y="341" width="0.0175%" height="15" fill="rgb(232,22,54)" fg:x="6025" fg:w="2"/><text x="53.1102%" y="351.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (55 samples, 0.48%)</title><rect x="52.8075%" y="357" width="0.4825%" height="15" fill="rgb(229,222,32)" fg:x="6019" fg:w="55"/><text x="53.0575%" y="367.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::try_lock (47 samples, 0.41%)</title><rect x="52.8777%" y="341" width="0.4124%" height="15" fill="rgb(228,62,29)" fg:x="6027" fg:w="47"/><text x="53.1277%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (47 samples, 0.41%)</title><rect x="52.8777%" y="325" width="0.4124%" height="15" fill="rgb(251,103,34)" fg:x="6027" fg:w="47"/><text x="53.1277%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_or (47 samples, 0.41%)</title><rect x="52.8777%" y="309" width="0.4124%" height="15" fill="rgb(233,12,30)" fg:x="6027" fg:w="47"/><text x="53.1277%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.39%)</title><rect x="53.4217%" y="325" width="0.3948%" height="15" fill="rgb(238,52,0)" fg:x="6089" fg:w="45"/><text x="53.6717%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.39%)</title><rect x="53.4304%" y="309" width="0.3860%" height="15" fill="rgb(223,98,5)" fg:x="6090" fg:w="44"/><text x="53.6804%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.39%)</title><rect x="53.4304%" y="293" width="0.3860%" height="15" fill="rgb(228,75,37)" fg:x="6090" fg:w="44"/><text x="53.6804%" y="303.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.39%)</title><rect x="53.4304%" y="277" width="0.3860%" height="15" fill="rgb(205,115,49)" fg:x="6090" fg:w="44"/><text x="53.6804%" y="287.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.39%)</title><rect x="53.4304%" y="261" width="0.3860%" height="15" fill="rgb(250,154,43)" fg:x="6090" fg:w="44"/><text x="53.6804%" y="271.50"></text></g><g><title>cfree (44 samples, 0.39%)</title><rect x="53.4304%" y="245" width="0.3860%" height="15" fill="rgb(226,43,29)" fg:x="6090" fg:w="44"/><text x="53.6804%" y="255.50"></text></g><g><title>[libc.so.6] (28 samples, 0.25%)</title><rect x="53.5708%" y="229" width="0.2457%" height="15" fill="rgb(249,228,39)" fg:x="6106" fg:w="28"/><text x="53.8208%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (66 samples, 0.58%)</title><rect x="53.2901%" y="357" width="0.5790%" height="15" fill="rgb(216,79,43)" fg:x="6074" fg:w="66"/><text x="53.5401%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (66 samples, 0.58%)</title><rect x="53.2901%" y="341" width="0.5790%" height="15" fill="rgb(228,95,12)" fg:x="6074" fg:w="66"/><text x="53.5401%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;tokio_util::either::Either&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,tokio::net::unix::split_owned::OwnedWriteHalf&gt;&gt;&gt;::wisp_write_split::{{closure}}&gt; (6 samples, 0.05%)</title><rect x="53.8165%" y="325" width="0.0526%" height="15" fill="rgb(249,221,15)" fg:x="6134" fg:w="6"/><text x="54.0665%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (51 samples, 0.45%)</title><rect x="53.8691%" y="357" width="0.4474%" height="15" fill="rgb(233,34,13)" fg:x="6140" fg:w="51"/><text x="54.1191%" y="367.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.45%)</title><rect x="53.8691%" y="341" width="0.4474%" height="15" fill="rgb(214,103,39)" fg:x="6140" fg:w="51"/><text x="54.1191%" y="351.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::unlock (51 samples, 0.45%)</title><rect x="53.8691%" y="325" width="0.4474%" height="15" fill="rgb(251,126,39)" fg:x="6140" fg:w="51"/><text x="54.1191%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (51 samples, 0.45%)</title><rect x="53.8691%" y="309" width="0.4474%" height="15" fill="rgb(214,216,36)" fg:x="6140" fg:w="51"/><text x="54.1191%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_and (51 samples, 0.45%)</title><rect x="53.8691%" y="293" width="0.4474%" height="15" fill="rgb(220,221,8)" fg:x="6140" fg:w="51"/><text x="54.1191%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexLockFuture&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="54.3165%" y="357" width="0.0263%" height="15" fill="rgb(240,216,3)" fg:x="6191" fg:w="3"/><text x="54.5665%" y="367.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="54.3165%" y="341" width="0.0263%" height="15" fill="rgb(232,218,17)" fg:x="6191" fg:w="3"/><text x="54.5665%" y="351.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (2,690 samples, 23.60%)</title><rect x="30.9879%" y="453" width="23.6006%" height="15" fill="rgb(229,163,45)" fg:x="3532" fg:w="2690"/><text x="31.2379%" y="463.50">&lt;core::pin::Pin&lt;P&gt; as futures_sink::Si..</text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (2,687 samples, 23.57%)</title><rect x="31.0142%" y="437" width="23.5743%" height="15" fill="rgb(231,110,42)" fg:x="3535" fg:w="2687"/><text x="31.2642%" y="447.50">&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::into_inner_sink::_{{closure}}::_{{closure}} (2,646 samples, 23.21%)</title><rect x="31.3739%" y="421" width="23.2146%" height="15" fill="rgb(208,170,48)" fg:x="3576" fg:w="2646"/><text x="31.6239%" y="431.50">wisp_mux::stream::MuxStreamWrite::int..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload::_{{closure}} (2,640 samples, 23.16%)</title><rect x="31.4266%" y="405" width="23.1620%" height="15" fill="rgb(239,116,25)" fg:x="3582" fg:w="2640"/><text x="31.6766%" y="415.50">wisp_mux::stream::MuxStreamWrite::wri..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload_internal::_{{closure}} (2,490 samples, 21.85%)</title><rect x="32.7426%" y="389" width="21.8459%" height="15" fill="rgb(219,200,50)" fg:x="3732" fg:w="2490"/><text x="32.9926%" y="399.50">wisp_mux::stream::MuxStreamWrite::w..</text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_split::_{{closure}} (2,436 samples, 21.37%)</title><rect x="33.2164%" y="373" width="21.3722%" height="15" fill="rgb(245,200,0)" fg:x="3786" fg:w="2436"/><text x="33.4664%" y="383.50">wisp_mux::ws::LockedWebSocketWrite..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split (28 samples, 0.25%)</title><rect x="54.3429%" y="357" width="0.2457%" height="15" fill="rgb(245,119,33)" fg:x="6194" fg:w="28"/><text x="54.5929%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (25 samples, 0.22%)</title><rect x="54.3692%" y="341" width="0.2193%" height="15" fill="rgb(231,125,12)" fg:x="6197" fg:w="25"/><text x="54.6192%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.22%)</title><rect x="54.3692%" y="325" width="0.2193%" height="15" fill="rgb(216,96,41)" fg:x="6197" fg:w="25"/><text x="54.6192%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.18%)</title><rect x="54.4131%" y="309" width="0.1755%" height="15" fill="rgb(248,43,45)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.18%)</title><rect x="54.4131%" y="293" width="0.1755%" height="15" fill="rgb(217,222,7)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.18%)</title><rect x="54.4131%" y="277" width="0.1755%" height="15" fill="rgb(233,28,6)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="287.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.18%)</title><rect x="54.4131%" y="261" width="0.1755%" height="15" fill="rgb(231,218,15)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="271.50"></text></g><g><title>__rdl_alloc (20 samples, 0.18%)</title><rect x="54.4131%" y="245" width="0.1755%" height="15" fill="rgb(226,171,48)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="255.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.18%)</title><rect x="54.4131%" y="229" width="0.1755%" height="15" fill="rgb(235,201,9)" fg:x="6202" fg:w="20"/><text x="54.6631%" y="239.50"></text></g><g><title>malloc (17 samples, 0.15%)</title><rect x="54.4394%" y="213" width="0.1491%" height="15" fill="rgb(217,80,15)" fg:x="6205" fg:w="17"/><text x="54.6894%" y="223.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::poll_flush (2,723 samples, 23.89%)</title><rect x="30.9879%" y="469" width="23.8902%" height="15" fill="rgb(219,152,8)" fg:x="3532" fg:w="2723"/><text x="31.2379%" y="479.50">&lt;wisp_mux::stream::MuxStreamIoSink as ..</text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (33 samples, 0.29%)</title><rect x="54.5885%" y="453" width="0.2895%" height="15" fill="rgb(243,107,38)" fg:x="6222" fg:w="33"/><text x="54.8385%" y="463.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::poll_ready (11 samples, 0.10%)</title><rect x="54.8780%" y="469" width="0.0965%" height="15" fill="rgb(231,17,5)" fg:x="6255" fg:w="11"/><text x="55.1280%" y="479.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (7 samples, 0.06%)</title><rect x="54.9131%" y="453" width="0.0614%" height="15" fill="rgb(209,25,54)" fg:x="6259" fg:w="7"/><text x="55.1631%" y="463.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (6 samples, 0.05%)</title><rect x="54.9219%" y="437" width="0.0526%" height="15" fill="rgb(219,0,2)" fg:x="6260" fg:w="6"/><text x="55.1719%" y="447.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (6 samples, 0.05%)</title><rect x="54.9219%" y="421" width="0.0526%" height="15" fill="rgb(246,9,5)" fg:x="6260" fg:w="6"/><text x="55.1719%" y="431.50"></text></g><g><title>__rdl_alloc (269 samples, 2.36%)</title><rect x="54.9746%" y="277" width="2.3601%" height="15" fill="rgb(226,159,4)" fg:x="6266" fg:w="269"/><text x="55.2246%" y="287.50">__..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (269 samples, 2.36%)</title><rect x="54.9746%" y="261" width="2.3601%" height="15" fill="rgb(219,175,34)" fg:x="6266" fg:w="269"/><text x="55.2246%" y="271.50">st..</text></g><g><title>malloc (265 samples, 2.32%)</title><rect x="55.0097%" y="245" width="2.3250%" height="15" fill="rgb(236,10,46)" fg:x="6270" fg:w="265"/><text x="55.2597%" y="255.50">m..</text></g><g><title>[libc.so.6] (156 samples, 1.37%)</title><rect x="55.9660%" y="229" width="1.3687%" height="15" fill="rgb(240,211,16)" fg:x="6379" fg:w="156"/><text x="56.2160%" y="239.50"></text></g><g><title>[libc.so.6] (22 samples, 0.19%)</title><rect x="57.1416%" y="213" width="0.1930%" height="15" fill="rgb(205,3,43)" fg:x="6513" fg:w="22"/><text x="57.3916%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (274 samples, 2.40%)</title><rect x="54.9746%" y="373" width="2.4039%" height="15" fill="rgb(245,7,22)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="383.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (274 samples, 2.40%)</title><rect x="54.9746%" y="357" width="2.4039%" height="15" fill="rgb(239,132,32)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="367.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (274 samples, 2.40%)</title><rect x="54.9746%" y="341" width="2.4039%" height="15" fill="rgb(228,202,34)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="351.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (274 samples, 2.40%)</title><rect x="54.9746%" y="325" width="2.4039%" height="15" fill="rgb(254,200,22)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="335.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (274 samples, 2.40%)</title><rect x="54.9746%" y="309" width="2.4039%" height="15" fill="rgb(219,10,39)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="319.50">al..</text></g><g><title>alloc::alloc::alloc (274 samples, 2.40%)</title><rect x="54.9746%" y="293" width="2.4039%" height="15" fill="rgb(226,210,39)" fg:x="6266" fg:w="274"/><text x="55.2246%" y="303.50">al..</text></g><g><title>core::ptr::read_volatile (5 samples, 0.04%)</title><rect x="57.3346%" y="277" width="0.0439%" height="15" fill="rgb(208,219,16)" fg:x="6535" fg:w="5"/><text x="57.5846%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (687 samples, 6.03%)</title><rect x="54.9746%" y="437" width="6.0274%" height="15" fill="rgb(216,158,51)" fg:x="6266" fg:w="687"/><text x="55.2246%" y="447.50">alloc::s..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (687 samples, 6.03%)</title><rect x="54.9746%" y="421" width="6.0274%" height="15" fill="rgb(233,14,44)" fg:x="6266" fg:w="687"/><text x="55.2246%" y="431.50">alloc::s..</text></g><g><title>alloc::slice::hack::to_vec (687 samples, 6.03%)</title><rect x="54.9746%" y="405" width="6.0274%" height="15" fill="rgb(237,97,39)" fg:x="6266" fg:w="687"/><text x="55.2246%" y="415.50">alloc::s..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (687 samples, 6.03%)</title><rect x="54.9746%" y="389" width="6.0274%" height="15" fill="rgb(218,198,43)" fg:x="6266" fg:w="687"/><text x="55.2246%" y="399.50">&lt;T as al..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (413 samples, 3.62%)</title><rect x="57.3785%" y="373" width="3.6234%" height="15" fill="rgb(231,104,20)" fg:x="6540" fg:w="413"/><text x="57.6285%" y="383.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (413 samples, 3.62%)</title><rect x="57.3785%" y="357" width="3.6234%" height="15" fill="rgb(254,36,13)" fg:x="6540" fg:w="413"/><text x="57.6285%" y="367.50">core..</text></g><g><title>[libc.so.6] (413 samples, 3.62%)</title><rect x="57.3785%" y="341" width="3.6234%" height="15" fill="rgb(248,14,50)" fg:x="6540" fg:w="413"/><text x="57.6285%" y="351.50">[lib..</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::From&lt;&amp;[u8]&gt;&gt;::from (693 samples, 6.08%)</title><rect x="54.9746%" y="453" width="6.0800%" height="15" fill="rgb(217,107,29)" fg:x="6266" fg:w="693"/><text x="55.2246%" y="463.50">&lt;bytes::..</text></g><g><title>bytes::bytes_mut::BytesMut::from_vec (6 samples, 0.05%)</title><rect x="61.0019%" y="437" width="0.0526%" height="15" fill="rgb(251,169,33)" fg:x="6953" fg:w="6"/><text x="61.2519%" y="447.50"></text></g><g><title>bytes::bytes_mut::original_capacity_to_repr (4 samples, 0.04%)</title><rect x="61.0195%" y="421" width="0.0351%" height="15" fill="rgb(217,108,32)" fg:x="6955" fg:w="4"/><text x="61.2695%" y="431.50"></text></g><g><title>[libc.so.6] (41 samples, 0.36%)</title><rect x="61.0897%" y="405" width="0.3597%" height="15" fill="rgb(219,66,42)" fg:x="6963" fg:w="41"/><text x="61.3397%" y="415.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (52 samples, 0.46%)</title><rect x="61.0809%" y="421" width="0.4562%" height="15" fill="rgb(206,180,7)" fg:x="6962" fg:w="52"/><text x="61.3309%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::sink_unfold::UnfoldState&lt;wisp_mux::stream::MuxStreamWrite,wisp_mux::stream::MuxStreamWrite::into_inner_sink::{{closure}}::{{closure}}&gt;&gt; (10 samples, 0.09%)</title><rect x="61.4494%" y="405" width="0.0877%" height="15" fill="rgb(208,226,31)" fg:x="7004" fg:w="10"/><text x="61.6994%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;pin_project_lite::__private::UnsafeOverwriteGuard&lt;wisp_mux::sink_unfold::UnfoldState&lt;wisp_mux::stream::MuxStreamWrite,wisp_mux::stream::MuxStreamWrite::into_inner_sink::{{closure}}::{{closure}}&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="61.6073%" y="389" width="0.0439%" height="15" fill="rgb(218,26,49)" fg:x="7022" fg:w="5"/><text x="61.8573%" y="399.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeOverwriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="61.6073%" y="373" width="0.0439%" height="15" fill="rgb(233,197,48)" fg:x="7022" fg:w="5"/><text x="61.8573%" y="383.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="61.6073%" y="357" width="0.0439%" height="15" fill="rgb(252,181,51)" fg:x="7022" fg:w="5"/><text x="61.8573%" y="367.50"></text></g><g><title>wisp_mux::sink_unfold::UnfoldState&lt;T,Fut&gt;::take_value (14 samples, 0.12%)</title><rect x="61.5371%" y="421" width="0.1228%" height="15" fill="rgb(253,90,19)" fg:x="7014" fg:w="14"/><text x="61.7871%" y="431.50"></text></g><g><title>wisp_mux::sink_unfold::_::&lt;impl wisp_mux::sink_unfold::UnfoldState&lt;T,Fut&gt;&gt;::project_replace (6 samples, 0.05%)</title><rect x="61.6073%" y="405" width="0.0526%" height="15" fill="rgb(215,171,30)" fg:x="7022" fg:w="6"/><text x="61.8573%" y="415.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_sink::Sink&lt;Item&gt;&gt;::start_send (252 samples, 2.21%)</title><rect x="61.0546%" y="453" width="2.2109%" height="15" fill="rgb(214,222,9)" fg:x="6959" fg:w="252"/><text x="61.3046%" y="463.50">&lt;..</text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::start_send (249 samples, 2.18%)</title><rect x="61.0809%" y="437" width="2.1846%" height="15" fill="rgb(223,3,22)" fg:x="6962" fg:w="249"/><text x="61.3309%" y="447.50">&lt;..</text></g><g><title>wisp_mux::stream::MuxStreamWrite::into_inner_sink::_{{closure}} (183 samples, 1.61%)</title><rect x="61.6599%" y="421" width="1.6055%" height="15" fill="rgb(225,196,46)" fg:x="7028" fg:w="183"/><text x="61.9099%" y="431.50"></text></g><g><title>&lt;wisp_mux::stream::MuxStreamIoSink as futures_sink::Sink&lt;&amp;[u8]&gt;&gt;::start_send (946 samples, 8.30%)</title><rect x="54.9746%" y="469" width="8.2997%" height="15" fill="rgb(209,110,37)" fg:x="6266" fg:w="946"/><text x="55.2246%" y="479.50">&lt;wisp_mux::s..</text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_write_buf (3,692 samples, 32.39%)</title><rect x="30.8914%" y="517" width="32.3916%" height="15" fill="rgb(249,89,12)" fg:x="3521" fg:w="3692"/><text x="31.1414%" y="527.50">tokio::io::util::copy::CopyBuffer::poll_write_buf</text></g><g><title>&lt;tokio_util::compat::Compat&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (3,685 samples, 32.33%)</title><rect x="30.9528%" y="501" width="32.3302%" height="15" fill="rgb(226,27,33)" fg:x="3528" fg:w="3685"/><text x="31.2028%" y="511.50">&lt;tokio_util::compat::Compat&lt;T&gt; as tokio::io::async_w..</text></g><g><title>&lt;wisp_mux::stream::MuxStreamAsyncWrite as futures_io::if_std::AsyncWrite&gt;::poll_write (3,685 samples, 32.33%)</title><rect x="30.9528%" y="485" width="32.3302%" height="15" fill="rgb(213,82,22)" fg:x="3528" fg:w="3685"/><text x="31.2028%" y="495.50">&lt;wisp_mux::stream::MuxStreamAsyncWrite as futures_io..</text></g><g><title>tokio::io::util::copy::copy::_{{closure}} (4,263 samples, 37.40%)</title><rect x="25.9081%" y="565" width="37.4013%" height="15" fill="rgb(248,140,0)" fg:x="2953" fg:w="4263"/><text x="26.1581%" y="575.50">tokio::io::util::copy::copy::_{{closure}}</text></g><g><title>&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Future&gt;::poll (4,260 samples, 37.37%)</title><rect x="25.9344%" y="549" width="37.3750%" height="15" fill="rgb(228,106,3)" fg:x="2956" fg:w="4260"/><text x="26.1844%" y="559.50">&lt;tokio::io::util::copy::Copy&lt;R,W&gt; as core::future::future::Fu..</text></g><g><title>tokio::io::util::copy::CopyBuffer::poll_copy (4,260 samples, 37.37%)</title><rect x="25.9344%" y="533" width="37.3750%" height="15" fill="rgb(209,23,37)" fg:x="2956" fg:w="4260"/><text x="26.1844%" y="543.50">tokio::io::util::copy::CopyBuffer::poll_copy</text></g><g><title>tokio::runtime::coop::poll_proceed (3 samples, 0.03%)</title><rect x="63.2830%" y="517" width="0.0263%" height="15" fill="rgb(241,93,50)" fg:x="7213" fg:w="3"/><text x="63.5330%" y="527.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.03%)</title><rect x="63.2830%" y="501" width="0.0263%" height="15" fill="rgb(253,46,43)" fg:x="7213" fg:w="3"/><text x="63.5330%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.03%)</title><rect x="63.2830%" y="485" width="0.0263%" height="15" fill="rgb(226,206,43)" fg:x="7213" fg:w="3"/><text x="63.5330%" y="495.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (2 samples, 0.02%)</title><rect x="63.2918%" y="469" width="0.0175%" height="15" fill="rgb(217,54,7)" fg:x="7214" fg:w="2"/><text x="63.5418%" y="479.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::_{{closure}} (2 samples, 0.02%)</title><rect x="63.2918%" y="453" width="0.0175%" height="15" fill="rgb(223,5,52)" fg:x="7214" fg:w="2"/><text x="63.5418%" y="463.50"></text></g><g><title>epoxy_server::handle_stream::_{{closure}}::_{{closure}} (5,286 samples, 46.38%)</title><rect x="16.9679%" y="613" width="46.3766%" height="15" fill="rgb(206,52,46)" fg:x="1934" fg:w="5286"/><text x="17.2179%" y="623.50">epoxy_server::handle_stream::_{{closure}}::_{{closure}}</text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (5,285 samples, 46.37%)</title><rect x="16.9767%" y="597" width="46.3678%" height="15" fill="rgb(253,136,11)" fg:x="1935" fg:w="5285"/><text x="17.2267%" y="607.50">&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>epoxy_server::handle_stream::_{{closure}}::_{{closure}}::_{{closure}} (5,285 samples, 46.37%)</title><rect x="16.9767%" y="581" width="46.3678%" height="15" fill="rgb(208,106,33)" fg:x="1935" fg:w="5285"/><text x="17.2267%" y="591.50">epoxy_server::handle_stream::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>tokio::macros::support::thread_rng_n (4 samples, 0.04%)</title><rect x="63.3094%" y="565" width="0.0351%" height="15" fill="rgb(206,54,4)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="575.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (4 samples, 0.04%)</title><rect x="63.3094%" y="549" width="0.0351%" height="15" fill="rgb(213,3,15)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.04%)</title><rect x="63.3094%" y="533" width="0.0351%" height="15" fill="rgb(252,211,39)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.04%)</title><rect x="63.3094%" y="517" width="0.0351%" height="15" fill="rgb(223,6,36)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.04%)</title><rect x="63.3094%" y="501" width="0.0351%" height="15" fill="rgb(252,169,45)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="511.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (4 samples, 0.04%)</title><rect x="63.3094%" y="485" width="0.0351%" height="15" fill="rgb(212,48,26)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="495.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (4 samples, 0.04%)</title><rect x="63.3094%" y="469" width="0.0351%" height="15" fill="rgb(251,102,48)" fg:x="7216" fg:w="4"/><text x="63.5594%" y="479.50"></text></g><g><title>epoxy_server::handle_stream::_{{closure}} (5,292 samples, 46.43%)</title><rect x="16.9591%" y="629" width="46.4292%" height="15" fill="rgb(243,208,16)" fg:x="1933" fg:w="5292"/><text x="17.2091%" y="639.50">epoxy_server::handle_stream::_{{closure}}</text></g><g><title>epoxy_server::stream::ClientStream::connect::_{{closure}} (5 samples, 0.04%)</title><rect x="63.3444%" y="613" width="0.0439%" height="15" fill="rgb(219,96,24)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="623.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect::_{{closure}} (5 samples, 0.04%)</title><rect x="63.3444%" y="597" width="0.0439%" height="15" fill="rgb(219,33,29)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="607.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect_addr::_{{closure}} (5 samples, 0.04%)</title><rect x="63.3444%" y="581" width="0.0439%" height="15" fill="rgb(223,176,5)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="591.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::connect (5 samples, 0.04%)</title><rect x="63.3444%" y="565" width="0.0439%" height="15" fill="rgb(228,140,14)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="575.50"></text></g><g><title>mio::sys::unix::tcp::connect (5 samples, 0.04%)</title><rect x="63.3444%" y="549" width="0.0439%" height="15" fill="rgb(217,179,31)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="559.50"></text></g><g><title>connect (5 samples, 0.04%)</title><rect x="63.3444%" y="533" width="0.0439%" height="15" fill="rgb(230,9,30)" fg:x="7220" fg:w="5"/><text x="63.5944%" y="543.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::future::FusedFuture&gt;::is_terminated (5 samples, 0.04%)</title><rect x="63.5550%" y="533" width="0.0439%" height="15" fill="rgb(230,136,20)" fg:x="7244" fg:w="5"/><text x="63.8050%" y="543.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as futures_core::future::FusedFuture&gt;::is_terminated (2 samples, 0.02%)</title><rect x="63.5813%" y="517" width="0.0175%" height="15" fill="rgb(215,210,22)" fg:x="7247" fg:w="2"/><text x="63.8313%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.02%)</title><rect x="63.5813%" y="501" width="0.0175%" height="15" fill="rgb(218,43,5)" fg:x="7247" fg:w="2"/><text x="63.8313%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="63.5813%" y="485" width="0.0175%" height="15" fill="rgb(216,11,5)" fg:x="7247" fg:w="2"/><text x="63.8313%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="64.4236%" y="373" width="0.0175%" height="15" fill="rgb(209,82,29)" fg:x="7343" fg:w="2"/><text x="64.6736%" y="383.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;fastwebsockets::frame::OpCode&gt; for wisp_mux::ws::OpCode&gt;::from (2 samples, 0.02%)</title><rect x="64.4236%" y="357" width="0.0175%" height="15" fill="rgb(244,115,12)" fg:x="7343" fg:w="2"/><text x="64.6736%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (6 samples, 0.05%)</title><rect x="64.4236%" y="405" width="0.0526%" height="15" fill="rgb(222,82,18)" fg:x="7343" fg:w="6"/><text x="64.6736%" y="415.50"></text></g><g><title>wisp_mux::fastwebsockets::&lt;impl core::convert::From&lt;fastwebsockets::frame::Frame&gt; for wisp_mux::ws::Frame&gt;::from (6 samples, 0.05%)</title><rect x="64.4236%" y="389" width="0.0526%" height="15" fill="rgb(249,227,8)" fg:x="7343" fg:w="6"/><text x="64.6736%" y="399.50"></text></g><g><title>wisp_mux::fastwebsockets::match_payload (4 samples, 0.04%)</title><rect x="64.4411%" y="373" width="0.0351%" height="15" fill="rgb(253,141,45)" fg:x="7345" fg:w="4"/><text x="64.6911%" y="383.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.02%)</title><rect x="65.1781%" y="357" width="0.0175%" height="15" fill="rgb(234,184,4)" fg:x="7429" fg:w="2"/><text x="65.4281%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.02%)</title><rect x="65.1781%" y="341" width="0.0175%" height="15" fill="rgb(218,194,23)" fg:x="7429" fg:w="2"/><text x="65.4281%" y="351.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (6 samples, 0.05%)</title><rect x="65.2044%" y="341" width="0.0526%" height="15" fill="rgb(235,66,41)" fg:x="7432" fg:w="6"/><text x="65.4544%" y="351.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (6 samples, 0.05%)</title><rect x="65.2044%" y="325" width="0.0526%" height="15" fill="rgb(245,217,1)" fg:x="7432" fg:w="6"/><text x="65.4544%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (3 samples, 0.03%)</title><rect x="65.2307%" y="309" width="0.0263%" height="15" fill="rgb(229,91,1)" fg:x="7435" fg:w="3"/><text x="65.4807%" y="319.50"></text></g><g><title>[libc.so.6] (43 samples, 0.38%)</title><rect x="65.7221%" y="133" width="0.3773%" height="15" fill="rgb(207,101,30)" fg:x="7491" fg:w="43"/><text x="65.9721%" y="143.50"></text></g><g><title>recv (93 samples, 0.82%)</title><rect x="65.3799%" y="149" width="0.8159%" height="15" fill="rgb(223,82,49)" fg:x="7452" fg:w="93"/><text x="65.6299%" y="159.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="66.0993%" y="133" width="0.0965%" height="15" fill="rgb(218,167,17)" fg:x="7534" fg:w="11"/><text x="66.3493%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (103 samples, 0.90%)</title><rect x="65.3799%" y="277" width="0.9037%" height="15" fill="rgb(208,103,14)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="287.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (103 samples, 0.90%)</title><rect x="65.3799%" y="261" width="0.9037%" height="15" fill="rgb(238,20,8)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="271.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (103 samples, 0.90%)</title><rect x="65.3799%" y="245" width="0.9037%" height="15" fill="rgb(218,80,54)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (103 samples, 0.90%)</title><rect x="65.3799%" y="229" width="0.9037%" height="15" fill="rgb(240,144,17)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="239.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (103 samples, 0.90%)</title><rect x="65.3799%" y="213" width="0.9037%" height="15" fill="rgb(245,27,50)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="223.50"></text></g><g><title>std::sys_common::net::TcpStream::read (103 samples, 0.90%)</title><rect x="65.3799%" y="197" width="0.9037%" height="15" fill="rgb(251,51,7)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="207.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (103 samples, 0.90%)</title><rect x="65.3799%" y="181" width="0.9037%" height="15" fill="rgb(245,217,29)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="191.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (103 samples, 0.90%)</title><rect x="65.3799%" y="165" width="0.9037%" height="15" fill="rgb(221,176,29)" fg:x="7452" fg:w="103"/><text x="65.6299%" y="175.50"></text></g><g><title>std::sys::pal::unix::cvt (10 samples, 0.09%)</title><rect x="66.1958%" y="149" width="0.0877%" height="15" fill="rgb(212,180,24)" fg:x="7545" fg:w="10"/><text x="66.4458%" y="159.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (7 samples, 0.06%)</title><rect x="66.2221%" y="133" width="0.0614%" height="15" fill="rgb(254,24,2)" fg:x="7548" fg:w="7"/><text x="66.4721%" y="143.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (2 samples, 0.02%)</title><rect x="66.2836%" y="277" width="0.0175%" height="15" fill="rgb(230,100,2)" fg:x="7555" fg:w="2"/><text x="66.5336%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.20%)</title><rect x="66.3187%" y="229" width="0.2018%" height="15" fill="rgb(219,142,25)" fg:x="7559" fg:w="23"/><text x="66.5687%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.20%)</title><rect x="66.3187%" y="213" width="0.2018%" height="15" fill="rgb(240,73,43)" fg:x="7559" fg:w="23"/><text x="66.5687%" y="223.50"></text></g><g><title>tokio::runtime::io::registration::Registration::clear_readiness (33 samples, 0.29%)</title><rect x="66.3099%" y="277" width="0.2895%" height="15" fill="rgb(214,114,15)" fg:x="7558" fg:w="33"/><text x="66.5599%" y="287.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::clear_readiness (33 samples, 0.29%)</title><rect x="66.3099%" y="261" width="0.2895%" height="15" fill="rgb(207,130,4)" fg:x="7558" fg:w="33"/><text x="66.5599%" y="271.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (33 samples, 0.29%)</title><rect x="66.3099%" y="245" width="0.2895%" height="15" fill="rgb(221,25,40)" fg:x="7558" fg:w="33"/><text x="66.5599%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.08%)</title><rect x="66.5204%" y="229" width="0.0790%" height="15" fill="rgb(241,184,7)" fg:x="7582" fg:w="9"/><text x="66.7704%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.08%)</title><rect x="66.5204%" y="213" width="0.0790%" height="15" fill="rgb(235,159,4)" fg:x="7582" fg:w="9"/><text x="66.7704%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="66.6257%" y="197" width="0.0175%" height="15" fill="rgb(214,87,48)" fg:x="7594" fg:w="2"/><text x="66.8757%" y="207.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (2 samples, 0.02%)</title><rect x="66.6257%" y="181" width="0.0175%" height="15" fill="rgb(246,198,24)" fg:x="7594" fg:w="2"/><text x="66.8757%" y="191.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="66.6257%" y="165" width="0.0175%" height="15" fill="rgb(209,66,40)" fg:x="7594" fg:w="2"/><text x="66.8757%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="66.6257%" y="149" width="0.0175%" height="15" fill="rgb(233,147,39)" fg:x="7594" fg:w="2"/><text x="66.8757%" y="159.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (3 samples, 0.03%)</title><rect x="66.6257%" y="245" width="0.0263%" height="15" fill="rgb(231,145,52)" fg:x="7594" fg:w="3"/><text x="66.8757%" y="255.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.03%)</title><rect x="66.6257%" y="229" width="0.0263%" height="15" fill="rgb(206,20,26)" fg:x="7594" fg:w="3"/><text x="66.8757%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.03%)</title><rect x="66.6257%" y="213" width="0.0263%" height="15" fill="rgb(238,220,4)" fg:x="7594" fg:w="3"/><text x="66.8757%" y="223.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (9 samples, 0.08%)</title><rect x="66.6784%" y="229" width="0.0790%" height="15" fill="rgb(252,195,42)" fg:x="7600" fg:w="9"/><text x="66.9284%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (9 samples, 0.08%)</title><rect x="66.6784%" y="213" width="0.0790%" height="15" fill="rgb(209,10,6)" fg:x="7600" fg:w="9"/><text x="66.9284%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (9 samples, 0.08%)</title><rect x="66.6784%" y="197" width="0.0790%" height="15" fill="rgb(229,3,52)" fg:x="7600" fg:w="9"/><text x="66.9284%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.08%)</title><rect x="66.6784%" y="181" width="0.0790%" height="15" fill="rgb(253,49,37)" fg:x="7600" fg:w="9"/><text x="66.9284%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.08%)</title><rect x="66.6784%" y="165" width="0.0790%" height="15" fill="rgb(240,103,49)" fg:x="7600" fg:w="9"/><text x="66.9284%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (3 samples, 0.03%)</title><rect x="66.7573%" y="229" width="0.0263%" height="15" fill="rgb(250,182,30)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (3 samples, 0.03%)</title><rect x="66.7573%" y="213" width="0.0263%" height="15" fill="rgb(248,8,30)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="223.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="66.7573%" y="197" width="0.0263%" height="15" fill="rgb(237,120,30)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="207.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.03%)</title><rect x="66.7573%" y="181" width="0.0263%" height="15" fill="rgb(221,146,34)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.03%)</title><rect x="66.7573%" y="165" width="0.0263%" height="15" fill="rgb(242,55,13)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="66.7573%" y="149" width="0.0263%" height="15" fill="rgb(242,112,31)" fg:x="7609" fg:w="3"/><text x="67.0073%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.14%)</title><rect x="66.7836%" y="229" width="0.1404%" height="15" fill="rgb(249,192,27)" fg:x="7612" fg:w="16"/><text x="67.0336%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.14%)</title><rect x="66.7836%" y="213" width="0.1404%" height="15" fill="rgb(208,204,44)" fg:x="7612" fg:w="16"/><text x="67.0336%" y="223.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.04%)</title><rect x="66.9240%" y="229" width="0.0351%" height="15" fill="rgb(208,93,54)" fg:x="7628" fg:w="4"/><text x="67.1740%" y="239.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.04%)</title><rect x="66.9240%" y="213" width="0.0351%" height="15" fill="rgb(242,1,31)" fg:x="7628" fg:w="4"/><text x="67.1740%" y="223.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.04%)</title><rect x="66.9240%" y="197" width="0.0351%" height="15" fill="rgb(241,83,25)" fg:x="7628" fg:w="4"/><text x="67.1740%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (4 samples, 0.04%)</title><rect x="66.9240%" y="181" width="0.0351%" height="15" fill="rgb(205,169,50)" fg:x="7628" fg:w="4"/><text x="67.1740%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.04%)</title><rect x="66.9240%" y="165" width="0.0351%" height="15" fill="rgb(239,186,37)" fg:x="7628" fg:w="4"/><text x="67.1740%" y="175.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (195 samples, 1.71%)</title><rect x="65.2571%" y="341" width="1.7108%" height="15" fill="rgb(205,221,10)" fg:x="7438" fg:w="195"/><text x="65.5071%" y="351.50"></text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (194 samples, 1.70%)</title><rect x="65.2658%" y="325" width="1.7021%" height="15" fill="rgb(218,196,15)" fg:x="7439" fg:w="194"/><text x="65.5158%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (187 samples, 1.64%)</title><rect x="65.3273%" y="309" width="1.6406%" height="15" fill="rgb(218,196,35)" fg:x="7446" fg:w="187"/><text x="65.5773%" y="319.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (185 samples, 1.62%)</title><rect x="65.3448%" y="293" width="1.6231%" height="15" fill="rgb(233,63,24)" fg:x="7448" fg:w="185"/><text x="65.5948%" y="303.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (42 samples, 0.37%)</title><rect x="66.5994%" y="277" width="0.3685%" height="15" fill="rgb(225,8,4)" fg:x="7591" fg:w="42"/><text x="66.8494%" y="287.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (41 samples, 0.36%)</title><rect x="66.6082%" y="261" width="0.3597%" height="15" fill="rgb(234,105,35)" fg:x="7592" fg:w="41"/><text x="66.8582%" y="271.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (36 samples, 0.32%)</title><rect x="66.6520%" y="245" width="0.3158%" height="15" fill="rgb(236,21,32)" fg:x="7597" fg:w="36"/><text x="66.9020%" y="255.50"></text></g><g><title>&lt;tokio::io::util::read_buf::ReadBuf&lt;R,B&gt; as core::future::future::Future&gt;::poll (205 samples, 1.80%)</title><rect x="65.1956%" y="357" width="1.7986%" height="15" fill="rgb(228,109,6)" fg:x="7431" fg:w="205"/><text x="65.4456%" y="367.50">&lt;..</text></g><g><title>tokio::io::read_buf::ReadBuf::filled (2 samples, 0.02%)</title><rect x="66.9767%" y="341" width="0.0175%" height="15" fill="rgb(229,215,31)" fg:x="7634" fg:w="2"/><text x="67.2267%" y="351.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u16 (2 samples, 0.02%)</title><rect x="66.9942%" y="357" width="0.0175%" height="15" fill="rgb(221,52,54)" fg:x="7636" fg:w="2"/><text x="67.2442%" y="367.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.02%)</title><rect x="66.9942%" y="341" width="0.0175%" height="15" fill="rgb(252,129,43)" fg:x="7636" fg:w="2"/><text x="67.2442%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.02%)</title><rect x="66.9942%" y="325" width="0.0175%" height="15" fill="rgb(248,183,27)" fg:x="7636" fg:w="2"/><text x="67.2442%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (602 samples, 5.28%)</title><rect x="67.0556%" y="325" width="5.2816%" height="15" fill="rgb(250,0,22)" fg:x="7643" fg:w="602"/><text x="67.3056%" y="335.50">alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (602 samples, 5.28%)</title><rect x="67.0556%" y="309" width="5.2816%" height="15" fill="rgb(213,166,10)" fg:x="7643" fg:w="602"/><text x="67.3056%" y="319.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (602 samples, 5.28%)</title><rect x="67.0556%" y="293" width="5.2816%" height="15" fill="rgb(207,163,36)" fg:x="7643" fg:w="602"/><text x="67.3056%" y="303.50">alloc:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (602 samples, 5.28%)</title><rect x="67.0556%" y="277" width="5.2816%" height="15" fill="rgb(208,122,22)" fg:x="7643" fg:w="602"/><text x="67.3056%" y="287.50">core::..</text></g><g><title>[libc.so.6] (601 samples, 5.27%)</title><rect x="67.0644%" y="261" width="5.2729%" height="15" fill="rgb(207,104,49)" fg:x="7644" fg:w="601"/><text x="67.3144%" y="271.50">[libc...</text></g><g><title>[libc.so.6] (68 samples, 0.60%)</title><rect x="72.3987%" y="149" width="0.5966%" height="15" fill="rgb(248,211,50)" fg:x="8252" fg:w="68"/><text x="72.6487%" y="159.50"></text></g><g><title>[libc.so.6] (63 samples, 0.55%)</title><rect x="72.4425%" y="133" width="0.5527%" height="15" fill="rgb(217,13,45)" fg:x="8257" fg:w="63"/><text x="72.6925%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (76 samples, 0.67%)</title><rect x="72.3373%" y="245" width="0.6668%" height="15" fill="rgb(211,216,49)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (76 samples, 0.67%)</title><rect x="72.3373%" y="229" width="0.6668%" height="15" fill="rgb(221,58,53)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="239.50"></text></g><g><title>alloc::alloc::realloc (76 samples, 0.67%)</title><rect x="72.3373%" y="213" width="0.6668%" height="15" fill="rgb(220,112,41)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="223.50"></text></g><g><title>__rdl_realloc (76 samples, 0.67%)</title><rect x="72.3373%" y="197" width="0.6668%" height="15" fill="rgb(236,38,28)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="207.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (76 samples, 0.67%)</title><rect x="72.3373%" y="181" width="0.6668%" height="15" fill="rgb(227,195,22)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="191.50"></text></g><g><title>realloc (76 samples, 0.67%)</title><rect x="72.3373%" y="165" width="0.6668%" height="15" fill="rgb(214,55,33)" fg:x="8245" fg:w="76"/><text x="72.5873%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77 samples, 0.68%)</title><rect x="72.3373%" y="325" width="0.6756%" height="15" fill="rgb(248,80,13)" fg:x="8245" fg:w="77"/><text x="72.5873%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 0.68%)</title><rect x="72.3373%" y="309" width="0.6756%" height="15" fill="rgb(238,52,6)" fg:x="8245" fg:w="77"/><text x="72.5873%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (77 samples, 0.68%)</title><rect x="72.3373%" y="293" width="0.6756%" height="15" fill="rgb(224,198,47)" fg:x="8245" fg:w="77"/><text x="72.5873%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (77 samples, 0.68%)</title><rect x="72.3373%" y="277" width="0.6756%" height="15" fill="rgb(233,171,20)" fg:x="8245" fg:w="77"/><text x="72.5873%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (77 samples, 0.68%)</title><rect x="72.3373%" y="261" width="0.6756%" height="15" fill="rgb(241,30,25)" fg:x="8245" fg:w="77"/><text x="72.5873%" y="271.50"></text></g><g><title>[libc.so.6] (63 samples, 0.55%)</title><rect x="73.1532%" y="165" width="0.5527%" height="15" fill="rgb(207,171,38)" fg:x="8338" fg:w="63"/><text x="73.4032%" y="175.50"></text></g><g><title>[libc.so.6] (26 samples, 0.23%)</title><rect x="73.4778%" y="149" width="0.2281%" height="15" fill="rgb(234,70,1)" fg:x="8375" fg:w="26"/><text x="73.7278%" y="159.50"></text></g><g><title>__mprotect (9 samples, 0.08%)</title><rect x="73.6270%" y="133" width="0.0790%" height="15" fill="rgb(232,178,18)" fg:x="8392" fg:w="9"/><text x="73.8770%" y="143.50"></text></g><g><title>__rdl_alloc (80 samples, 0.70%)</title><rect x="73.0128%" y="213" width="0.7019%" height="15" fill="rgb(241,78,40)" fg:x="8322" fg:w="80"/><text x="73.2628%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (80 samples, 0.70%)</title><rect x="73.0128%" y="197" width="0.7019%" height="15" fill="rgb(222,35,25)" fg:x="8322" fg:w="80"/><text x="73.2628%" y="207.50"></text></g><g><title>malloc (80 samples, 0.70%)</title><rect x="73.0128%" y="181" width="0.7019%" height="15" fill="rgb(207,92,16)" fg:x="8322" fg:w="80"/><text x="73.2628%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (81 samples, 0.71%)</title><rect x="73.0128%" y="325" width="0.7107%" height="15" fill="rgb(216,59,51)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.71%)</title><rect x="73.0128%" y="309" width="0.7107%" height="15" fill="rgb(213,80,28)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (81 samples, 0.71%)</title><rect x="73.0128%" y="293" width="0.7107%" height="15" fill="rgb(220,93,7)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (81 samples, 0.71%)</title><rect x="73.0128%" y="277" width="0.7107%" height="15" fill="rgb(225,24,44)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.71%)</title><rect x="73.0128%" y="261" width="0.7107%" height="15" fill="rgb(243,74,40)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.71%)</title><rect x="73.0128%" y="245" width="0.7107%" height="15" fill="rgb(228,39,7)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="255.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.71%)</title><rect x="73.0128%" y="229" width="0.7107%" height="15" fill="rgb(227,79,8)" fg:x="8322" fg:w="81"/><text x="73.2628%" y="239.50"></text></g><g><title>bytes::bytes_mut::Shared::is_unique (3 samples, 0.03%)</title><rect x="73.7235%" y="325" width="0.0263%" height="15" fill="rgb(236,58,11)" fg:x="8403" fg:w="3"/><text x="73.9735%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.03%)</title><rect x="73.7235%" y="309" width="0.0263%" height="15" fill="rgb(249,63,35)" fg:x="8403" fg:w="3"/><text x="73.9735%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.03%)</title><rect x="73.7235%" y="293" width="0.0263%" height="15" fill="rgb(252,114,16)" fg:x="8403" fg:w="3"/><text x="73.9735%" y="303.50"></text></g><g><title>bytes::bytes_mut::release_shared (97 samples, 0.85%)</title><rect x="73.7498%" y="325" width="0.8510%" height="15" fill="rgb(254,151,24)" fg:x="8406" fg:w="97"/><text x="73.9998%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (96 samples, 0.84%)</title><rect x="73.7586%" y="309" width="0.8423%" height="15" fill="rgb(253,54,39)" fg:x="8407" fg:w="96"/><text x="74.0086%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (96 samples, 0.84%)</title><rect x="73.7586%" y="293" width="0.8423%" height="15" fill="rgb(243,25,45)" fg:x="8407" fg:w="96"/><text x="74.0086%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1,156 samples, 10.14%)</title><rect x="67.0205%" y="357" width="10.1421%" height="15" fill="rgb(234,134,9)" fg:x="7639" fg:w="1156"/><text x="67.2705%" y="367.50">bytes::bytes_mu..</text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1,155 samples, 10.13%)</title><rect x="67.0293%" y="341" width="10.1334%" height="15" fill="rgb(227,166,31)" fg:x="7640" fg:w="1155"/><text x="67.2793%" y="351.50">bytes::bytes_mu..</text></g><g><title>core::intrinsics::copy_nonoverlapping (292 samples, 2.56%)</title><rect x="74.6008%" y="325" width="2.5619%" height="15" fill="rgb(245,143,41)" fg:x="8503" fg:w="292"/><text x="74.8508%" y="335.50">co..</text></g><g><title>[libc.so.6] (292 samples, 2.56%)</title><rect x="74.6008%" y="309" width="2.5619%" height="15" fill="rgb(238,181,32)" fg:x="8503" fg:w="292"/><text x="74.8508%" y="319.50">[l..</text></g><g><title>__rdl_alloc (45 samples, 0.39%)</title><rect x="77.2153%" y="229" width="0.3948%" height="15" fill="rgb(224,113,18)" fg:x="8801" fg:w="45"/><text x="77.4653%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (45 samples, 0.39%)</title><rect x="77.2153%" y="213" width="0.3948%" height="15" fill="rgb(240,229,28)" fg:x="8801" fg:w="45"/><text x="77.4653%" y="223.50"></text></g><g><title>malloc (45 samples, 0.39%)</title><rect x="77.2153%" y="197" width="0.3948%" height="15" fill="rgb(250,185,3)" fg:x="8801" fg:w="45"/><text x="77.4653%" y="207.50"></text></g><g><title>[libc.so.6] (25 samples, 0.22%)</title><rect x="77.3908%" y="181" width="0.2193%" height="15" fill="rgb(212,59,25)" fg:x="8821" fg:w="25"/><text x="77.6408%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (49 samples, 0.43%)</title><rect x="77.1978%" y="325" width="0.4299%" height="15" fill="rgb(221,87,20)" fg:x="8799" fg:w="49"/><text x="77.4478%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (48 samples, 0.42%)</title><rect x="77.2065%" y="309" width="0.4211%" height="15" fill="rgb(213,74,28)" fg:x="8800" fg:w="48"/><text x="77.4565%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (47 samples, 0.41%)</title><rect x="77.2153%" y="293" width="0.4124%" height="15" fill="rgb(224,132,34)" fg:x="8801" fg:w="47"/><text x="77.4653%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.41%)</title><rect x="77.2153%" y="277" width="0.4124%" height="15" fill="rgb(222,101,24)" fg:x="8801" fg:w="47"/><text x="77.4653%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.41%)</title><rect x="77.2153%" y="261" width="0.4124%" height="15" fill="rgb(254,142,4)" fg:x="8801" fg:w="47"/><text x="77.4653%" y="271.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.41%)</title><rect x="77.2153%" y="245" width="0.4124%" height="15" fill="rgb(230,229,49)" fg:x="8801" fg:w="47"/><text x="77.4653%" y="255.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.02%)</title><rect x="77.6101%" y="229" width="0.0175%" height="15" fill="rgb(238,70,47)" fg:x="8846" fg:w="2"/><text x="77.8601%" y="239.50"></text></g><g><title>fastwebsockets::ReadHalf::parse_frame_header::_{{closure}} (1,490 samples, 13.07%)</title><rect x="64.8008%" y="373" width="13.0725%" height="15" fill="rgb(231,160,17)" fg:x="7386" fg:w="1490"/><text x="65.0508%" y="383.50">fastwebsockets::Read..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (81 samples, 0.71%)</title><rect x="77.1627%" y="357" width="0.7107%" height="15" fill="rgb(218,68,53)" fg:x="8795" fg:w="81"/><text x="77.4127%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (79 samples, 0.69%)</title><rect x="77.1802%" y="341" width="0.6931%" height="15" fill="rgb(236,111,10)" fg:x="8797" fg:w="79"/><text x="77.4302%" y="351.50"></text></g><g><title>bytes::bytes_mut::increment_shared (28 samples, 0.25%)</title><rect x="77.6277%" y="325" width="0.2457%" height="15" fill="rgb(224,34,41)" fg:x="8848" fg:w="28"/><text x="77.8777%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.25%)</title><rect x="77.6277%" y="309" width="0.2457%" height="15" fill="rgb(241,118,19)" fg:x="8848" fg:w="28"/><text x="77.8777%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.25%)</title><rect x="77.6277%" y="293" width="0.2457%" height="15" fill="rgb(238,129,25)" fg:x="8848" fg:w="28"/><text x="77.8777%" y="303.50"></text></g><g><title>fastwebsockets::frame::Payload::to_mut (4 samples, 0.04%)</title><rect x="77.8733%" y="357" width="0.0351%" height="15" fill="rgb(238,22,31)" fg:x="8876" fg:w="4"/><text x="78.1233%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="82.6022%" y="325" width="0.0351%" height="15" fill="rgb(222,174,48)" fg:x="9415" fg:w="4"/><text x="82.8522%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="82.6198%" y="309" width="0.0175%" height="15" fill="rgb(206,152,40)" fg:x="9417" fg:w="2"/><text x="82.8698%" y="319.50"></text></g><g><title>core::ptr::align_offset (4 samples, 0.04%)</title><rect x="82.6373%" y="309" width="0.0351%" height="15" fill="rgb(218,99,54)" fg:x="9419" fg:w="4"/><text x="82.8873%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to_mut (7 samples, 0.06%)</title><rect x="82.6373%" y="325" width="0.0614%" height="15" fill="rgb(220,174,26)" fg:x="9419" fg:w="7"/><text x="82.8873%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::align_to_offsets (3 samples, 0.03%)</title><rect x="82.6724%" y="309" width="0.0263%" height="15" fill="rgb(245,116,9)" fg:x="9423" fg:w="3"/><text x="82.9224%" y="319.50"></text></g><g><title>fastwebsockets::ReadHalf::read_frame_inner::_{{closure}} (2,058 samples, 18.06%)</title><rect x="64.6868%" y="389" width="18.0558%" height="15" fill="rgb(209,72,35)" fg:x="7373" fg:w="2058"/><text x="64.9368%" y="399.50">fastwebsockets::ReadHalf::re..</text></g><g><title>fastwebsockets::frame::Frame::unmask (555 samples, 4.87%)</title><rect x="77.8733%" y="373" width="4.8693%" height="15" fill="rgb(226,126,21)" fg:x="8876" fg:w="555"/><text x="78.1233%" y="383.50">fastwe..</text></g><g><title>fastwebsockets::mask::unmask (551 samples, 4.83%)</title><rect x="77.9084%" y="357" width="4.8342%" height="15" fill="rgb(227,192,1)" fg:x="8880" fg:w="551"/><text x="78.1584%" y="367.50">fastwe..</text></g><g><title>fastwebsockets::mask::unmask_fallback (551 samples, 4.83%)</title><rect x="77.9084%" y="341" width="4.8342%" height="15" fill="rgb(237,180,29)" fg:x="8880" fg:w="551"/><text x="78.1584%" y="351.50">fastwe..</text></g><g><title>fastwebsockets::mask::unmask_easy (5 samples, 0.04%)</title><rect x="82.6987%" y="325" width="0.0439%" height="15" fill="rgb(230,197,35)" fg:x="9426" fg:w="5"/><text x="82.9487%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="82.6987%" y="309" width="0.0439%" height="15" fill="rgb(246,193,31)" fg:x="9426" fg:w="5"/><text x="82.9487%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="82.6987%" y="293" width="0.0439%" height="15" fill="rgb(241,36,4)" fg:x="9426" fg:w="5"/><text x="82.9487%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="82.6987%" y="277" width="0.0439%" height="15" fill="rgb(241,130,17)" fg:x="9426" fg:w="5"/><text x="82.9487%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (4 samples, 0.04%)</title><rect x="82.7075%" y="261" width="0.0351%" height="15" fill="rgb(206,137,32)" fg:x="9427" fg:w="4"/><text x="82.9575%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.04%)</title><rect x="82.7075%" y="245" width="0.0351%" height="15" fill="rgb(237,228,51)" fg:x="9427" fg:w="4"/><text x="82.9575%" y="255.50"></text></g><g><title>fastwebsockets::mask::unmask_easy::_{{closure}} (4 samples, 0.04%)</title><rect x="82.7075%" y="229" width="0.0351%" height="15" fill="rgb(243,6,42)" fg:x="9427" fg:w="4"/><text x="82.9575%" y="239.50"></text></g><g><title>&lt;fastwebsockets::frame::Payload as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="82.8654%" y="373" width="0.0439%" height="15" fill="rgb(251,74,28)" fg:x="9445" fg:w="5"/><text x="83.1154%" y="383.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (3 samples, 0.03%)</title><rect x="82.9093%" y="357" width="0.0263%" height="15" fill="rgb(218,20,49)" fg:x="9450" fg:w="3"/><text x="83.1593%" y="367.50"></text></g><g><title>__rdl_alloc (50 samples, 0.44%)</title><rect x="82.9444%" y="213" width="0.4387%" height="15" fill="rgb(238,28,14)" fg:x="9454" fg:w="50"/><text x="83.1944%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (50 samples, 0.44%)</title><rect x="82.9444%" y="197" width="0.4387%" height="15" fill="rgb(229,40,46)" fg:x="9454" fg:w="50"/><text x="83.1944%" y="207.50"></text></g><g><title>malloc (50 samples, 0.44%)</title><rect x="82.9444%" y="181" width="0.4387%" height="15" fill="rgb(244,195,20)" fg:x="9454" fg:w="50"/><text x="83.1944%" y="191.50"></text></g><g><title>[libc.so.6] (35 samples, 0.31%)</title><rect x="83.0760%" y="165" width="0.3071%" height="15" fill="rgb(253,56,35)" fg:x="9469" fg:w="35"/><text x="83.3260%" y="175.50"></text></g><g><title>[libc.so.6] (10 samples, 0.09%)</title><rect x="83.2953%" y="149" width="0.0877%" height="15" fill="rgb(210,149,44)" fg:x="9494" fg:w="10"/><text x="83.5453%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (51 samples, 0.45%)</title><rect x="82.9444%" y="325" width="0.4474%" height="15" fill="rgb(240,135,12)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.45%)</title><rect x="82.9444%" y="309" width="0.4474%" height="15" fill="rgb(251,24,50)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 0.45%)</title><rect x="82.9444%" y="293" width="0.4474%" height="15" fill="rgb(243,200,47)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (51 samples, 0.45%)</title><rect x="82.9444%" y="277" width="0.4474%" height="15" fill="rgb(224,166,26)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51 samples, 0.45%)</title><rect x="82.9444%" y="261" width="0.4474%" height="15" fill="rgb(233,0,47)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51 samples, 0.45%)</title><rect x="82.9444%" y="245" width="0.4474%" height="15" fill="rgb(253,80,5)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="255.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.45%)</title><rect x="82.9444%" y="229" width="0.4474%" height="15" fill="rgb(214,133,25)" fg:x="9454" fg:w="51"/><text x="83.1944%" y="239.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (56 samples, 0.49%)</title><rect x="82.9356%" y="357" width="0.4913%" height="15" fill="rgb(209,27,14)" fg:x="9453" fg:w="56"/><text x="83.1856%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (56 samples, 0.49%)</title><rect x="82.9356%" y="341" width="0.4913%" height="15" fill="rgb(219,102,51)" fg:x="9453" fg:w="56"/><text x="83.1856%" y="351.50"></text></g><g><title>bytes::bytes_mut::release_shared (2 samples, 0.02%)</title><rect x="83.4094%" y="325" width="0.0175%" height="15" fill="rgb(237,18,16)" fg:x="9507" fg:w="2"/><text x="83.6594%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="83.4094%" y="309" width="0.0175%" height="15" fill="rgb(241,85,17)" fg:x="9507" fg:w="2"/><text x="83.6594%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="83.4094%" y="293" width="0.0175%" height="15" fill="rgb(236,90,42)" fg:x="9507" fg:w="2"/><text x="83.6594%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1,004 samples, 8.81%)</title><rect x="82.9093%" y="373" width="8.8086%" height="15" fill="rgb(249,57,21)" fg:x="9450" fg:w="1004"/><text x="83.1593%" y="383.50">bytes::bytes..</text></g><g><title>core::intrinsics::copy_nonoverlapping (945 samples, 8.29%)</title><rect x="83.4269%" y="357" width="8.2909%" height="15" fill="rgb(243,12,36)" fg:x="9509" fg:w="945"/><text x="83.6769%" y="367.50">core::intrin..</text></g><g><title>[libc.so.6] (945 samples, 8.29%)</title><rect x="83.4269%" y="341" width="8.2909%" height="15" fill="rgb(253,128,47)" fg:x="9509" fg:w="945"/><text x="83.6769%" y="351.50">[libc.so.6]</text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.02%)</title><rect x="91.7178%" y="373" width="0.0175%" height="15" fill="rgb(207,33,20)" fg:x="10454" fg:w="2"/><text x="91.9678%" y="383.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="91.7178%" y="357" width="0.0175%" height="15" fill="rgb(233,215,35)" fg:x="10454" fg:w="2"/><text x="91.9678%" y="367.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="91.7178%" y="341" width="0.0175%" height="15" fill="rgb(249,188,52)" fg:x="10454" fg:w="2"/><text x="91.9678%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.02%)</title><rect x="91.7354%" y="373" width="0.0175%" height="15" fill="rgb(225,12,32)" fg:x="10456" fg:w="2"/><text x="91.9854%" y="383.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,299 samples, 28.94%)</title><rect x="64.2130%" y="437" width="28.9437%" height="15" fill="rgb(247,98,14)" fg:x="7319" fg:w="3299"/><text x="64.4630%" y="447.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fut..</text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::fragment::FragmentCollectorRead&lt;S&gt;&gt;::wisp_read_frame::_{{closure}} (3,299 samples, 28.94%)</title><rect x="64.2130%" y="421" width="28.9437%" height="15" fill="rgb(247,219,48)" fg:x="7319" fg:w="3299"/><text x="64.4630%" y="431.50">wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::..</text></g><g><title>fastwebsockets::fragment::FragmentCollectorRead&lt;S&gt;::read_frame::_{{closure}} (3,269 samples, 28.68%)</title><rect x="64.4762%" y="405" width="28.6805%" height="15" fill="rgb(253,60,48)" fg:x="7349" fg:w="3269"/><text x="64.7262%" y="415.50">fastwebsockets::fragment::FragmentCollectorRea..</text></g><g><title>fastwebsockets::fragment::Fragments::accumulate (1,187 samples, 10.41%)</title><rect x="82.7426%" y="389" width="10.4141%" height="15" fill="rgb(245,15,52)" fg:x="9431" fg:w="1187"/><text x="82.9926%" y="399.50">fastwebsockets:..</text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (159 samples, 1.39%)</title><rect x="91.7617%" y="373" width="1.3950%" height="15" fill="rgb(220,133,28)" fg:x="10459" fg:w="159"/><text x="92.0117%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (159 samples, 1.39%)</title><rect x="91.7617%" y="357" width="1.3950%" height="15" fill="rgb(217,180,4)" fg:x="10459" fg:w="159"/><text x="92.0117%" y="367.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (159 samples, 1.39%)</title><rect x="91.7617%" y="341" width="1.3950%" height="15" fill="rgb(251,24,1)" fg:x="10459" fg:w="159"/><text x="92.0117%" y="351.50"></text></g><g><title>bytes::bytes_mut::release_shared (159 samples, 1.39%)</title><rect x="91.7617%" y="325" width="1.3950%" height="15" fill="rgb(212,185,49)" fg:x="10459" fg:w="159"/><text x="92.0117%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (156 samples, 1.37%)</title><rect x="91.7880%" y="309" width="1.3687%" height="15" fill="rgb(215,175,22)" fg:x="10462" fg:w="156"/><text x="92.0380%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (156 samples, 1.37%)</title><rect x="91.7880%" y="293" width="1.3687%" height="15" fill="rgb(250,205,14)" fg:x="10462" fg:w="156"/><text x="92.0380%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.15%)</title><rect x="93.2093%" y="405" width="0.1491%" height="15" fill="rgb(225,211,22)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.15%)</title><rect x="93.2093%" y="389" width="0.1491%" height="15" fill="rgb(251,179,42)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.15%)</title><rect x="93.2093%" y="373" width="0.1491%" height="15" fill="rgb(208,216,51)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="383.50"></text></g><g><title>__rdl_dealloc (17 samples, 0.15%)</title><rect x="93.2093%" y="357" width="0.1491%" height="15" fill="rgb(235,36,11)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (17 samples, 0.15%)</title><rect x="93.2093%" y="341" width="0.1491%" height="15" fill="rgb(213,189,28)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="351.50"></text></g><g><title>cfree (17 samples, 0.15%)</title><rect x="93.2093%" y="325" width="0.1491%" height="15" fill="rgb(227,203,42)" fg:x="10624" fg:w="17"/><text x="93.4593%" y="335.50"></text></g><g><title>[libc.so.6] (9 samples, 0.08%)</title><rect x="93.2795%" y="309" width="0.0790%" height="15" fill="rgb(244,72,36)" fg:x="10632" fg:w="9"/><text x="93.5295%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (23 samples, 0.20%)</title><rect x="93.1655%" y="437" width="0.2018%" height="15" fill="rgb(213,53,17)" fg:x="10619" fg:w="23"/><text x="93.4155%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (23 samples, 0.20%)</title><rect x="93.1655%" y="421" width="0.2018%" height="15" fill="rgb(207,167,3)" fg:x="10619" fg:w="23"/><text x="93.4155%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,335 samples, 29.26%)</title><rect x="64.1253%" y="469" width="29.2595%" height="15" fill="rgb(216,98,30)" fg:x="7309" fg:w="3335"/><text x="64.3753%" y="479.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fut..</text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame::_{{closure}} (3,335 samples, 29.26%)</title><rect x="64.1253%" y="453" width="29.2595%" height="15" fill="rgb(236,123,15)" fg:x="7309" fg:w="3335"/><text x="64.3753%" y="463.50">&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wis..</text></g><g><title>wisp_mux::fastwebsockets::&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::fragment::FragmentCollectorRead&lt;S&gt;&gt;::wisp_read_frame (2 samples, 0.02%)</title><rect x="93.3673%" y="437" width="0.0175%" height="15" fill="rgb(248,81,50)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (2 samples, 0.02%)</title><rect x="93.3673%" y="421" width="0.0175%" height="15" fill="rgb(214,120,4)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="93.3673%" y="405" width="0.0175%" height="15" fill="rgb(208,179,34)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="93.3673%" y="389" width="0.0175%" height="15" fill="rgb(227,140,7)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="93.3673%" y="373" width="0.0175%" height="15" fill="rgb(214,22,6)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="93.3673%" y="357" width="0.0175%" height="15" fill="rgb(207,137,27)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="93.3673%" y="341" width="0.0175%" height="15" fill="rgb(210,8,46)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="351.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="93.3673%" y="325" width="0.0175%" height="15" fill="rgb(240,16,54)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="335.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="93.3673%" y="309" width="0.0175%" height="15" fill="rgb(211,209,29)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="319.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="93.3673%" y="293" width="0.0175%" height="15" fill="rgb(226,228,24)" fg:x="10642" fg:w="2"/><text x="93.6173%" y="303.50"></text></g><g><title>&lt;wisp_mux::packet::StreamType as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="93.3936%" y="469" width="0.0175%" height="15" fill="rgb(222,84,9)" fg:x="10645" fg:w="2"/><text x="93.6436%" y="479.50"></text></g><g><title>&lt;wisp_mux::ws::AppendingWebSocketRead&lt;R&gt; as wisp_mux::ws::WebSocketRead&gt;::wisp_read_frame (2 samples, 0.02%)</title><rect x="93.4111%" y="469" width="0.0175%" height="15" fill="rgb(234,203,30)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (2 samples, 0.02%)</title><rect x="93.4111%" y="453" width="0.0175%" height="15" fill="rgb(238,109,14)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="93.4111%" y="437" width="0.0175%" height="15" fill="rgb(233,206,34)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="93.4111%" y="421" width="0.0175%" height="15" fill="rgb(220,167,47)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="93.4111%" y="405" width="0.0175%" height="15" fill="rgb(238,105,10)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="93.4111%" y="389" width="0.0175%" height="15" fill="rgb(213,227,17)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="93.4111%" y="373" width="0.0175%" height="15" fill="rgb(217,132,38)" fg:x="10647" fg:w="2"/><text x="93.6611%" y="383.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (4 samples, 0.04%)</title><rect x="93.4287%" y="469" width="0.0351%" height="15" fill="rgb(242,146,4)" fg:x="10649" fg:w="4"/><text x="93.6787%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (16 samples, 0.14%)</title><rect x="93.4725%" y="469" width="0.1404%" height="15" fill="rgb(212,61,9)" fg:x="10654" fg:w="16"/><text x="93.7225%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (16 samples, 0.14%)</title><rect x="93.4725%" y="453" width="0.1404%" height="15" fill="rgb(247,126,22)" fg:x="10654" fg:w="16"/><text x="93.7225%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="93.5076%" y="437" width="0.1053%" height="15" fill="rgb(220,196,2)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.11%)</title><rect x="93.5076%" y="421" width="0.1053%" height="15" fill="rgb(208,46,4)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.11%)</title><rect x="93.5076%" y="405" width="0.1053%" height="15" fill="rgb(252,104,46)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="415.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.11%)</title><rect x="93.5076%" y="389" width="0.1053%" height="15" fill="rgb(237,152,48)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.11%)</title><rect x="93.5076%" y="373" width="0.1053%" height="15" fill="rgb(221,59,37)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="383.50"></text></g><g><title>cfree (12 samples, 0.11%)</title><rect x="93.5076%" y="357" width="0.1053%" height="15" fill="rgb(209,202,51)" fg:x="10658" fg:w="12"/><text x="93.7576%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="93.5954%" y="341" width="0.0175%" height="15" fill="rgb(228,81,30)" fg:x="10668" fg:w="2"/><text x="93.8454%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;u32,wisp_mux::MuxMapValue&gt;&gt; (6 samples, 0.05%)</title><rect x="93.6217%" y="469" width="0.0526%" height="15" fill="rgb(227,42,39)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;u32,dashmap::util::SharedValue&lt;wisp_mux::MuxMapValue&gt;,std::hash::random::RandomState&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="93.6217%" y="453" width="0.0526%" height="15" fill="rgb(221,26,2)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="463.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="93.6217%" y="437" width="0.0526%" height="15" fill="rgb(254,61,31)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="447.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (6 samples, 0.05%)</title><rect x="93.6217%" y="421" width="0.0526%" height="15" fill="rgb(222,173,38)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.05%)</title><rect x="93.6217%" y="405" width="0.0526%" height="15" fill="rgb(218,50,12)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.05%)</title><rect x="93.6217%" y="389" width="0.0526%" height="15" fill="rgb(223,88,40)" fg:x="10671" fg:w="6"/><text x="93.8717%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3 samples, 0.03%)</title><rect x="93.6743%" y="469" width="0.0263%" height="15" fill="rgb(237,54,19)" fg:x="10677" fg:w="3"/><text x="93.9243%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.03%)</title><rect x="93.6743%" y="453" width="0.0263%" height="15" fill="rgb(251,129,25)" fg:x="10677" fg:w="3"/><text x="93.9243%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.07%)</title><rect x="93.7006%" y="373" width="0.0702%" height="15" fill="rgb(238,97,19)" fg:x="10680" fg:w="8"/><text x="93.9506%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.07%)</title><rect x="93.7006%" y="357" width="0.0702%" height="15" fill="rgb(240,169,18)" fg:x="10680" fg:w="8"/><text x="93.9506%" y="367.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (13 samples, 0.11%)</title><rect x="93.7006%" y="437" width="0.1141%" height="15" fill="rgb(230,187,49)" fg:x="10680" fg:w="13"/><text x="93.9506%" y="447.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (13 samples, 0.11%)</title><rect x="93.7006%" y="421" width="0.1141%" height="15" fill="rgb(209,44,26)" fg:x="10680" fg:w="13"/><text x="93.9506%" y="431.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (13 samples, 0.11%)</title><rect x="93.7006%" y="405" width="0.1141%" height="15" fill="rgb(244,0,6)" fg:x="10680" fg:w="13"/><text x="93.9506%" y="415.50"></text></g><g><title>dashmap::lock::RawRwLock::try_lock_shared_fast (13 samples, 0.11%)</title><rect x="93.7006%" y="389" width="0.1141%" height="15" fill="rgb(248,18,21)" fg:x="10680" fg:w="13"/><text x="93.9506%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.04%)</title><rect x="93.7708%" y="373" width="0.0439%" height="15" fill="rgb(245,180,19)" fg:x="10688" fg:w="5"/><text x="94.0208%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="93.7708%" y="357" width="0.0439%" height="15" fill="rgb(252,118,36)" fg:x="10688" fg:w="5"/><text x="94.0208%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="93.8147%" y="373" width="0.0175%" height="15" fill="rgb(210,224,19)" fg:x="10693" fg:w="2"/><text x="94.0647%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="93.8147%" y="357" width="0.0175%" height="15" fill="rgb(218,30,24)" fg:x="10693" fg:w="2"/><text x="94.0647%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="93.8147%" y="421" width="0.0263%" height="15" fill="rgb(219,75,50)" fg:x="10693" fg:w="3"/><text x="94.0647%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="93.8147%" y="405" width="0.0263%" height="15" fill="rgb(234,72,50)" fg:x="10693" fg:w="3"/><text x="94.0647%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="93.8147%" y="389" width="0.0263%" height="15" fill="rgb(219,100,48)" fg:x="10693" fg:w="3"/><text x="94.0647%" y="399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="93.8410%" y="421" width="0.0175%" height="15" fill="rgb(253,5,41)" fg:x="10696" fg:w="2"/><text x="94.0910%" y="431.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="93.8410%" y="405" width="0.0175%" height="15" fill="rgb(247,181,11)" fg:x="10696" fg:w="2"/><text x="94.0910%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="93.8410%" y="389" width="0.0175%" height="15" fill="rgb(222,223,25)" fg:x="10696" fg:w="2"/><text x="94.0910%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.02%)</title><rect x="93.8410%" y="373" width="0.0175%" height="15" fill="rgb(214,198,28)" fg:x="10696" fg:w="2"/><text x="94.0910%" y="383.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (8 samples, 0.07%)</title><rect x="93.8147%" y="437" width="0.0702%" height="15" fill="rgb(230,46,43)" fg:x="10693" fg:w="8"/><text x="94.0647%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.03%)</title><rect x="93.8586%" y="421" width="0.0263%" height="15" fill="rgb(233,65,53)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (3 samples, 0.03%)</title><rect x="93.8586%" y="405" width="0.0263%" height="15" fill="rgb(221,121,27)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u32 (3 samples, 0.03%)</title><rect x="93.8586%" y="389" width="0.0263%" height="15" fill="rgb(247,70,47)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="93.8586%" y="373" width="0.0263%" height="15" fill="rgb(228,85,35)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="93.8586%" y="357" width="0.0263%" height="15" fill="rgb(209,50,18)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="93.8586%" y="341" width="0.0263%" height="15" fill="rgb(250,19,35)" fg:x="10698" fg:w="3"/><text x="94.1086%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.03%)</title><rect x="93.8849%" y="341" width="0.0263%" height="15" fill="rgb(253,107,29)" fg:x="10701" fg:w="3"/><text x="94.1349%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="93.8937%" y="325" width="0.0175%" height="15" fill="rgb(252,179,29)" fg:x="10702" fg:w="2"/><text x="94.1437%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="93.8849%" y="389" width="0.0526%" height="15" fill="rgb(238,194,6)" fg:x="10701" fg:w="6"/><text x="94.1349%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="93.8849%" y="373" width="0.0526%" height="15" fill="rgb(238,164,29)" fg:x="10701" fg:w="6"/><text x="94.1349%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="93.8849%" y="357" width="0.0526%" height="15" fill="rgb(224,25,9)" fg:x="10701" fg:w="6"/><text x="94.1349%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.03%)</title><rect x="93.9112%" y="341" width="0.0263%" height="15" fill="rgb(244,153,23)" fg:x="10704" fg:w="3"/><text x="94.1612%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="93.9200%" y="325" width="0.0175%" height="15" fill="rgb(212,203,14)" fg:x="10705" fg:w="2"/><text x="94.1700%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.08%)</title><rect x="93.8849%" y="405" width="0.0790%" height="15" fill="rgb(220,164,20)" fg:x="10701" fg:w="9"/><text x="94.1349%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.02%)</title><rect x="93.9463%" y="389" width="0.0175%" height="15" fill="rgb(222,203,48)" fg:x="10708" fg:w="2"/><text x="94.1963%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u32 (2 samples, 0.02%)</title><rect x="93.9463%" y="373" width="0.0175%" height="15" fill="rgb(215,159,22)" fg:x="10708" fg:w="2"/><text x="94.1963%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="93.9463%" y="357" width="0.0175%" height="15" fill="rgb(216,183,47)" fg:x="10708" fg:w="2"/><text x="94.1963%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="93.9463%" y="341" width="0.0175%" height="15" fill="rgb(229,195,25)" fg:x="10708" fg:w="2"/><text x="94.1963%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="93.9463%" y="325" width="0.0175%" height="15" fill="rgb(224,132,51)" fg:x="10708" fg:w="2"/><text x="94.1963%" y="335.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (3 samples, 0.03%)</title><rect x="94.0077%" y="357" width="0.0263%" height="15" fill="rgb(240,63,7)" fg:x="10715" fg:w="3"/><text x="94.2577%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.03%)</title><rect x="94.0077%" y="341" width="0.0263%" height="15" fill="rgb(249,182,41)" fg:x="10715" fg:w="3"/><text x="94.2577%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="94.0077%" y="325" width="0.0263%" height="15" fill="rgb(243,47,26)" fg:x="10715" fg:w="3"/><text x="94.2577%" y="335.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (40 samples, 0.35%)</title><rect x="93.7006%" y="469" width="0.3509%" height="15" fill="rgb(233,48,2)" fg:x="10680" fg:w="40"/><text x="93.9506%" y="479.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (40 samples, 0.35%)</title><rect x="93.7006%" y="453" width="0.3509%" height="15" fill="rgb(244,165,34)" fg:x="10680" fg:w="40"/><text x="93.9506%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (19 samples, 0.17%)</title><rect x="93.8849%" y="437" width="0.1667%" height="15" fill="rgb(207,89,7)" fg:x="10701" fg:w="19"/><text x="94.1349%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (19 samples, 0.17%)</title><rect x="93.8849%" y="421" width="0.1667%" height="15" fill="rgb(244,117,36)" fg:x="10701" fg:w="19"/><text x="94.1349%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (10 samples, 0.09%)</title><rect x="93.9639%" y="405" width="0.0877%" height="15" fill="rgb(226,144,34)" fg:x="10710" fg:w="10"/><text x="94.2139%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (10 samples, 0.09%)</title><rect x="93.9639%" y="389" width="0.0877%" height="15" fill="rgb(213,23,19)" fg:x="10710" fg:w="10"/><text x="94.2139%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (10 samples, 0.09%)</title><rect x="93.9639%" y="373" width="0.0877%" height="15" fill="rgb(217,75,12)" fg:x="10710" fg:w="10"/><text x="94.2139%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="94.0340%" y="357" width="0.0175%" height="15" fill="rgb(224,159,17)" fg:x="10718" fg:w="2"/><text x="94.2840%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="94.0340%" y="341" width="0.0175%" height="15" fill="rgb(217,118,1)" fg:x="10718" fg:w="2"/><text x="94.2840%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.02%)</title><rect x="94.0779%" y="421" width="0.0175%" height="15" fill="rgb(232,180,48)" fg:x="10723" fg:w="2"/><text x="94.3279%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (2 samples, 0.02%)</title><rect x="94.0779%" y="405" width="0.0175%" height="15" fill="rgb(230,27,33)" fg:x="10723" fg:w="2"/><text x="94.3279%" y="415.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="94.0779%" y="389" width="0.0175%" height="15" fill="rgb(205,31,21)" fg:x="10723" fg:w="2"/><text x="94.3279%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (2 samples, 0.02%)</title><rect x="94.0955%" y="405" width="0.0175%" height="15" fill="rgb(253,59,4)" fg:x="10725" fg:w="2"/><text x="94.3455%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="94.0955%" y="389" width="0.0175%" height="15" fill="rgb(224,201,9)" fg:x="10725" fg:w="2"/><text x="94.3455%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (4 samples, 0.04%)</title><rect x="94.0955%" y="421" width="0.0351%" height="15" fill="rgb(229,206,30)" fg:x="10725" fg:w="4"/><text x="94.3455%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="94.1305%" y="421" width="0.0263%" height="15" fill="rgb(212,67,47)" fg:x="10729" fg:w="3"/><text x="94.3805%" y="431.50"></text></g><g><title>flume::Shared&lt;T&gt;::send::_{{closure}} (3 samples, 0.03%)</title><rect x="94.1305%" y="405" width="0.0263%" height="15" fill="rgb(211,96,50)" fg:x="10729" fg:w="3"/><text x="94.3805%" y="415.50"></text></g><g><title>flume::Hook&lt;T,S&gt;::fire_send (2 samples, 0.02%)</title><rect x="94.1393%" y="389" width="0.0175%" height="15" fill="rgb(252,114,18)" fg:x="10730" fg:w="2"/><text x="94.3893%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="94.1569%" y="421" width="0.0175%" height="15" fill="rgb(223,58,37)" fg:x="10732" fg:w="2"/><text x="94.4069%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;bytes::bytes::Bytes,dyn flume::signal::Signal&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="94.1569%" y="405" width="0.0175%" height="15" fill="rgb(237,70,4)" fg:x="10732" fg:w="2"/><text x="94.4069%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="94.1569%" y="389" width="0.0175%" height="15" fill="rgb(244,85,46)" fg:x="10732" fg:w="2"/><text x="94.4069%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="94.1569%" y="373" width="0.0175%" height="15" fill="rgb(223,39,52)" fg:x="10732" fg:w="2"/><text x="94.4069%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="94.1569%" y="357" width="0.0175%" height="15" fill="rgb(218,200,14)" fg:x="10732" fg:w="2"/><text x="94.4069%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;bytes::bytes::Bytes&gt;&gt;&gt; (15 samples, 0.13%)</title><rect x="94.1744%" y="421" width="0.1316%" height="15" fill="rgb(208,171,16)" fg:x="10734" fg:w="15"/><text x="94.4244%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.13%)</title><rect x="94.1744%" y="405" width="0.1316%" height="15" fill="rgb(234,200,18)" fg:x="10734" fg:w="15"/><text x="94.4244%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (15 samples, 0.13%)</title><rect x="94.1744%" y="389" width="0.1316%" height="15" fill="rgb(228,45,11)" fg:x="10734" fg:w="15"/><text x="94.4244%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.12%)</title><rect x="94.1832%" y="373" width="0.1228%" height="15" fill="rgb(237,182,11)" fg:x="10735" fg:w="14"/><text x="94.4332%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.12%)</title><rect x="94.1832%" y="357" width="0.1228%" height="15" fill="rgb(241,175,49)" fg:x="10735" fg:w="14"/><text x="94.4332%" y="367.50"></text></g><g><title>flume::Sender&lt;T&gt;::try_send (58 samples, 0.51%)</title><rect x="94.0516%" y="469" width="0.5089%" height="15" fill="rgb(247,38,35)" fg:x="10720" fg:w="58"/><text x="94.3016%" y="479.50"></text></g><g><title>flume::Shared&lt;T&gt;::send_sync (58 samples, 0.51%)</title><rect x="94.0516%" y="453" width="0.5089%" height="15" fill="rgb(228,39,49)" fg:x="10720" fg:w="58"/><text x="94.3016%" y="463.50"></text></g><g><title>flume::Shared&lt;T&gt;::send (58 samples, 0.51%)</title><rect x="94.0516%" y="437" width="0.5089%" height="15" fill="rgb(226,101,26)" fg:x="10720" fg:w="58"/><text x="94.3016%" y="447.50"></text></g><g><title>flume::wait_lock (28 samples, 0.25%)</title><rect x="94.3148%" y="421" width="0.2457%" height="15" fill="rgb(206,141,19)" fg:x="10750" fg:w="28"/><text x="94.5648%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.25%)</title><rect x="94.3148%" y="405" width="0.2457%" height="15" fill="rgb(211,200,13)" fg:x="10750" fg:w="28"/><text x="94.5648%" y="415.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (28 samples, 0.25%)</title><rect x="94.3148%" y="389" width="0.2457%" height="15" fill="rgb(241,121,6)" fg:x="10750" fg:w="28"/><text x="94.5648%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (28 samples, 0.25%)</title><rect x="94.3148%" y="373" width="0.2457%" height="15" fill="rgb(234,221,29)" fg:x="10750" fg:w="28"/><text x="94.5648%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (28 samples, 0.25%)</title><rect x="94.3148%" y="357" width="0.2457%" height="15" fill="rgb(229,136,5)" fg:x="10750" fg:w="28"/><text x="94.5648%" y="367.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32_le (4 samples, 0.04%)</title><rect x="94.6482%" y="453" width="0.0351%" height="15" fill="rgb(238,36,11)" fg:x="10788" fg:w="4"/><text x="94.8982%" y="463.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.02%)</title><rect x="94.6657%" y="437" width="0.0175%" height="15" fill="rgb(251,55,41)" fg:x="10790" fg:w="2"/><text x="94.9157%" y="447.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.02%)</title><rect x="94.6657%" y="421" width="0.0175%" height="15" fill="rgb(242,34,40)" fg:x="10790" fg:w="2"/><text x="94.9157%" y="431.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.02%)</title><rect x="94.6657%" y="405" width="0.0175%" height="15" fill="rgb(215,42,17)" fg:x="10790" fg:w="2"/><text x="94.9157%" y="415.50"></text></g><g><title>wisp_mux::MuxInner::server_loop::_{{closure}} (3,550 samples, 31.15%)</title><rect x="63.5989%" y="485" width="31.1458%" height="15" fill="rgb(207,44,46)" fg:x="7249" fg:w="3550"/><text x="63.8489%" y="495.50">wisp_mux::MuxInner::server_loop::_{{closure}}</text></g><g><title>wisp_mux::packet::Packet::maybe_handle_extension::_{{closure}} (21 samples, 0.18%)</title><rect x="94.5604%" y="469" width="0.1842%" height="15" fill="rgb(211,206,28)" fg:x="10778" fg:w="21"/><text x="94.8104%" y="479.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (7 samples, 0.06%)</title><rect x="94.6833%" y="453" width="0.0614%" height="15" fill="rgb(237,167,16)" fg:x="10792" fg:w="7"/><text x="94.9333%" y="463.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.04%)</title><rect x="94.7008%" y="437" width="0.0439%" height="15" fill="rgb(233,66,6)" fg:x="10794" fg:w="5"/><text x="94.9508%" y="447.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.04%)</title><rect x="94.7008%" y="421" width="0.0439%" height="15" fill="rgb(246,123,29)" fg:x="10794" fg:w="5"/><text x="94.9508%" y="431.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.04%)</title><rect x="94.7096%" y="405" width="0.0351%" height="15" fill="rgb(209,62,40)" fg:x="10795" fg:w="4"/><text x="94.9596%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="94.7622%" y="437" width="0.0175%" height="15" fill="rgb(218,4,25)" fg:x="10801" fg:w="2"/><text x="95.0122%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="94.7622%" y="421" width="0.0175%" height="15" fill="rgb(253,91,49)" fg:x="10801" fg:w="2"/><text x="95.0122%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="94.7622%" y="405" width="0.0175%" height="15" fill="rgb(228,155,29)" fg:x="10801" fg:w="2"/><text x="95.0122%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="94.7622%" y="389" width="0.0175%" height="15" fill="rgb(243,57,37)" fg:x="10801" fg:w="2"/><text x="95.0122%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="94.7622%" y="373" width="0.0175%" height="15" fill="rgb(244,167,17)" fg:x="10801" fg:w="2"/><text x="95.0122%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;flume::Hook&lt;wisp_mux::stream::WsEvent,flume::async::AsyncSignal&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="94.7798%" y="437" width="0.0175%" height="15" fill="rgb(207,181,38)" fg:x="10803" fg:w="2"/><text x="95.0298%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="94.7798%" y="421" width="0.0175%" height="15" fill="rgb(211,8,23)" fg:x="10803" fg:w="2"/><text x="95.0298%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="94.7798%" y="405" width="0.0175%" height="15" fill="rgb(235,11,44)" fg:x="10803" fg:w="2"/><text x="95.0298%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="94.7798%" y="389" width="0.0175%" height="15" fill="rgb(248,18,52)" fg:x="10803" fg:w="2"/><text x="95.0298%" y="399.50"></text></g><g><title>std::sync::poison::Flag::done (2 samples, 0.02%)</title><rect x="94.7973%" y="357" width="0.0175%" height="15" fill="rgb(208,4,7)" fg:x="10805" fg:w="2"/><text x="95.0473%" y="367.50"></text></g><g><title>core::mem::drop (11 samples, 0.10%)</title><rect x="94.7973%" y="405" width="0.0965%" height="15" fill="rgb(240,17,39)" fg:x="10805" fg:w="11"/><text x="95.0473%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;flume::Chan&lt;wisp_mux::stream::WsEvent&gt;&gt;&gt; (11 samples, 0.10%)</title><rect x="94.7973%" y="389" width="0.0965%" height="15" fill="rgb(207,170,3)" fg:x="10805" fg:w="11"/><text x="95.0473%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="94.7973%" y="373" width="0.0965%" height="15" fill="rgb(236,100,52)" fg:x="10805" fg:w="11"/><text x="95.0473%" y="383.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (9 samples, 0.08%)</title><rect x="94.8149%" y="357" width="0.0790%" height="15" fill="rgb(246,78,51)" fg:x="10807" fg:w="9"/><text x="95.0649%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (9 samples, 0.08%)</title><rect x="94.8149%" y="341" width="0.0790%" height="15" fill="rgb(211,17,15)" fg:x="10807" fg:w="9"/><text x="95.0649%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (9 samples, 0.08%)</title><rect x="94.8149%" y="325" width="0.0790%" height="15" fill="rgb(209,59,46)" fg:x="10807" fg:w="9"/><text x="95.0649%" y="335.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv_sync (22 samples, 0.19%)</title><rect x="94.7973%" y="437" width="0.1930%" height="15" fill="rgb(210,92,25)" fg:x="10805" fg:w="22"/><text x="95.0473%" y="447.50"></text></g><g><title>flume::Shared&lt;T&gt;::recv (22 samples, 0.19%)</title><rect x="94.7973%" y="421" width="0.1930%" height="15" fill="rgb(238,174,52)" fg:x="10805" fg:w="22"/><text x="95.0473%" y="431.50"></text></g><g><title>flume::wait_lock (11 samples, 0.10%)</title><rect x="94.8938%" y="405" width="0.0965%" height="15" fill="rgb(230,73,7)" fg:x="10816" fg:w="11"/><text x="95.1438%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.10%)</title><rect x="94.8938%" y="389" width="0.0965%" height="15" fill="rgb(243,124,40)" fg:x="10816" fg:w="11"/><text x="95.1438%" y="399.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (11 samples, 0.10%)</title><rect x="94.8938%" y="373" width="0.0965%" height="15" fill="rgb(244,170,11)" fg:x="10816" fg:w="11"/><text x="95.1438%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (10 samples, 0.09%)</title><rect x="94.9026%" y="357" width="0.0877%" height="15" fill="rgb(207,114,54)" fg:x="10817" fg:w="10"/><text x="95.1526%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.09%)</title><rect x="94.9026%" y="341" width="0.0877%" height="15" fill="rgb(205,42,20)" fg:x="10817" fg:w="10"/><text x="95.1526%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,596 samples, 31.55%)</title><rect x="63.5199%" y="565" width="31.5494%" height="15" fill="rgb(230,30,28)" fg:x="7240" fg:w="3596"/><text x="63.7699%" y="575.50">core::ops::function::impls::&lt;impl core::ops::functi..</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}}::_{{closure}} (3,596 samples, 31.55%)</title><rect x="63.5199%" y="549" width="31.5494%" height="15" fill="rgb(205,73,54)" fg:x="7240" fg:w="3596"/><text x="63.7699%" y="559.50">wisp_mux::MuxInner::as_future::_{{closure}}::_{{clo..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,587 samples, 31.47%)</title><rect x="63.5989%" y="533" width="31.4704%" height="15" fill="rgb(254,227,23)" fg:x="7249" fg:w="3587"/><text x="63.8489%" y="543.50">futures_util::future::future::FutureExt::poll_unpin</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,587 samples, 31.47%)</title><rect x="63.5989%" y="517" width="31.4704%" height="15" fill="rgb(228,202,34)" fg:x="7249" fg:w="3587"/><text x="63.8489%" y="527.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (3,587 samples, 31.47%)</title><rect x="63.5989%" y="501" width="31.4704%" height="15" fill="rgb(222,225,37)" fg:x="7249" fg:w="3587"/><text x="63.8489%" y="511.50">&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as c..</text></g><g><title>wisp_mux::MuxInner::stream_loop::_{{closure}} (37 samples, 0.32%)</title><rect x="94.7447%" y="485" width="0.3246%" height="15" fill="rgb(221,14,54)" fg:x="10799" fg:w="37"/><text x="94.9947%" y="495.50"></text></g><g><title>&lt;flume::async::RecvFut&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.31%)</title><rect x="94.7622%" y="469" width="0.3071%" height="15" fill="rgb(254,102,2)" fg:x="10801" fg:w="35"/><text x="95.0122%" y="479.50"></text></g><g><title>flume::async::RecvFut&lt;T&gt;::poll_inner (35 samples, 0.31%)</title><rect x="94.7622%" y="453" width="0.3071%" height="15" fill="rgb(232,104,17)" fg:x="10801" fg:w="35"/><text x="95.0122%" y="463.50"></text></g><g><title>flume::async::&lt;impl flume::Hook&lt;T,flume::async::AsyncSignal&gt;&gt;::update_waker (9 samples, 0.08%)</title><rect x="94.9903%" y="437" width="0.0790%" height="15" fill="rgb(250,220,14)" fg:x="10827" fg:w="9"/><text x="95.2403%" y="447.50"></text></g><g><title>spin::mutex::Mutex&lt;T,R&gt;::lock (8 samples, 0.07%)</title><rect x="94.9991%" y="421" width="0.0702%" height="15" fill="rgb(241,158,9)" fg:x="10828" fg:w="8"/><text x="95.2491%" y="431.50"></text></g><g><title>spin::mutex::spin::SpinMutex&lt;T,R&gt;::lock (8 samples, 0.07%)</title><rect x="94.9991%" y="405" width="0.0702%" height="15" fill="rgb(246,9,43)" fg:x="10828" fg:w="8"/><text x="95.2491%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange_weak (7 samples, 0.06%)</title><rect x="95.0079%" y="389" width="0.0614%" height="15" fill="rgb(206,73,33)" fg:x="10829" fg:w="7"/><text x="95.2579%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7 samples, 0.06%)</title><rect x="95.0079%" y="373" width="0.0614%" height="15" fill="rgb(222,79,8)" fg:x="10829" fg:w="7"/><text x="95.2579%" y="383.50"></text></g><g><title>&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (8,906 samples, 78.14%)</title><rect x="16.9591%" y="645" width="78.1365%" height="15" fill="rgb(234,8,54)" fg:x="1933" fg:w="8906"/><text x="17.2091%" y="655.50">&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll::_{{closure}}</text></g><g><title>wisp_mux::MuxInner::server_into_future::_{{closure}} (3,614 samples, 31.71%)</title><rect x="63.3883%" y="629" width="31.7073%" height="15" fill="rgb(209,134,38)" fg:x="7225" fg:w="3614"/><text x="63.6383%" y="639.50">wisp_mux::MuxInner::server_into_future::_{{closure}}</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}} (3,613 samples, 31.70%)</title><rect x="63.3971%" y="613" width="31.6985%" height="15" fill="rgb(230,127,29)" fg:x="7226" fg:w="3613"/><text x="63.6471%" y="623.50">wisp_mux::MuxInner::as_future::_{{closure}}</text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3,605 samples, 31.63%)</title><rect x="63.4673%" y="597" width="31.6284%" height="15" fill="rgb(242,44,41)" fg:x="7234" fg:w="3605"/><text x="63.7173%" y="607.50">&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::..</text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}} (3,605 samples, 31.63%)</title><rect x="63.4673%" y="581" width="31.6284%" height="15" fill="rgb(222,56,43)" fg:x="7234" fg:w="3605"/><text x="63.7173%" y="591.50">wisp_mux::MuxInner::as_future::_{{closure}}::_{{clo..</text></g><g><title>futures_util::async_await::random::shuffle (3 samples, 0.03%)</title><rect x="95.0693%" y="565" width="0.0263%" height="15" fill="rgb(238,39,47)" fg:x="10836" fg:w="3"/><text x="95.3193%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (3 samples, 0.03%)</title><rect x="95.0693%" y="549" width="0.0263%" height="15" fill="rgb(226,79,43)" fg:x="10836" fg:w="3"/><text x="95.3193%" y="559.50"></text></g><g><title>core::ptr::swap (3 samples, 0.03%)</title><rect x="95.0693%" y="533" width="0.0263%" height="15" fill="rgb(242,105,53)" fg:x="10836" fg:w="3"/><text x="95.3193%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="95.0693%" y="517" width="0.0263%" height="15" fill="rgb(251,132,46)" fg:x="10836" fg:w="3"/><text x="95.3193%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;tokio::runtime::coop::with_budget::ResetGuard,std::thread::local::AccessError&gt;&gt; (2 samples, 0.02%)</title><rect x="95.0956%" y="645" width="0.0175%" height="15" fill="rgb(231,77,14)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::with_budget::ResetGuard&gt; (2 samples, 0.02%)</title><rect x="95.0956%" y="629" width="0.0175%" height="15" fill="rgb(240,135,9)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="639.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="95.0956%" y="613" width="0.0175%" height="15" fill="rgb(248,109,14)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="623.50"></text></g><g><title>tokio::runtime::context::budget (2 samples, 0.02%)</title><rect x="95.0956%" y="597" width="0.0175%" height="15" fill="rgb(227,146,52)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="95.0956%" y="581" width="0.0175%" height="15" fill="rgb(232,54,3)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="591.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (2 samples, 0.02%)</title><rect x="95.0956%" y="565" width="0.0175%" height="15" fill="rgb(229,201,43)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="575.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop::_{{closure}} (2 samples, 0.02%)</title><rect x="95.0956%" y="549" width="0.0175%" height="15" fill="rgb(252,161,33)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="95.0956%" y="533" width="0.0175%" height="15" fill="rgb(226,146,40)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="95.0956%" y="517" width="0.0175%" height="15" fill="rgb(219,47,25)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="527.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="95.0956%" y="501" width="0.0175%" height="15" fill="rgb(250,135,13)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="511.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="95.0956%" y="485" width="0.0175%" height="15" fill="rgb(219,229,18)" fg:x="10839" fg:w="2"/><text x="95.3456%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.03%)</title><rect x="95.1132%" y="613" width="0.0263%" height="15" fill="rgb(217,152,27)" fg:x="10841" fg:w="3"/><text x="95.3632%" y="623.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (3 samples, 0.03%)</title><rect x="95.1132%" y="597" width="0.0263%" height="15" fill="rgb(225,71,47)" fg:x="10841" fg:w="3"/><text x="95.3632%" y="607.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (3 samples, 0.03%)</title><rect x="95.1132%" y="581" width="0.0263%" height="15" fill="rgb(220,139,14)" fg:x="10841" fg:w="3"/><text x="95.3632%" y="591.50"></text></g><g><title>&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll (8,913 samples, 78.20%)</title><rect x="16.9591%" y="693" width="78.1979%" height="15" fill="rgb(247,54,32)" fg:x="1933" fg:w="8913"/><text x="17.2091%" y="703.50">&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::coop::with_unconstrained (8,913 samples, 78.20%)</title><rect x="16.9591%" y="677" width="78.1979%" height="15" fill="rgb(252,131,39)" fg:x="1933" fg:w="8913"/><text x="17.2091%" y="687.50">tokio::runtime::coop::with_unconstrained</text></g><g><title>tokio::runtime::coop::with_budget (8,913 samples, 78.20%)</title><rect x="16.9591%" y="661" width="78.1979%" height="15" fill="rgb(210,108,39)" fg:x="1933" fg:w="8913"/><text x="17.2091%" y="671.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::context::budget (5 samples, 0.04%)</title><rect x="95.1132%" y="645" width="0.0439%" height="15" fill="rgb(205,23,29)" fg:x="10841" fg:w="5"/><text x="95.3632%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.04%)</title><rect x="95.1132%" y="629" width="0.0439%" height="15" fill="rgb(246,139,46)" fg:x="10841" fg:w="5"/><text x="95.3632%" y="639.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (2 samples, 0.02%)</title><rect x="95.1395%" y="613" width="0.0175%" height="15" fill="rgb(250,81,26)" fg:x="10844" fg:w="2"/><text x="95.3895%" y="623.50"></text></g><g><title>tokio::runtime::coop::with_budget::_{{closure}} (2 samples, 0.02%)</title><rect x="95.1395%" y="597" width="0.0175%" height="15" fill="rgb(214,104,7)" fg:x="10844" fg:w="2"/><text x="95.3895%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="95.1395%" y="581" width="0.0175%" height="15" fill="rgb(233,189,8)" fg:x="10844" fg:w="2"/><text x="95.3895%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (7 samples, 0.06%)</title><rect x="95.1570%" y="693" width="0.0614%" height="15" fill="rgb(228,141,17)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="703.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="95.1570%" y="677" width="0.0614%" height="15" fill="rgb(247,157,1)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="687.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (7 samples, 0.06%)</title><rect x="95.1570%" y="661" width="0.0614%" height="15" fill="rgb(249,225,5)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.06%)</title><rect x="95.1570%" y="645" width="0.0614%" height="15" fill="rgb(242,55,13)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.06%)</title><rect x="95.1570%" y="629" width="0.0614%" height="15" fill="rgb(230,49,50)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="639.50"></text></g><g><title>tokio::runtime::context::CONTEXT::_{{constant}}::_{{closure}} (7 samples, 0.06%)</title><rect x="95.1570%" y="613" width="0.0614%" height="15" fill="rgb(241,111,38)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="623.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (7 samples, 0.06%)</title><rect x="95.1570%" y="597" width="0.0614%" height="15" fill="rgb(252,155,4)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.06%)</title><rect x="95.1570%" y="581" width="0.0614%" height="15" fill="rgb(212,69,32)" fg:x="10846" fg:w="7"/><text x="95.4070%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (8,921 samples, 78.27%)</title><rect x="16.9591%" y="837" width="78.2681%" height="15" fill="rgb(243,107,47)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="847.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (8,921 samples, 78.27%)</title><rect x="16.9591%" y="821" width="78.2681%" height="15" fill="rgb(247,130,12)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,921 samples, 78.27%)</title><rect x="16.9591%" y="805" width="78.2681%" height="15" fill="rgb(233,74,16)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,921 samples, 78.27%)</title><rect x="16.9591%" y="789" width="78.2681%" height="15" fill="rgb(208,58,18)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="799.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,921 samples, 78.27%)</title><rect x="16.9591%" y="773" width="78.2681%" height="15" fill="rgb(242,225,1)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="783.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (8,921 samples, 78.27%)</title><rect x="16.9591%" y="757" width="78.2681%" height="15" fill="rgb(249,39,40)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="767.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8,921 samples, 78.27%)</title><rect x="16.9591%" y="741" width="78.2681%" height="15" fill="rgb(207,72,44)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="751.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8,921 samples, 78.27%)</title><rect x="16.9591%" y="725" width="78.2681%" height="15" fill="rgb(215,193,12)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="735.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (8,921 samples, 78.27%)</title><rect x="16.9591%" y="709" width="78.2681%" height="15" fill="rgb(248,41,39)" fg:x="1933" fg:w="8921"/><text x="17.2091%" y="719.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.04%)</title><rect x="95.2448%" y="805" width="0.0439%" height="15" fill="rgb(253,85,4)" fg:x="10856" fg:w="5"/><text x="95.4948%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.04%)</title><rect x="95.2448%" y="789" width="0.0439%" height="15" fill="rgb(243,70,31)" fg:x="10856" fg:w="5"/><text x="95.4948%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.02%)</title><rect x="95.2886%" y="805" width="0.0175%" height="15" fill="rgb(253,195,26)" fg:x="10861" fg:w="2"/><text x="95.5386%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.02%)</title><rect x="95.2886%" y="789" width="0.0175%" height="15" fill="rgb(243,42,11)" fg:x="10861" fg:w="2"/><text x="95.5386%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="95.2886%" y="773" width="0.0175%" height="15" fill="rgb(239,66,17)" fg:x="10861" fg:w="2"/><text x="95.5386%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (14 samples, 0.12%)</title><rect x="95.2272%" y="837" width="0.1228%" height="15" fill="rgb(217,132,21)" fg:x="10854" fg:w="14"/><text x="95.4772%" y="847.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (14 samples, 0.12%)</title><rect x="95.2272%" y="821" width="0.1228%" height="15" fill="rgb(252,202,21)" fg:x="10854" fg:w="14"/><text x="95.4772%" y="831.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::_{{closure}} (5 samples, 0.04%)</title><rect x="95.3062%" y="805" width="0.0439%" height="15" fill="rgb(233,98,36)" fg:x="10863" fg:w="5"/><text x="95.5562%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.02%)</title><rect x="95.3588%" y="805" width="0.0175%" height="15" fill="rgb(216,153,54)" fg:x="10869" fg:w="2"/><text x="95.6088%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="95.3588%" y="789" width="0.0175%" height="15" fill="rgb(250,99,7)" fg:x="10869" fg:w="2"/><text x="95.6088%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (4 samples, 0.04%)</title><rect x="95.3501%" y="837" width="0.0351%" height="15" fill="rgb(207,56,50)" fg:x="10868" fg:w="4"/><text x="95.6001%" y="847.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (4 samples, 0.04%)</title><rect x="95.3501%" y="821" width="0.0351%" height="15" fill="rgb(244,61,34)" fg:x="10868" fg:w="4"/><text x="95.6001%" y="831.50"></text></g><g><title>tokio::runtime::coop::budget (9,003 samples, 78.99%)</title><rect x="16.4064%" y="965" width="78.9875%" height="15" fill="rgb(241,50,38)" fg:x="1870" fg:w="9003"/><text x="16.6564%" y="975.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (9,003 samples, 78.99%)</title><rect x="16.4064%" y="949" width="78.9875%" height="15" fill="rgb(212,166,30)" fg:x="1870" fg:w="9003"/><text x="16.6564%" y="959.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (8,999 samples, 78.95%)</title><rect x="16.4415%" y="933" width="78.9524%" height="15" fill="rgb(249,127,32)" fg:x="1874" fg:w="8999"/><text x="16.6915%" y="943.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (8,981 samples, 78.79%)</title><rect x="16.5994%" y="917" width="78.7945%" height="15" fill="rgb(209,103,0)" fg:x="1892" fg:w="8981"/><text x="16.8494%" y="927.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (8,981 samples, 78.79%)</title><rect x="16.5994%" y="901" width="78.7945%" height="15" fill="rgb(238,209,51)" fg:x="1892" fg:w="8981"/><text x="16.8494%" y="911.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (8,981 samples, 78.79%)</title><rect x="16.5994%" y="885" width="78.7945%" height="15" fill="rgb(237,56,23)" fg:x="1892" fg:w="8981"/><text x="16.8494%" y="895.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8,981 samples, 78.79%)</title><rect x="16.5994%" y="869" width="78.7945%" height="15" fill="rgb(215,153,46)" fg:x="1892" fg:w="8981"/><text x="16.8494%" y="879.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (8,945 samples, 78.48%)</title><rect x="16.9152%" y="853" width="78.4787%" height="15" fill="rgb(224,49,31)" fg:x="1928" fg:w="8945"/><text x="17.1652%" y="863.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (9,009 samples, 79.04%)</title><rect x="16.3888%" y="981" width="79.0402%" height="15" fill="rgb(250,18,42)" fg:x="1868" fg:w="9009"/><text x="16.6388%" y="991.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (4 samples, 0.04%)</title><rect x="95.3939%" y="965" width="0.0351%" height="15" fill="rgb(215,176,39)" fg:x="10873" fg:w="4"/><text x="95.6439%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (4 samples, 0.04%)</title><rect x="95.3939%" y="949" width="0.0351%" height="15" fill="rgb(223,77,29)" fg:x="10873" fg:w="4"/><text x="95.6439%" y="959.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.04%)</title><rect x="95.3939%" y="933" width="0.0351%" height="15" fill="rgb(234,94,52)" fg:x="10873" fg:w="4"/><text x="95.6439%" y="943.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (4 samples, 0.04%)</title><rect x="95.3939%" y="917" width="0.0351%" height="15" fill="rgb(220,154,50)" fg:x="10873" fg:w="4"/><text x="95.6439%" y="927.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.02%)</title><rect x="95.4115%" y="901" width="0.0175%" height="15" fill="rgb(212,11,10)" fg:x="10875" fg:w="2"/><text x="95.6615%" y="911.50"></text></g><g><title>parking_lot_core::parking_lot::hash (2 samples, 0.02%)</title><rect x="95.4115%" y="885" width="0.0175%" height="15" fill="rgb(205,166,19)" fg:x="10875" fg:w="2"/><text x="95.6615%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (2 samples, 0.02%)</title><rect x="95.4817%" y="965" width="0.0175%" height="15" fill="rgb(244,198,16)" fg:x="10883" fg:w="2"/><text x="95.7317%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (15 samples, 0.13%)</title><rect x="95.4290%" y="981" width="0.1316%" height="15" fill="rgb(219,69,12)" fg:x="10877" fg:w="15"/><text x="95.6790%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (7 samples, 0.06%)</title><rect x="95.4992%" y="965" width="0.0614%" height="15" fill="rgb(245,30,7)" fg:x="10885" fg:w="7"/><text x="95.7492%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (6 samples, 0.05%)</title><rect x="95.5080%" y="949" width="0.0526%" height="15" fill="rgb(218,221,48)" fg:x="10886" fg:w="6"/><text x="95.7580%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="95.6133%" y="965" width="0.0175%" height="15" fill="rgb(216,66,15)" fg:x="10898" fg:w="2"/><text x="95.8633%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2 samples, 0.02%)</title><rect x="95.6133%" y="949" width="0.0175%" height="15" fill="rgb(226,122,50)" fg:x="10898" fg:w="2"/><text x="95.8633%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="95.6133%" y="933" width="0.0175%" height="15" fill="rgb(239,156,16)" fg:x="10898" fg:w="2"/><text x="95.8633%" y="943.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="95.6484%" y="949" width="0.0263%" height="15" fill="rgb(224,27,38)" fg:x="10902" fg:w="3"/><text x="95.8984%" y="959.50"></text></g><g><title>tokio::loom::std::atomic_u32::AtomicU32::unsync_load (4 samples, 0.04%)</title><rect x="95.6747%" y="949" width="0.0351%" height="15" fill="rgb(224,39,27)" fg:x="10905" fg:w="4"/><text x="95.9247%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (4 samples, 0.04%)</title><rect x="95.6747%" y="933" width="0.0351%" height="15" fill="rgb(215,92,29)" fg:x="10905" fg:w="4"/><text x="95.9247%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="95.6747%" y="917" width="0.0351%" height="15" fill="rgb(207,159,16)" fg:x="10905" fg:w="4"/><text x="95.9247%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (4 samples, 0.04%)</title><rect x="95.7624%" y="933" width="0.0351%" height="15" fill="rgb(238,163,47)" fg:x="10915" fg:w="4"/><text x="96.0124%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="95.7624%" y="917" width="0.0351%" height="15" fill="rgb(219,91,49)" fg:x="10915" fg:w="4"/><text x="96.0124%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (37 samples, 0.32%)</title><rect x="95.6396%" y="965" width="0.3246%" height="15" fill="rgb(227,167,31)" fg:x="10901" fg:w="37"/><text x="95.8896%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (29 samples, 0.25%)</title><rect x="95.7098%" y="949" width="0.2544%" height="15" fill="rgb(234,80,54)" fg:x="10909" fg:w="29"/><text x="95.9598%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (19 samples, 0.17%)</title><rect x="95.7975%" y="933" width="0.1667%" height="15" fill="rgb(212,114,2)" fg:x="10919" fg:w="19"/><text x="96.0475%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.17%)</title><rect x="95.7975%" y="917" width="0.1667%" height="15" fill="rgb(234,50,24)" fg:x="10919" fg:w="19"/><text x="96.0475%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_searching (3 samples, 0.03%)</title><rect x="95.9642%" y="965" width="0.0263%" height="15" fill="rgb(221,68,8)" fg:x="10938" fg:w="3"/><text x="96.2142%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_searching (3 samples, 0.03%)</title><rect x="95.9642%" y="949" width="0.0263%" height="15" fill="rgb(254,180,31)" fg:x="10938" fg:w="3"/><text x="96.2142%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::inc_num_searching (3 samples, 0.03%)</title><rect x="95.9642%" y="933" width="0.0263%" height="15" fill="rgb(247,130,50)" fg:x="10938" fg:w="3"/><text x="96.2142%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.03%)</title><rect x="95.9642%" y="917" width="0.0263%" height="15" fill="rgb(211,109,4)" fg:x="10938" fg:w="3"/><text x="96.2142%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.03%)</title><rect x="95.9642%" y="901" width="0.0263%" height="15" fill="rgb(238,50,21)" fg:x="10938" fg:w="3"/><text x="96.2142%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (52 samples, 0.46%)</title><rect x="95.5606%" y="981" width="0.4562%" height="15" fill="rgb(225,57,45)" fg:x="10892" fg:w="52"/><text x="95.8106%" y="991.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (3 samples, 0.03%)</title><rect x="95.9905%" y="965" width="0.0263%" height="15" fill="rgb(209,196,50)" fg:x="10941" fg:w="3"/><text x="96.2405%" y="975.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (3 samples, 0.03%)</title><rect x="95.9905%" y="949" width="0.0263%" height="15" fill="rgb(242,140,13)" fg:x="10941" fg:w="3"/><text x="96.2405%" y="959.50"></text></g><g><title>[libc.so.6] (10,624 samples, 93.21%)</title><rect x="2.8251%" y="1653" width="93.2093%" height="15" fill="rgb(217,111,7)" fg:x="322" fg:w="10624"/><text x="3.0751%" y="1663.50">[libc.so.6]</text></g><g><title>[libc.so.6] (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1637" width="93.1830%" height="15" fill="rgb(253,193,51)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1647.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1621" width="93.1830%" height="15" fill="rgb(252,70,29)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1631.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1605" width="93.1830%" height="15" fill="rgb(232,127,12)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1615.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1589" width="93.1830%" height="15" fill="rgb(211,180,21)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1599.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1573" width="93.1830%" height="15" fill="rgb(229,72,13)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1583.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1557" width="93.1830%" height="15" fill="rgb(240,211,49)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1567.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1541" width="93.1830%" height="15" fill="rgb(219,149,40)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1551.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1525" width="93.1830%" height="15" fill="rgb(210,127,46)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1535.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1509" width="93.1830%" height="15" fill="rgb(220,106,7)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1519.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1493" width="93.1830%" height="15" fill="rgb(249,31,22)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1503.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1477" width="93.1830%" height="15" fill="rgb(253,1,49)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1487.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1461" width="93.1830%" height="15" fill="rgb(227,144,33)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1471.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1445" width="93.1830%" height="15" fill="rgb(249,163,44)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1455.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (10,621 samples, 93.18%)</title><rect x="2.8514%" y="1429" width="93.1830%" height="15" fill="rgb(234,15,39)" fg:x="325" fg:w="10621"/><text x="3.1014%" y="1439.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1413" width="93.1041%" height="15" fill="rgb(207,66,16)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1423.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1397" width="93.1041%" height="15" fill="rgb(233,112,24)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1407.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1381" width="93.1041%" height="15" fill="rgb(230,90,22)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1391.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1365" width="93.1041%" height="15" fill="rgb(229,61,13)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1375.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1349" width="93.1041%" height="15" fill="rgb(225,57,24)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1359.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1333" width="93.1041%" height="15" fill="rgb(208,169,48)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1343.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1317" width="93.1041%" height="15" fill="rgb(244,218,51)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1327.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1301" width="93.1041%" height="15" fill="rgb(214,148,10)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1285" width="93.1041%" height="15" fill="rgb(225,174,27)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1295.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1269" width="93.1041%" height="15" fill="rgb(230,96,26)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1279.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1253" width="93.1041%" height="15" fill="rgb(232,10,30)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1263.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1237" width="93.1041%" height="15" fill="rgb(222,8,50)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1247.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1221" width="93.1041%" height="15" fill="rgb(213,81,27)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1231.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1205" width="93.1041%" height="15" fill="rgb(245,50,10)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1215.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1189" width="93.1041%" height="15" fill="rgb(216,100,18)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1199.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1173" width="93.1041%" height="15" fill="rgb(236,147,54)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1183.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1157" width="93.1041%" height="15" fill="rgb(205,143,26)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1167.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1141" width="93.1041%" height="15" fill="rgb(236,26,9)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1151.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1125" width="93.1041%" height="15" fill="rgb(221,165,53)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1135.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1109" width="93.1041%" height="15" fill="rgb(214,110,17)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1119.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1093" width="93.1041%" height="15" fill="rgb(237,197,12)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1103.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1077" width="93.1041%" height="15" fill="rgb(205,84,17)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1087.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1061" width="93.1041%" height="15" fill="rgb(237,18,45)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1071.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1045" width="93.1041%" height="15" fill="rgb(221,87,14)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1055.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1029" width="93.1041%" height="15" fill="rgb(238,186,15)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1039.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (10,612 samples, 93.10%)</title><rect x="2.9303%" y="1013" width="93.1041%" height="15" fill="rgb(208,115,11)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1023.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (10,612 samples, 93.10%)</title><rect x="2.9303%" y="997" width="93.1041%" height="15" fill="rgb(254,175,0)" fg:x="334" fg:w="10612"/><text x="3.1803%" y="1007.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tick (2 samples, 0.02%)</title><rect x="96.0168%" y="981" width="0.0175%" height="15" fill="rgb(227,24,42)" fg:x="10944" fg:w="2"/><text x="96.2668%" y="991.50"></text></g><g><title>&lt;futures_util::lock::mutex::MutexLockFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.07%)</title><rect x="97.0697%" y="1637" width="0.0702%" height="15" fill="rgb(223,211,37)" fg:x="11064" fg:w="8"/><text x="97.3197%" y="1647.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.08%)</title><rect x="97.1486%" y="1589" width="0.0790%" height="15" fill="rgb(235,49,27)" fg:x="11073" fg:w="9"/><text x="97.3986%" y="1599.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}}::_{{closure}} (9 samples, 0.08%)</title><rect x="97.1486%" y="1573" width="0.0790%" height="15" fill="rgb(254,97,51)" fg:x="11073" fg:w="9"/><text x="97.3986%" y="1583.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.08%)</title><rect x="97.1486%" y="1557" width="0.0790%" height="15" fill="rgb(249,51,40)" fg:x="11073" fg:w="9"/><text x="97.3986%" y="1567.50"></text></g><g><title>&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.11%)</title><rect x="97.1398%" y="1637" width="0.1053%" height="15" fill="rgb(210,128,45)" fg:x="11072" fg:w="12"/><text x="97.3898%" y="1647.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::into_inner_stream::_{{closure}}::_{{closure}} (11 samples, 0.10%)</title><rect x="97.1486%" y="1621" width="0.0965%" height="15" fill="rgb(224,137,50)" fg:x="11073" fg:w="11"/><text x="97.3986%" y="1631.50"></text></g><g><title>wisp_mux::stream::MuxStreamRead::read::_{{closure}} (11 samples, 0.10%)</title><rect x="97.1486%" y="1605" width="0.0965%" height="15" fill="rgb(242,15,9)" fg:x="11073" fg:w="11"/><text x="97.3986%" y="1615.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="97.2451%" y="1637" width="0.0351%" height="15" fill="rgb(233,187,41)" fg:x="11084" fg:w="4"/><text x="97.4951%" y="1647.50"></text></g><g><title>&lt;tokio::task::unconstrained::Unconstrained&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.2802%" y="1637" width="0.0175%" height="15" fill="rgb(227,2,29)" fg:x="11088" fg:w="2"/><text x="97.5302%" y="1647.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (3 samples, 0.03%)</title><rect x="97.3241%" y="1621" width="0.0263%" height="15" fill="rgb(222,70,3)" fg:x="11093" fg:w="3"/><text x="97.5741%" y="1631.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="97.4381%" y="1557" width="0.0263%" height="15" fill="rgb(213,11,42)" fg:x="11106" fg:w="3"/><text x="97.6881%" y="1567.50"></text></g><g><title>&lt;wisp_mux::sink_unfold::Unfold&lt;T,F,R,CT,CF,CR&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (23 samples, 0.20%)</title><rect x="97.2978%" y="1637" width="0.2018%" height="15" fill="rgb(225,150,9)" fg:x="11090" fg:w="23"/><text x="97.5478%" y="1647.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::into_inner_sink::_{{closure}}::_{{closure}} (17 samples, 0.15%)</title><rect x="97.3504%" y="1621" width="0.1491%" height="15" fill="rgb(230,162,45)" fg:x="11096" fg:w="17"/><text x="97.6004%" y="1631.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload::_{{closure}} (17 samples, 0.15%)</title><rect x="97.3504%" y="1605" width="0.1491%" height="15" fill="rgb(222,14,52)" fg:x="11096" fg:w="17"/><text x="97.6004%" y="1615.50"></text></g><g><title>wisp_mux::stream::MuxStreamWrite::write_payload_internal::_{{closure}} (15 samples, 0.13%)</title><rect x="97.3680%" y="1589" width="0.1316%" height="15" fill="rgb(254,198,14)" fg:x="11098" fg:w="15"/><text x="97.6180%" y="1599.50"></text></g><g><title>wisp_mux::ws::LockedWebSocketWrite::write_split::_{{closure}} (13 samples, 0.11%)</title><rect x="97.3855%" y="1573" width="0.1141%" height="15" fill="rgb(220,217,30)" fg:x="11100" fg:w="13"/><text x="97.6355%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="97.4645%" y="1557" width="0.0351%" height="15" fill="rgb(215,146,41)" fg:x="11109" fg:w="4"/><text x="97.7145%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (4 samples, 0.04%)</title><rect x="97.4645%" y="1541" width="0.0351%" height="15" fill="rgb(217,27,36)" fg:x="11109" fg:w="4"/><text x="97.7145%" y="1551.50"></text></g><g><title>&lt;wisp_mux::ws::Payload as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.03%)</title><rect x="97.4996%" y="1637" width="0.0263%" height="15" fill="rgb(219,218,39)" fg:x="11113" fg:w="3"/><text x="97.7496%" y="1647.50"></text></g><g><title>[libc.so.6] (28 samples, 0.25%)</title><rect x="97.5259%" y="1637" width="0.2457%" height="15" fill="rgb(219,4,42)" fg:x="11116" fg:w="28"/><text x="97.7759%" y="1647.50"></text></g><g><title>__send (4 samples, 0.04%)</title><rect x="97.7715%" y="1637" width="0.0351%" height="15" fill="rgb(249,119,36)" fg:x="11144" fg:w="4"/><text x="98.0215%" y="1647.50"></text></g><g><title>cfree (8 samples, 0.07%)</title><rect x="97.8154%" y="1637" width="0.0702%" height="15" fill="rgb(209,23,33)" fg:x="11149" fg:w="8"/><text x="98.0654%" y="1647.50"></text></g><g><title>clock_gettime (3 samples, 0.03%)</title><rect x="97.8856%" y="1637" width="0.0263%" height="15" fill="rgb(211,10,0)" fg:x="11157" fg:w="3"/><text x="98.1356%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::WriteHalf::write_frame&lt;tokio_util::either::Either&lt;tokio::net::tcp::split_owned::OwnedWriteHalf,tokio::net::unix::split_owned::OwnedWriteHalf&gt;&gt;::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="97.9119%" y="1637" width="0.0175%" height="15" fill="rgb(208,99,37)" fg:x="11160" fg:w="2"/><text x="98.1619%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::lock::mutex::MutexGuard&lt;alloc::boxed::Box&lt;dyn wisp_mux::ws::WebSocketWrite+core::marker::Send&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="97.9295%" y="1637" width="0.0614%" height="15" fill="rgb(213,132,31)" fg:x="11162" fg:w="7"/><text x="98.1795%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::sink_unfold::UnfoldState&lt;wisp_mux::stream::MuxStreamWrite,wisp_mux::stream::MuxStreamWrite::into_inner_sink::{{closure}}::{{closure}}&gt;&gt; (3 samples, 0.03%)</title><rect x="97.9909%" y="1637" width="0.0263%" height="15" fill="rgb(243,129,40)" fg:x="11169" fg:w="3"/><text x="98.2409%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::stream::MuxStreamWrite::write_payload_internal::{{closure}}&gt; (7 samples, 0.06%)</title><rect x="98.0172%" y="1637" width="0.0614%" height="15" fill="rgb(210,66,33)" fg:x="11172" fg:w="7"/><text x="98.2672%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;wisp_mux::ws::LockedWebSocketWrite::write_split::{{closure}}&gt; (2 samples, 0.02%)</title><rect x="98.0786%" y="1637" width="0.0175%" height="15" fill="rgb(209,189,4)" fg:x="11179" fg:w="2"/><text x="98.3286%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Frame&gt; (7 samples, 0.06%)</title><rect x="98.2365%" y="1605" width="0.0614%" height="15" fill="rgb(214,107,37)" fg:x="11197" fg:w="7"/><text x="98.4865%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastwebsockets::frame::Payload&gt; (7 samples, 0.06%)</title><rect x="98.2365%" y="1589" width="0.0614%" height="15" fill="rgb(245,88,54)" fg:x="11197" fg:w="7"/><text x="98.4865%" y="1599.50"></text></g><g><title>fastwebsockets::WebSocketWrite&lt;S&gt;::write_frame::_{{closure}} (28 samples, 0.25%)</title><rect x="98.0962%" y="1637" width="0.2457%" height="15" fill="rgb(205,146,20)" fg:x="11181" fg:w="28"/><text x="98.3462%" y="1647.50"></text></g><g><title>fastwebsockets::WriteHalf::write_frame::_{{closure}} (12 samples, 0.11%)</title><rect x="98.2365%" y="1621" width="0.1053%" height="15" fill="rgb(220,161,25)" fg:x="11197" fg:w="12"/><text x="98.4865%" y="1631.50"></text></g><g><title>fastwebsockets::frame::Frame::writev::_{{closure}} (5 samples, 0.04%)</title><rect x="98.2979%" y="1605" width="0.0439%" height="15" fill="rgb(215,152,15)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1615.50"></text></g><g><title>&lt;tokio::io::util::write_vectored::WriteVectored&lt;W&gt; as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="98.2979%" y="1589" width="0.0439%" height="15" fill="rgb(233,192,44)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1599.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (5 samples, 0.04%)</title><rect x="98.2979%" y="1573" width="0.0439%" height="15" fill="rgb(240,170,46)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1583.50"></text></g><g><title>tokio::io::async_write::AsyncWrite::poll_write_vectored (5 samples, 0.04%)</title><rect x="98.2979%" y="1557" width="0.0439%" height="15" fill="rgb(207,104,33)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1567.50"></text></g><g><title>&lt;tokio_util::either::Either&lt;L,R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="98.2979%" y="1541" width="0.0439%" height="15" fill="rgb(219,21,39)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1551.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="98.2979%" y="1525" width="0.0439%" height="15" fill="rgb(214,133,29)" fg:x="11204" fg:w="5"/><text x="98.5479%" y="1535.50"></text></g><g><title>futures_util::lock::mutex::Mutex&lt;T&gt;::remove_waker (5 samples, 0.04%)</title><rect x="98.3418%" y="1637" width="0.0439%" height="15" fill="rgb(226,93,6)" fg:x="11209" fg:w="5"/><text x="98.5918%" y="1647.50"></text></g><g><title>recv (5 samples, 0.04%)</title><rect x="98.3857%" y="1637" width="0.0439%" height="15" fill="rgb(252,222,34)" fg:x="11214" fg:w="5"/><text x="98.6357%" y="1647.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="98.4734%" y="1605" width="0.0614%" height="15" fill="rgb(252,92,48)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1615.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (7 samples, 0.06%)</title><rect x="98.4734%" y="1589" width="0.0614%" height="15" fill="rgb(245,223,24)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1599.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (7 samples, 0.06%)</title><rect x="98.4734%" y="1573" width="0.0614%" height="15" fill="rgb(205,176,3)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1583.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (7 samples, 0.06%)</title><rect x="98.4734%" y="1557" width="0.0614%" height="15" fill="rgb(235,151,15)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1567.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 0.06%)</title><rect x="98.4734%" y="1541" width="0.0614%" height="15" fill="rgb(237,209,11)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1551.50"></text></g><g><title>std::sys_common::net::TcpStream::read (7 samples, 0.06%)</title><rect x="98.4734%" y="1525" width="0.0614%" height="15" fill="rgb(243,227,24)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1535.50"></text></g><g><title>std::sys::pal::unix::net::Socket::read (7 samples, 0.06%)</title><rect x="98.4734%" y="1509" width="0.0614%" height="15" fill="rgb(239,193,16)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1519.50"></text></g><g><title>std::sys::pal::unix::net::Socket::recv_with_flags (7 samples, 0.06%)</title><rect x="98.4734%" y="1493" width="0.0614%" height="15" fill="rgb(231,27,9)" fg:x="11224" fg:w="7"/><text x="98.7234%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (14 samples, 0.12%)</title><rect x="98.4295%" y="1637" width="0.1228%" height="15" fill="rgb(219,169,10)" fg:x="11219" fg:w="14"/><text x="98.6795%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (9 samples, 0.08%)</title><rect x="98.4734%" y="1621" width="0.0790%" height="15" fill="rgb(244,229,43)" fg:x="11224" fg:w="9"/><text x="98.7234%" y="1631.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.02%)</title><rect x="98.5348%" y="1605" width="0.0175%" height="15" fill="rgb(254,38,20)" fg:x="11231" fg:w="2"/><text x="98.7848%" y="1615.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (22 samples, 0.19%)</title><rect x="98.5524%" y="1637" width="0.1930%" height="15" fill="rgb(250,47,30)" fg:x="11233" fg:w="22"/><text x="98.8024%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 0.02%)</title><rect x="98.7278%" y="1621" width="0.0175%" height="15" fill="rgb(224,124,36)" fg:x="11253" fg:w="2"/><text x="98.9778%" y="1631.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (2 samples, 0.02%)</title><rect x="98.7278%" y="1605" width="0.0175%" height="15" fill="rgb(246,68,51)" fg:x="11253" fg:w="2"/><text x="98.9778%" y="1615.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.02%)</title><rect x="98.7454%" y="1637" width="0.0175%" height="15" fill="rgb(253,43,49)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1647.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (2 samples, 0.02%)</title><rect x="98.7454%" y="1621" width="0.0175%" height="15" fill="rgb(219,54,36)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1631.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (2 samples, 0.02%)</title><rect x="98.7454%" y="1605" width="0.0175%" height="15" fill="rgb(227,133,34)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1615.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (2 samples, 0.02%)</title><rect x="98.7454%" y="1589" width="0.0175%" height="15" fill="rgb(247,227,15)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1599.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (2 samples, 0.02%)</title><rect x="98.7454%" y="1573" width="0.0175%" height="15" fill="rgb(229,96,14)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (2 samples, 0.02%)</title><rect x="98.7454%" y="1557" width="0.0175%" height="15" fill="rgb(220,79,17)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1567.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="98.7454%" y="1541" width="0.0175%" height="15" fill="rgb(205,131,53)" fg:x="11255" fg:w="2"/><text x="98.9954%" y="1551.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (15 samples, 0.13%)</title><rect x="98.7717%" y="1637" width="0.1316%" height="15" fill="rgb(209,50,29)" fg:x="11258" fg:w="15"/><text x="99.0217%" y="1647.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (2 samples, 0.02%)</title><rect x="98.9033%" y="1637" width="0.0175%" height="15" fill="rgb(245,86,46)" fg:x="11273" fg:w="2"/><text x="99.1533%" y="1647.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (2 samples, 0.02%)</title><rect x="98.9384%" y="1637" width="0.0175%" height="15" fill="rgb(235,66,46)" fg:x="11277" fg:w="2"/><text x="99.1884%" y="1647.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (7 samples, 0.06%)</title><rect x="98.9823%" y="1621" width="0.0614%" height="15" fill="rgb(232,148,31)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1631.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (7 samples, 0.06%)</title><rect x="98.9823%" y="1605" width="0.0614%" height="15" fill="rgb(217,149,8)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7 samples, 0.06%)</title><rect x="98.9823%" y="1589" width="0.0614%" height="15" fill="rgb(209,183,11)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="98.9823%" y="1573" width="0.0614%" height="15" fill="rgb(208,55,20)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1583.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (7 samples, 0.06%)</title><rect x="98.9823%" y="1557" width="0.0614%" height="15" fill="rgb(218,39,14)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1567.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.06%)</title><rect x="98.9823%" y="1541" width="0.0614%" height="15" fill="rgb(216,169,33)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1551.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::_{{closure}} (7 samples, 0.06%)</title><rect x="98.9823%" y="1525" width="0.0614%" height="15" fill="rgb(233,80,24)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1535.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (7 samples, 0.06%)</title><rect x="98.9823%" y="1509" width="0.0614%" height="15" fill="rgb(213,179,31)" fg:x="11282" fg:w="7"/><text x="99.2323%" y="1519.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (22 samples, 0.19%)</title><rect x="98.9560%" y="1637" width="0.1930%" height="15" fill="rgb(209,19,5)" fg:x="11279" fg:w="22"/><text x="99.2060%" y="1647.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (10 samples, 0.09%)</title><rect x="99.0612%" y="1621" width="0.0877%" height="15" fill="rgb(219,18,35)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1631.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (10 samples, 0.09%)</title><rect x="99.0612%" y="1605" width="0.0877%" height="15" fill="rgb(209,169,16)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (10 samples, 0.09%)</title><rect x="99.0612%" y="1589" width="0.0877%" height="15" fill="rgb(245,90,51)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1599.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (10 samples, 0.09%)</title><rect x="99.0612%" y="1573" width="0.0877%" height="15" fill="rgb(220,99,45)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (10 samples, 0.09%)</title><rect x="99.0612%" y="1557" width="0.0877%" height="15" fill="rgb(249,89,25)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.09%)</title><rect x="99.0612%" y="1541" width="0.0877%" height="15" fill="rgb(239,193,0)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (10 samples, 0.09%)</title><rect x="99.0612%" y="1525" width="0.0877%" height="15" fill="rgb(231,126,1)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.09%)</title><rect x="99.0612%" y="1509" width="0.0877%" height="15" fill="rgb(243,166,3)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (10 samples, 0.09%)</title><rect x="99.0612%" y="1493" width="0.0877%" height="15" fill="rgb(223,22,34)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10 samples, 0.09%)</title><rect x="99.0612%" y="1477" width="0.0877%" height="15" fill="rgb(251,52,51)" fg:x="11291" fg:w="10"/><text x="99.3112%" y="1487.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (8 samples, 0.07%)</title><rect x="99.1490%" y="1637" width="0.0702%" height="15" fill="rgb(221,165,28)" fg:x="11301" fg:w="8"/><text x="99.3990%" y="1647.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (8 samples, 0.07%)</title><rect x="99.1490%" y="1621" width="0.0702%" height="15" fill="rgb(218,121,47)" fg:x="11301" fg:w="8"/><text x="99.3990%" y="1631.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (8 samples, 0.07%)</title><rect x="99.1490%" y="1605" width="0.0702%" height="15" fill="rgb(209,120,9)" fg:x="11301" fg:w="8"/><text x="99.3990%" y="1615.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (25 samples, 0.22%)</title><rect x="99.2192%" y="1637" width="0.2193%" height="15" fill="rgb(236,68,12)" fg:x="11309" fg:w="25"/><text x="99.4692%" y="1647.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (12 samples, 0.11%)</title><rect x="99.3332%" y="1621" width="0.1053%" height="15" fill="rgb(225,194,26)" fg:x="11322" fg:w="12"/><text x="99.5832%" y="1631.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (12 samples, 0.11%)</title><rect x="99.3332%" y="1605" width="0.1053%" height="15" fill="rgb(231,84,39)" fg:x="11322" fg:w="12"/><text x="99.5832%" y="1615.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketRead for fastwebsockets::fragment::FragmentCollectorRead&lt;S&gt;&gt;::wisp_read_frame::_{{closure}} (2 samples, 0.02%)</title><rect x="99.4473%" y="1637" width="0.0175%" height="15" fill="rgb(210,11,45)" fg:x="11335" fg:w="2"/><text x="99.6973%" y="1647.50"></text></g><g><title>wisp_mux::fastwebsockets::_&lt;impl wisp_mux::ws::WebSocketWrite for fastwebsockets::WebSocketWrite&lt;S&gt;&gt;::wisp_write_split::_{{closure}} (4 samples, 0.04%)</title><rect x="99.4648%" y="1637" width="0.0351%" height="15" fill="rgb(224,54,52)" fg:x="11337" fg:w="4"/><text x="99.7148%" y="1647.50"></text></g><g><title>[unknown] (397 samples, 3.48%)</title><rect x="96.0344%" y="1653" width="3.4831%" height="15" fill="rgb(238,102,14)" fg:x="10946" fg:w="397"/><text x="96.2844%" y="1663.50">[un..</text></g><g><title>wisp_mux::packet::&lt;impl core::convert::From&lt;wisp_mux::packet::Packet&gt; for bytes::bytes_mut::BytesMut&gt;::from (2 samples, 0.02%)</title><rect x="99.4999%" y="1637" width="0.0175%" height="15" fill="rgb(243,160,52)" fg:x="11341" fg:w="2"/><text x="99.7499%" y="1647.50"></text></g><g><title>__send (7 samples, 0.06%)</title><rect x="99.5175%" y="1653" width="0.0614%" height="15" fill="rgb(216,114,19)" fg:x="11343" fg:w="7"/><text x="99.7675%" y="1663.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (4 samples, 0.04%)</title><rect x="99.5789%" y="1653" width="0.0351%" height="15" fill="rgb(244,166,37)" fg:x="11350" fg:w="4"/><text x="99.8289%" y="1663.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.02%)</title><rect x="99.6140%" y="1653" width="0.0175%" height="15" fill="rgb(246,29,44)" fg:x="11354" fg:w="2"/><text x="99.8640%" y="1663.50"></text></g><g><title>malloc (3 samples, 0.03%)</title><rect x="99.6403%" y="1653" width="0.0263%" height="15" fill="rgb(215,56,53)" fg:x="11357" fg:w="3"/><text x="99.8903%" y="1663.50"></text></g><g><title>mio::sys::unix::waker::eventfd::WakerInternal::wake (4 samples, 0.04%)</title><rect x="99.6666%" y="1653" width="0.0351%" height="15" fill="rgb(217,60,2)" fg:x="11360" fg:w="4"/><text x="99.9166%" y="1663.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="99.6842%" y="1637" width="0.0175%" height="15" fill="rgb(207,26,24)" fg:x="11362" fg:w="2"/><text x="99.9342%" y="1647.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (2 samples, 0.02%)</title><rect x="99.6842%" y="1621" width="0.0175%" height="15" fill="rgb(252,210,15)" fg:x="11362" fg:w="2"/><text x="99.9342%" y="1631.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (2 samples, 0.02%)</title><rect x="99.6842%" y="1605" width="0.0175%" height="15" fill="rgb(253,209,26)" fg:x="11362" fg:w="2"/><text x="99.9342%" y="1615.50"></text></g><g><title>recv (3 samples, 0.03%)</title><rect x="99.7105%" y="1653" width="0.0263%" height="15" fill="rgb(238,170,14)" fg:x="11365" fg:w="3"/><text x="99.9605%" y="1663.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.03%)</title><rect x="99.7368%" y="1653" width="0.0263%" height="15" fill="rgb(216,178,15)" fg:x="11368" fg:w="3"/><text x="99.9868%" y="1663.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (3 samples, 0.03%)</title><rect x="99.7368%" y="1637" width="0.0263%" height="15" fill="rgb(250,197,2)" fg:x="11368" fg:w="3"/><text x="99.9868%" y="1647.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="99.7631%" y="1653" width="0.0175%" height="15" fill="rgb(212,70,42)" fg:x="11371" fg:w="2"/><text x="100.0131%" y="1663.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (9 samples, 0.08%)</title><rect x="99.7807%" y="1653" width="0.0790%" height="15" fill="rgb(227,213,9)" fg:x="11373" fg:w="9"/><text x="100.0307%" y="1663.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (6 samples, 0.05%)</title><rect x="99.8596%" y="1653" width="0.0526%" height="15" fill="rgb(245,99,25)" fg:x="11382" fg:w="6"/><text x="100.1096%" y="1663.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.02%)</title><rect x="99.9123%" y="1653" width="0.0175%" height="15" fill="rgb(250,82,29)" fg:x="11388" fg:w="2"/><text x="100.1623%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="99.9649%" y="1573" width="0.0175%" height="15" fill="rgb(241,226,54)" fg:x="11394" fg:w="2"/><text x="100.2149%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;wisp_mux::ws::Frame,wisp_mux::WispError&gt;+core::marker::Send&gt;&gt; (2 samples, 0.02%)</title><rect x="99.9649%" y="1557" width="0.0175%" height="15" fill="rgb(221,99,41)" fg:x="11394" fg:w="2"/><text x="100.2149%" y="1567.50"></text></g><g><title>wisp_mux::MuxInner::as_future::_{{closure}}::_{{closure}}::_{{closure}} (7 samples, 0.06%)</title><rect x="99.9298%" y="1653" width="0.0614%" height="15" fill="rgb(213,90,21)" fg:x="11390" fg:w="7"/><text x="100.1798%" y="1663.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (5 samples, 0.04%)</title><rect x="99.9474%" y="1637" width="0.0439%" height="15" fill="rgb(205,208,24)" fg:x="11392" fg:w="5"/><text x="100.1974%" y="1647.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="99.9474%" y="1621" width="0.0439%" height="15" fill="rgb(246,31,12)" fg:x="11392" fg:w="5"/><text x="100.1974%" y="1631.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="99.9474%" y="1605" width="0.0439%" height="15" fill="rgb(213,154,6)" fg:x="11392" fg:w="5"/><text x="100.1974%" y="1615.50"></text></g><g><title>wisp_mux::MuxInner::server_loop::_{{closure}} (5 samples, 0.04%)</title><rect x="99.9474%" y="1589" width="0.0439%" height="15" fill="rgb(222,163,29)" fg:x="11392" fg:w="5"/><text x="100.1974%" y="1599.50"></text></g><g><title>all (11,398 samples, 100%)</title><rect x="0.0000%" y="1685" width="100.0000%" height="15" fill="rgb(227,201,8)" fg:x="0" fg:w="11398"/><text x="0.2500%" y="1695.50"></text></g><g><title>tokio-runtime-w (11,382 samples, 99.86%)</title><rect x="0.1404%" y="1669" width="99.8596%" height="15" fill="rgb(233,9,32)" fg:x="16" fg:w="11382"/><text x="0.3904%" y="1679.50">tokio-runtime-w</text></g></svg></svg>